
USB_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008be4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08008cf0  08008cf0  00018cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd8  08008fd8  00020658  2**0
                  CONTENTS
  4 .ARM          00000000  08008fd8  08008fd8  00020658  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fd8  08008fd8  00020658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fd8  08008fd8  00018fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fdc  08008fdc  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000658  20000000  08008fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000844  20000658  08009638  00020658  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e9c  08009638  00020e9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020658  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d08f  00000000  00000000  00020681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc8  00000000  00000000  0002d710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  000302d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00030e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019940  00000000  00000000  000318e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5e1  00000000  00000000  0004b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084855  00000000  00000000  0005a801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df056  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d2c  00000000  00000000  000df0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000658 	.word	0x20000658
 8000128:	00000000 	.word	0x00000000
 800012c:	08008cd8 	.word	0x08008cd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000065c 	.word	0x2000065c
 8000148:	08008cd8 	.word	0x08008cd8

0800014c <decode_usb>:
};



uint8_t decode_usb(uint8_t input)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	int row, col, map_r, map_c;

	uint8_t location;
	row = (input >> 4) & 0x0f;
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	091b      	lsrs	r3, r3, #4
 800015a:	b2db      	uxtb	r3, r3
 800015c:	f003 030f 	and.w	r3, r3, #15
 8000160:	61bb      	str	r3, [r7, #24]
	col = input & 0x0f;
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	f003 030f 	and.w	r3, r3, #15
 8000168:	617b      	str	r3, [r7, #20]

	//key location
	location = keyarr[row][col];
 800016a:	4915      	ldr	r1, [pc, #84]	; (80001c0 <decode_usb+0x74>)
 800016c:	69ba      	ldr	r2, [r7, #24]
 800016e:	4613      	mov	r3, r2
 8000170:	011b      	lsls	r3, r3, #4
 8000172:	1a9b      	subs	r3, r3, r2
 8000174:	18ca      	adds	r2, r1, r3
 8000176:	697b      	ldr	r3, [r7, #20]
 8000178:	4413      	add	r3, r2
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	74fb      	strb	r3, [r7, #19]
	//mapping
	map_r = (location >> 4) & 0x0f;
 800017e:	7cfb      	ldrb	r3, [r7, #19]
 8000180:	091b      	lsrs	r3, r3, #4
 8000182:	b2db      	uxtb	r3, r3
 8000184:	f003 030f 	and.w	r3, r3, #15
 8000188:	60fb      	str	r3, [r7, #12]
	map_c = location & 0x0f;
 800018a:	7cfb      	ldrb	r3, [r7, #19]
 800018c:	f003 030f 	and.w	r3, r3, #15
 8000190:	60bb      	str	r3, [r7, #8]
	if(input == 0xff)
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	2bff      	cmp	r3, #255	; 0xff
 8000196:	d102      	bne.n	800019e <decode_usb+0x52>
	{
		result = 0;
 8000198:	2300      	movs	r3, #0
 800019a:	77fb      	strb	r3, [r7, #31]
 800019c:	e009      	b.n	80001b2 <decode_usb+0x66>
	}
	else{
		result = usb_map[map_r][map_c];
 800019e:	4909      	ldr	r1, [pc, #36]	; (80001c4 <decode_usb+0x78>)
 80001a0:	68fa      	ldr	r2, [r7, #12]
 80001a2:	4613      	mov	r3, r2
 80001a4:	011b      	lsls	r3, r3, #4
 80001a6:	1a9b      	subs	r3, r3, r2
 80001a8:	18ca      	adds	r2, r1, r3
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	4413      	add	r3, r2
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	77fb      	strb	r3, [r7, #31]
	}

	return result;
 80001b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3724      	adds	r7, #36	; 0x24
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	20000000 	.word	0x20000000
 80001c4:	08008f7c 	.word	0x08008f7c

080001c8 <decode_uart>:

char decode_uart(uint16_t input)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	int row, col, map_r, map_c;
	char result;
	uint8_t location;
	row = (input >> 4) & 0x0f;
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	091b      	lsrs	r3, r3, #4
 80001d6:	b29b      	uxth	r3, r3
 80001d8:	f003 030f 	and.w	r3, r3, #15
 80001dc:	61bb      	str	r3, [r7, #24]
	col = input & 0x0f;
 80001de:	88fb      	ldrh	r3, [r7, #6]
 80001e0:	f003 030f 	and.w	r3, r3, #15
 80001e4:	617b      	str	r3, [r7, #20]

	//key location
	location = keyarr[row][col];
 80001e6:	491e      	ldr	r1, [pc, #120]	; (8000260 <decode_uart+0x98>)
 80001e8:	69ba      	ldr	r2, [r7, #24]
 80001ea:	4613      	mov	r3, r2
 80001ec:	011b      	lsls	r3, r3, #4
 80001ee:	1a9b      	subs	r3, r3, r2
 80001f0:	18ca      	adds	r2, r1, r3
 80001f2:	697b      	ldr	r3, [r7, #20]
 80001f4:	4413      	add	r3, r2
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	74fb      	strb	r3, [r7, #19]
	//mapping
	map_r = (location >> 4) & 0x0f;
 80001fa:	7cfb      	ldrb	r3, [r7, #19]
 80001fc:	091b      	lsrs	r3, r3, #4
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	f003 030f 	and.w	r3, r3, #15
 8000204:	60fb      	str	r3, [r7, #12]
	map_c = location & 0x0f;
 8000206:	7cfb      	ldrb	r3, [r7, #19]
 8000208:	f003 030f 	and.w	r3, r3, #15
 800020c:	60bb      	str	r3, [r7, #8]
	if((input & 0xff) == 0xff)
 800020e:	88fb      	ldrh	r3, [r7, #6]
 8000210:	b2db      	uxtb	r3, r3
 8000212:	2bff      	cmp	r3, #255	; 0xff
 8000214:	d102      	bne.n	800021c <decode_uart+0x54>
	{
		result = 0;
 8000216:	2300      	movs	r3, #0
 8000218:	77fb      	strb	r3, [r7, #31]
 800021a:	e01b      	b.n	8000254 <decode_uart+0x8c>
	}
	else
	{
		if((input>>13) & 0x01)
 800021c:	88fb      	ldrh	r3, [r7, #6]
 800021e:	0b5b      	lsrs	r3, r3, #13
 8000220:	b29b      	uxth	r3, r3
 8000222:	f003 0301 	and.w	r3, r3, #1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d00a      	beq.n	8000240 <decode_uart+0x78>
		{
			result = upper_uart[map_r][map_c];
 800022a:	490e      	ldr	r1, [pc, #56]	; (8000264 <decode_uart+0x9c>)
 800022c:	68fa      	ldr	r2, [r7, #12]
 800022e:	4613      	mov	r3, r2
 8000230:	011b      	lsls	r3, r3, #4
 8000232:	1a9b      	subs	r3, r3, r2
 8000234:	18ca      	adds	r2, r1, r3
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	4413      	add	r3, r2
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	77fb      	strb	r3, [r7, #31]
 800023e:	e009      	b.n	8000254 <decode_uart+0x8c>
		}
		else
		{
			result = lower_uart[map_r][map_c];
 8000240:	4909      	ldr	r1, [pc, #36]	; (8000268 <decode_uart+0xa0>)
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	4613      	mov	r3, r2
 8000246:	011b      	lsls	r3, r3, #4
 8000248:	1a9b      	subs	r3, r3, r2
 800024a:	18ca      	adds	r2, r1, r3
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	4413      	add	r3, r2
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	77fb      	strb	r3, [r7, #31]
		}
	}
		return result;
 8000254:	7ffb      	ldrb	r3, [r7, #31]

}
 8000256:	4618      	mov	r0, r3
 8000258:	3724      	adds	r7, #36	; 0x24
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	20000000 	.word	0x20000000
 8000264:	08008f30 	.word	0x08008f30
 8000268:	08008ee4 	.word	0x08008ee4

0800026c <lookup_char>:
{

}

uint16_t lookup_char(char input)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 15; i++)
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	e03d      	b.n	80002f8 <lookup_char+0x8c>
	{
		for(int j = 0; j < 5; j++)
 800027c:	2300      	movs	r3, #0
 800027e:	60bb      	str	r3, [r7, #8]
 8000280:	e034      	b.n	80002ec <lookup_char+0x80>
		{
			if(input == lower_uart[j][i])
 8000282:	4922      	ldr	r1, [pc, #136]	; (800030c <lookup_char+0xa0>)
 8000284:	68ba      	ldr	r2, [r7, #8]
 8000286:	4613      	mov	r3, r2
 8000288:	011b      	lsls	r3, r3, #4
 800028a:	1a9b      	subs	r3, r3, r2
 800028c:	18ca      	adds	r2, r1, r3
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	4413      	add	r3, r2
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	79fa      	ldrb	r2, [r7, #7]
 8000296:	429a      	cmp	r2, r3
 8000298:	d10a      	bne.n	80002b0 <lookup_char+0x44>
				return (0<<8 | usb_map[j][i]);
 800029a:	491d      	ldr	r1, [pc, #116]	; (8000310 <lookup_char+0xa4>)
 800029c:	68ba      	ldr	r2, [r7, #8]
 800029e:	4613      	mov	r3, r2
 80002a0:	011b      	lsls	r3, r3, #4
 80002a2:	1a9b      	subs	r3, r3, r2
 80002a4:	18ca      	adds	r2, r1, r3
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	4413      	add	r3, r2
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	e027      	b.n	8000300 <lookup_char+0x94>
			else if(input == upper_uart[j][i])
 80002b0:	4918      	ldr	r1, [pc, #96]	; (8000314 <lookup_char+0xa8>)
 80002b2:	68ba      	ldr	r2, [r7, #8]
 80002b4:	4613      	mov	r3, r2
 80002b6:	011b      	lsls	r3, r3, #4
 80002b8:	1a9b      	subs	r3, r3, r2
 80002ba:	18ca      	adds	r2, r1, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	4413      	add	r3, r2
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	79fa      	ldrb	r2, [r7, #7]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d10e      	bne.n	80002e6 <lookup_char+0x7a>
				return (1<<8 | usb_map[j][i]);
 80002c8:	4911      	ldr	r1, [pc, #68]	; (8000310 <lookup_char+0xa4>)
 80002ca:	68ba      	ldr	r2, [r7, #8]
 80002cc:	4613      	mov	r3, r2
 80002ce:	011b      	lsls	r3, r3, #4
 80002d0:	1a9b      	subs	r3, r3, r2
 80002d2:	18ca      	adds	r2, r1, r3
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	4413      	add	r3, r2
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	b21b      	sxth	r3, r3
 80002dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e0:	b21b      	sxth	r3, r3
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	e00c      	b.n	8000300 <lookup_char+0x94>
		for(int j = 0; j < 5; j++)
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	3301      	adds	r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	2b04      	cmp	r3, #4
 80002f0:	ddc7      	ble.n	8000282 <lookup_char+0x16>
	for(int i = 0; i < 15; i++)
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	3301      	adds	r3, #1
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	2b0e      	cmp	r3, #14
 80002fc:	ddbe      	ble.n	800027c <lookup_char+0x10>
		}
	}
	return 0;
 80002fe:	2300      	movs	r3, #0
}
 8000300:	4618      	mov	r0, r3
 8000302:	3714      	adds	r7, #20
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	08008ee4 	.word	0x08008ee4
 8000310:	08008f7c 	.word	0x08008f7c
 8000314:	08008f30 	.word	0x08008f30

08000318 <reset_layout>:
void reset_layout()
{
 8000318:	b5b0      	push	{r4, r5, r7, lr}
 800031a:	b08c      	sub	sp, #48	; 0x30
 800031c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 5; i++)
 800031e:	2300      	movs	r3, #0
 8000320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000322:	e01e      	b.n	8000362 <reset_layout+0x4a>
	{
		for(int j = 0; j < 15; j++)
 8000324:	2300      	movs	r3, #0
 8000326:	62bb      	str	r3, [r7, #40]	; 0x28
 8000328:	e015      	b.n	8000356 <reset_layout+0x3e>
		{
			keyarr[i][j] = resetKey[i][j];
 800032a:	491f      	ldr	r1, [pc, #124]	; (80003a8 <reset_layout+0x90>)
 800032c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800032e:	4613      	mov	r3, r2
 8000330:	011b      	lsls	r3, r3, #4
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	18ca      	adds	r2, r1, r3
 8000336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000338:	4413      	add	r3, r2
 800033a:	7818      	ldrb	r0, [r3, #0]
 800033c:	491b      	ldr	r1, [pc, #108]	; (80003ac <reset_layout+0x94>)
 800033e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000340:	4613      	mov	r3, r2
 8000342:	011b      	lsls	r3, r3, #4
 8000344:	1a9b      	subs	r3, r3, r2
 8000346:	18ca      	adds	r2, r1, r3
 8000348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800034a:	4413      	add	r3, r2
 800034c:	4602      	mov	r2, r0
 800034e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 15; j++)
 8000350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000352:	3301      	adds	r3, #1
 8000354:	62bb      	str	r3, [r7, #40]	; 0x28
 8000356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000358:	2b0e      	cmp	r3, #14
 800035a:	dde6      	ble.n	800032a <reset_layout+0x12>
	for(int i = 0; i < 5; i++)
 800035c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800035e:	3301      	adds	r3, #1
 8000360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000364:	2b04      	cmp	r3, #4
 8000366:	dddd      	ble.n	8000324 <reset_layout+0xc>
		}
	}
	char message[] = "\rStart resetting layout......";
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <reset_layout+0x98>)
 800036a:	f107 0408 	add.w	r4, r7, #8
 800036e:	461d      	mov	r5, r3
 8000370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000374:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000378:	c407      	stmia	r4!, {r0, r1, r2}
 800037a:	8023      	strh	r3, [r4, #0]
	print_message(message);
 800037c:	f107 0308 	add.w	r3, r7, #8
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fa8f 	bl	80018a4 <print_message>
	saveLayout();
 8000386:	f000 f86b 	bl	8000460 <saveLayout>
	char message2[] = "\rDone";
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <reset_layout+0x9c>)
 800038c:	463b      	mov	r3, r7
 800038e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	3304      	adds	r3, #4
 8000396:	8019      	strh	r1, [r3, #0]
	print_message(message2);
 8000398:	463b      	mov	r3, r7
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fa82 	bl	80018a4 <print_message>

	return;
 80003a0:	bf00      	nop
}
 80003a2:	3730      	adds	r7, #48	; 0x30
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bdb0      	pop	{r4, r5, r7, pc}
 80003a8:	08008e98 	.word	0x08008e98
 80003ac:	20000000 	.word	0x20000000
 80003b0:	08008cf0 	.word	0x08008cf0
 80003b4:	08008d10 	.word	0x08008d10

080003b8 <swap>:



void swap(uint8_t a, uint8_t b)
{
 80003b8:	b4b0      	push	{r4, r5, r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	460a      	mov	r2, r1
 80003c2:	71fb      	strb	r3, [r7, #7]
 80003c4:	4613      	mov	r3, r2
 80003c6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = keyarr[(a&0xf0)>>4][a&0xf];
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	091b      	lsrs	r3, r3, #4
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	f003 020f 	and.w	r2, r3, #15
 80003d6:	491c      	ldr	r1, [pc, #112]	; (8000448 <swap+0x90>)
 80003d8:	4603      	mov	r3, r0
 80003da:	011b      	lsls	r3, r3, #4
 80003dc:	1a1b      	subs	r3, r3, r0
 80003de:	440b      	add	r3, r1
 80003e0:	4413      	add	r3, r2
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	73fb      	strb	r3, [r7, #15]
	keyarr[(a&0xf0)>>4][a&0xf] = keyarr[(b&0xf0)>>4][b&0xf];
 80003e6:	79bb      	ldrb	r3, [r7, #6]
 80003e8:	091b      	lsrs	r3, r3, #4
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	461d      	mov	r5, r3
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	f003 010f 	and.w	r1, r3, #15
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	091b      	lsrs	r3, r3, #4
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	461c      	mov	r4, r3
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f003 020f 	and.w	r2, r3, #15
 8000402:	4811      	ldr	r0, [pc, #68]	; (8000448 <swap+0x90>)
 8000404:	462b      	mov	r3, r5
 8000406:	011b      	lsls	r3, r3, #4
 8000408:	1b5b      	subs	r3, r3, r5
 800040a:	4403      	add	r3, r0
 800040c:	440b      	add	r3, r1
 800040e:	7818      	ldrb	r0, [r3, #0]
 8000410:	490d      	ldr	r1, [pc, #52]	; (8000448 <swap+0x90>)
 8000412:	4623      	mov	r3, r4
 8000414:	011b      	lsls	r3, r3, #4
 8000416:	1b1b      	subs	r3, r3, r4
 8000418:	440b      	add	r3, r1
 800041a:	4413      	add	r3, r2
 800041c:	4602      	mov	r2, r0
 800041e:	701a      	strb	r2, [r3, #0]
	keyarr[(b&0xf0)>>4][b&0xf] = temp;
 8000420:	79bb      	ldrb	r3, [r7, #6]
 8000422:	091b      	lsrs	r3, r3, #4
 8000424:	b2db      	uxtb	r3, r3
 8000426:	4618      	mov	r0, r3
 8000428:	79bb      	ldrb	r3, [r7, #6]
 800042a:	f003 020f 	and.w	r2, r3, #15
 800042e:	4906      	ldr	r1, [pc, #24]	; (8000448 <swap+0x90>)
 8000430:	4603      	mov	r3, r0
 8000432:	011b      	lsls	r3, r3, #4
 8000434:	1a1b      	subs	r3, r3, r0
 8000436:	440b      	add	r3, r1
 8000438:	4413      	add	r3, r2
 800043a:	7bfa      	ldrb	r2, [r7, #15]
 800043c:	701a      	strb	r2, [r3, #0]
	return;
 800043e:	bf00      	nop
}
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bcb0      	pop	{r4, r5, r7}
 8000446:	4770      	bx	lr
 8000448:	20000000 	.word	0x20000000

0800044c <get_keyMap>:
uint8_t (*get_keyMap())[15]
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
	return keyarr;
 8000450:	4b02      	ldr	r3, [pc, #8]	; (800045c <get_keyMap+0x10>)
}
 8000452:	4618      	mov	r0, r3
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	20000000 	.word	0x20000000

08000460 <saveLayout>:

void saveLayout()
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08c      	sub	sp, #48	; 0x30
 8000464:	af00      	add	r7, sp, #0
	uint8_t (*keyarr)[15] = get_keyMap();
 8000466:	f7ff fff1 	bl	800044c <get_keyMap>
 800046a:	6238      	str	r0, [r7, #32]
	uint8_t arr[32] = {};
 800046c:	2300      	movs	r3, #0
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	619a      	str	r2, [r3, #24]
	int count = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i<5; i++)
 8000486:	2300      	movs	r3, #0
 8000488:	62bb      	str	r3, [r7, #40]	; 0x28
 800048a:	e033      	b.n	80004f4 <saveLayout+0x94>
	{
		for(int j = 0; j<15; j++)
 800048c:	2300      	movs	r3, #0
 800048e:	627b      	str	r3, [r7, #36]	; 0x24
 8000490:	e02a      	b.n	80004e8 <saveLayout+0x88>
		{

			arr[count] = keyarr[i][j];
 8000492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000494:	4613      	mov	r3, r2
 8000496:	011b      	lsls	r3, r3, #4
 8000498:	1a9b      	subs	r3, r3, r2
 800049a:	6a3a      	ldr	r2, [r7, #32]
 800049c:	441a      	add	r2, r3
 800049e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a0:	4413      	add	r3, r2
 80004a2:	7819      	ldrb	r1, [r3, #0]
 80004a4:	463a      	mov	r2, r7
 80004a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004a8:	4413      	add	r3, r2
 80004aa:	460a      	mov	r2, r1
 80004ac:	701a      	strb	r2, [r3, #0]
			if(count == 31)
 80004ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004b0:	2b1f      	cmp	r3, #31
 80004b2:	d113      	bne.n	80004dc <saveLayout+0x7c>
				{

				eeprom_pageWrite(arr, i*15+j - 31, 32);
 80004b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	461a      	mov	r2, r3
 80004ba:	0112      	lsls	r2, r2, #4
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	b29a      	uxth	r2, r3
 80004c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	4413      	add	r3, r2
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	3b1f      	subs	r3, #31
 80004ca:	b299      	uxth	r1, r3
 80004cc:	463b      	mov	r3, r7
 80004ce:	2220      	movs	r2, #32
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 f94f 	bl	8000774 <eeprom_pageWrite>

				count = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80004da:	e002      	b.n	80004e2 <saveLayout+0x82>
			}
			count++;
 80004dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004de:	3301      	adds	r3, #1
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int j = 0; j<15; j++)
 80004e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e4:	3301      	adds	r3, #1
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
 80004e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ea:	2b0e      	cmp	r3, #14
 80004ec:	ddd1      	ble.n	8000492 <saveLayout+0x32>
	for(int i = 0; i<5; i++)
 80004ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f0:	3301      	adds	r3, #1
 80004f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80004f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f6:	2b04      	cmp	r3, #4
 80004f8:	ddc8      	ble.n	800048c <saveLayout+0x2c>
		}
	}
	eeprom_pageWrite(arr, KEY_LAYOUT_LAST, 11);
 80004fa:	463b      	mov	r3, r7
 80004fc:	220b      	movs	r2, #11
 80004fe:	2140      	movs	r1, #64	; 0x40
 8000500:	4618      	mov	r0, r3
 8000502:	f000 f937 	bl	8000774 <eeprom_pageWrite>


	return;
 8000506:	bf00      	nop
}
 8000508:	3730      	adds	r7, #48	; 0x30
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <eeprom_start>:
#include "eeprom.h"

void eeprom_start()
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	GPIOA->BSRR = 1 << (EEPROM_DATA);
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <eeprom_start+0x4c>)
 8000516:	2220      	movs	r2, #32
 8000518:	611a      	str	r2, [r3, #16]
	HAL_Delay(EEPROM_DELAY);
 800051a:	2000      	movs	r0, #0
 800051c:	f001 fd6a 	bl	8001ff4 <HAL_Delay>
	GPIOA->BSRR = 1 << (EEPROM_CLK);
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <eeprom_start+0x4c>)
 8000522:	2240      	movs	r2, #64	; 0x40
 8000524:	611a      	str	r2, [r3, #16]

	while (!( (GPIOA->IDR >> EEPROM_CLK) & 1));
 8000526:	bf00      	nop
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <eeprom_start+0x4c>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	099b      	lsrs	r3, r3, #6
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f8      	beq.n	8000528 <eeprom_start+0x18>
	HAL_Delay(EEPROM_DELAY);
 8000536:	2000      	movs	r0, #0
 8000538:	f001 fd5c 	bl	8001ff4 <HAL_Delay>
	GPIOA->BSRR = 1 << (EEPROM_DATA + 16);
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <eeprom_start+0x4c>)
 800053e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000542:	611a      	str	r2, [r3, #16]
	HAL_Delay(EEPROM_DELAY);
 8000544:	2000      	movs	r0, #0
 8000546:	f001 fd55 	bl	8001ff4 <HAL_Delay>
	GPIOA->BSRR = 1 << (EEPROM_CLK + 16);
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <eeprom_start+0x4c>)
 800054c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000550:	611a      	str	r2, [r3, #16]
	HAL_Delay(EEPROM_DELAY);
 8000552:	2000      	movs	r0, #0
 8000554:	f001 fd4e 	bl	8001ff4 <HAL_Delay>
	return;
 8000558:	bf00      	nop
}
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40010800 	.word	0x40010800

08000560 <eeprom_stop>:

void eeprom_stop()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	GPIOA->BSRR = 1 << (EEPROM_DATA + 16);
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <eeprom_stop+0x38>)
 8000566:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800056a:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = 1 << EEPROM_CLK;
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <eeprom_stop+0x38>)
 800056e:	2240      	movs	r2, #64	; 0x40
 8000570:	611a      	str	r2, [r3, #16]
	while (!( (GPIOA->IDR >> EEPROM_CLK) & 1));
 8000572:	bf00      	nop
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <eeprom_stop+0x38>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	099b      	lsrs	r3, r3, #6
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f8      	beq.n	8000574 <eeprom_stop+0x14>
	HAL_Delay(EEPROM_DELAY);
 8000582:	2000      	movs	r0, #0
 8000584:	f001 fd36 	bl	8001ff4 <HAL_Delay>
	GPIOA->BSRR = 1 << EEPROM_DATA;
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <eeprom_stop+0x38>)
 800058a:	2220      	movs	r2, #32
 800058c:	611a      	str	r2, [r3, #16]
	HAL_Delay(EEPROM_DELAY);
 800058e:	2000      	movs	r0, #0
 8000590:	f001 fd30 	bl	8001ff4 <HAL_Delay>
	return;
 8000594:	bf00      	nop
}
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40010800 	.word	0x40010800

0800059c <eeprom_sendbit>:

void eeprom_sendbit(char bit)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	if (bit == 1) GPIOA->BSRR = 1 << EEPROM_DATA;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d103      	bne.n	80005b4 <eeprom_sendbit+0x18>
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <eeprom_sendbit+0x58>)
 80005ae:	2220      	movs	r2, #32
 80005b0:	611a      	str	r2, [r3, #16]
 80005b2:	e003      	b.n	80005bc <eeprom_sendbit+0x20>
	else GPIOA->BSRR = 1 << (EEPROM_DATA + 16);
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <eeprom_sendbit+0x58>)
 80005b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005ba:	611a      	str	r2, [r3, #16]
	HAL_Delay(EEPROM_DELAY);
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 fd19 	bl	8001ff4 <HAL_Delay>

	GPIOA->BSRR = 1 << EEPROM_CLK;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <eeprom_sendbit+0x58>)
 80005c4:	2240      	movs	r2, #64	; 0x40
 80005c6:	611a      	str	r2, [r3, #16]
	while (!( (GPIOA->IDR >> EEPROM_CLK) & 1));
 80005c8:	bf00      	nop
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <eeprom_sendbit+0x58>)
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	099b      	lsrs	r3, r3, #6
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f8      	beq.n	80005ca <eeprom_sendbit+0x2e>
	HAL_Delay(EEPROM_DELAY);
 80005d8:	2000      	movs	r0, #0
 80005da:	f001 fd0b 	bl	8001ff4 <HAL_Delay>

	GPIOA->BSRR = 1 << (EEPROM_CLK + 16);
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <eeprom_sendbit+0x58>)
 80005e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005e4:	611a      	str	r2, [r3, #16]
	HAL_Delay(EEPROM_DELAY);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f001 fd04 	bl	8001ff4 <HAL_Delay>
	return;
 80005ec:	bf00      	nop
}
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40010800 	.word	0x40010800

080005f8 <eeprom_waitACK>:

uint8_t eeprom_waitACK()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0

	GPIOA->BSRR = 1 << EEPROM_CLK;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <eeprom_waitACK+0x48>)
 8000600:	2240      	movs	r2, #64	; 0x40
 8000602:	611a      	str	r2, [r3, #16]
	while (!( (GPIOA->IDR >> EEPROM_CLK) & 1));
 8000604:	bf00      	nop
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <eeprom_waitACK+0x48>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	099b      	lsrs	r3, r3, #6
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0f8      	beq.n	8000606 <eeprom_waitACK+0xe>
	uint8_t result = (GPIOA->IDR >> EEPROM_DATA) & 1;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <eeprom_waitACK+0x48>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	095b      	lsrs	r3, r3, #5
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(EEPROM_DELAY);
 8000622:	2000      	movs	r0, #0
 8000624:	f001 fce6 	bl	8001ff4 <HAL_Delay>

	GPIOA->BSRR = 1 << (EEPROM_CLK + 16);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <eeprom_waitACK+0x48>)
 800062a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800062e:	611a      	str	r2, [r3, #16]
	HAL_Delay(EEPROM_DELAY);
 8000630:	2000      	movs	r0, #0
 8000632:	f001 fcdf 	bl	8001ff4 <HAL_Delay>

	return result;
 8000636:	79fb      	ldrb	r3, [r7, #7]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40010800 	.word	0x40010800

08000644 <send_ACK>:

void send_ACK()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	GPIOA->BSRR = 1 << (EEPROM_DATA + 16);
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <send_ACK+0x48>)
 800064a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800064e:	611a      	str	r2, [r3, #16]
	HAL_Delay(EEPROM_DELAY);
 8000650:	2000      	movs	r0, #0
 8000652:	f001 fccf 	bl	8001ff4 <HAL_Delay>

	GPIOA->BSRR = 1 << EEPROM_CLK;
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <send_ACK+0x48>)
 8000658:	2240      	movs	r2, #64	; 0x40
 800065a:	611a      	str	r2, [r3, #16]
	while (!( (GPIOA->IDR >> EEPROM_CLK) & 1));
 800065c:	bf00      	nop
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <send_ACK+0x48>)
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	099b      	lsrs	r3, r3, #6
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0f8      	beq.n	800065e <send_ACK+0x1a>
	HAL_Delay(EEPROM_DELAY);
 800066c:	2000      	movs	r0, #0
 800066e:	f001 fcc1 	bl	8001ff4 <HAL_Delay>

	GPIOA->BSRR = 1 << (EEPROM_CLK + 16);
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <send_ACK+0x48>)
 8000674:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000678:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = 1 << (EEPROM_DATA);
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <send_ACK+0x48>)
 800067c:	2220      	movs	r2, #32
 800067e:	611a      	str	r2, [r3, #16]
	HAL_Delay(EEPROM_DELAY);
 8000680:	2000      	movs	r0, #0
 8000682:	f001 fcb7 	bl	8001ff4 <HAL_Delay>
	return;
 8000686:	bf00      	nop
}
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40010800 	.word	0x40010800

08000690 <eeprom_sendbyte>:
	HAL_Delay(EEPROM_DELAY);
	return;
}

void eeprom_sendbyte(uint8_t byte)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]

	for (int i = 7; i >=0; i--)
 800069a:	2307      	movs	r3, #7
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e00d      	b.n	80006bc <eeprom_sendbyte+0x2c>
	{
		eeprom_sendbit((byte >> i) & 1);
 80006a0:	79fa      	ldrb	r2, [r7, #7]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	fa42 f303 	asr.w	r3, r2, r3
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff73 	bl	800059c <eeprom_sendbit>
	for (int i = 7; i >=0; i--)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	daee      	bge.n	80006a0 <eeprom_sendbyte+0x10>
	}


	eeprom_waitACK();
 80006c2:	f7ff ff99 	bl	80005f8 <eeprom_waitACK>

	return;
 80006c6:	bf00      	nop
}
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <eeprom_sendcontrol>:

void eeprom_sendcontrol(uint8_t rw)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4603      	mov	r3, r0
 80006d6:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (0xa0 | rw);
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80006de:	72fb      	strb	r3, [r7, #11]
	for (int i = 7; i >=0; i--)
 80006e0:	2307      	movs	r3, #7
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	e00d      	b.n	8000702 <eeprom_sendcontrol+0x34>
	{
		eeprom_sendbit((byte >> i) & 1);
 80006e6:	7afa      	ldrb	r2, [r7, #11]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	fa42 f303 	asr.w	r3, r2, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff50 	bl	800059c <eeprom_sendbit>
	for (int i = 7; i >=0; i--)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3b01      	subs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2b00      	cmp	r3, #0
 8000706:	daee      	bge.n	80006e6 <eeprom_sendcontrol+0x18>
	}


	eeprom_waitACK();
 8000708:	f7ff ff76 	bl	80005f8 <eeprom_waitACK>

	return;
 800070c:	bf00      	nop
}
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <eeprom_sendAddress>:

void eeprom_sendAddress(uint16_t address)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	80fb      	strh	r3, [r7, #6]
	eeprom_sendbyte((address >> 8) & 0xff);
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	b29b      	uxth	r3, r3
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffb2 	bl	8000690 <eeprom_sendbyte>
	eeprom_sendbyte(address & 0xff);
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ffad 	bl	8000690 <eeprom_sendbyte>

	return;
 8000736:	bf00      	nop
}
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <eeprom_byteWrite>:


void eeprom_byteWrite(uint8_t data, uint16_t address)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	460a      	mov	r2, r1
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	4613      	mov	r3, r2
 800074c:	80bb      	strh	r3, [r7, #4]
	eeprom_start();
 800074e:	f7ff fedf 	bl	8000510 <eeprom_start>

	eeprom_sendcontrol(0);
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff ffbb 	bl	80006ce <eeprom_sendcontrol>
	eeprom_sendAddress(address);
 8000758:	88bb      	ldrh	r3, [r7, #4]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffda 	bl	8000714 <eeprom_sendAddress>
	eeprom_sendbyte(data);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff94 	bl	8000690 <eeprom_sendbyte>

	eeprom_stop();
 8000768:	f7ff fefa 	bl	8000560 <eeprom_stop>
	return;
 800076c:	bf00      	nop

}
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <eeprom_pageWrite>:

// change to page write
void eeprom_pageWrite(uint8_t * data, uint16_t address, int count)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	460b      	mov	r3, r1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	817b      	strh	r3, [r7, #10]
	eeprom_start();
 8000782:	f7ff fec5 	bl	8000510 <eeprom_start>
	eeprom_sendcontrol(0);
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff ffa1 	bl	80006ce <eeprom_sendcontrol>
	eeprom_sendAddress(address);
 800078c:	897b      	ldrh	r3, [r7, #10]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ffc0 	bl	8000714 <eeprom_sendAddress>
	for (int i = 0; i < count; i++)
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	e009      	b.n	80007ae <eeprom_pageWrite+0x3a>
	{
		eeprom_sendbyte(*(data + i));
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff74 	bl	8000690 <eeprom_sendbyte>
	for (int i = 0; i < count; i++)
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	3301      	adds	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	dbf1      	blt.n	800079a <eeprom_pageWrite+0x26>
	}
	eeprom_stop();
 80007b6:	f7ff fed3 	bl	8000560 <eeprom_stop>
	return;
 80007ba:	bf00      	nop
}
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <readbit>:

uint8_t readbit()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	uint8_t result;
	GPIOA->BSRR = 1 << EEPROM_CLK;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <readbit+0x48>)
 80007cc:	2240      	movs	r2, #64	; 0x40
 80007ce:	611a      	str	r2, [r3, #16]
	while (!( (GPIOA->IDR >> EEPROM_CLK) & 1));
 80007d0:	bf00      	nop
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <readbit+0x48>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	099b      	lsrs	r3, r3, #6
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0f8      	beq.n	80007d2 <readbit+0xe>
	result = (GPIOA->IDR >> EEPROM_DATA) & 1;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <readbit+0x48>)
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	095b      	lsrs	r3, r3, #5
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(EEPROM_DELAY);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f001 fc00 	bl	8001ff4 <HAL_Delay>

	GPIOA->BSRR = 1 << (EEPROM_CLK + 16);
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <readbit+0x48>)
 80007f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007fa:	611a      	str	r2, [r3, #16]
	HAL_Delay(EEPROM_DELAY);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f001 fbf9 	bl	8001ff4 <HAL_Delay>

	return result;
 8000802:	79fb      	ldrb	r3, [r7, #7]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40010800 	.word	0x40010800

08000810 <readbyte>:

uint8_t readbyte()
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
	uint8_t result;
	for(int i = 0; i < 8; i++)
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	e00c      	b.n	8000836 <readbyte+0x26>
	{
		result = (result << 1) | readbit();
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	b25c      	sxtb	r4, r3
 8000822:	f7ff ffcf 	bl	80007c4 <readbit>
 8000826:	4603      	mov	r3, r0
 8000828:	b25b      	sxtb	r3, r3
 800082a:	4323      	orrs	r3, r4
 800082c:	b25b      	sxtb	r3, r3
 800082e:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 8; i++)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2b07      	cmp	r3, #7
 800083a:	ddef      	ble.n	800081c <readbyte+0xc>
	}

	return result;
 800083c:	79fb      	ldrb	r3, [r7, #7]
}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bd90      	pop	{r4, r7, pc}

08000846 <eeprom_sequentialRead>:
	return result;
}


void eeprom_sequentialRead(uint8_t* data, uint16_t address, int count)
{
 8000846:	b590      	push	{r4, r7, lr}
 8000848:	b087      	sub	sp, #28
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	460b      	mov	r3, r1
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	817b      	strh	r3, [r7, #10]

	eeprom_start();
 8000854:	f7ff fe5c 	bl	8000510 <eeprom_start>
	eeprom_sendcontrol(0);
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff ff38 	bl	80006ce <eeprom_sendcontrol>
	eeprom_sendAddress(address);
 800085e:	897b      	ldrh	r3, [r7, #10]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff57 	bl	8000714 <eeprom_sendAddress>

	eeprom_start();
 8000866:	f7ff fe53 	bl	8000510 <eeprom_start>
	eeprom_sendcontrol(1);
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff ff2f 	bl	80006ce <eeprom_sendcontrol>

	for(int i = 0; i < count; i++)
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	e010      	b.n	8000898 <eeprom_sequentialRead+0x52>
	{
		data[i] = readbyte();
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	18d4      	adds	r4, r2, r3
 800087c:	f7ff ffc8 	bl	8000810 <readbyte>
 8000880:	4603      	mov	r3, r0
 8000882:	7023      	strb	r3, [r4, #0]
		if (i < count - 1) send_ACK();
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	429a      	cmp	r2, r3
 800088c:	da01      	bge.n	8000892 <eeprom_sequentialRead+0x4c>
 800088e:	f7ff fed9 	bl	8000644 <send_ACK>
	for(int i = 0; i < count; i++)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3301      	adds	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	dbea      	blt.n	8000876 <eeprom_sequentialRead+0x30>
	}

	eeprom_stop();
 80008a0:	f7ff fe5e 	bl	8000560 <eeprom_stop>
}
 80008a4:	bf00      	nop
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd90      	pop	{r4, r7, pc}

080008ac <SystemClock_Config>:
 *      Author: cai282
 */
#include "init.h"

void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	; 0x50
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b6:	2228      	movs	r2, #40	; 0x28
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f008 fa04 	bl	8008cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008dc:	2301      	movs	r3, #1
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ea:	2301      	movs	r3, #1
 80008ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000902:	4618      	mov	r0, r3
 8000904:	f003 f954 	bl	8003bb0 <HAL_RCC_OscConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800090e:	f000 f925 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000912:	230f      	movs	r3, #15
 8000914:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000916:	2302      	movs	r3, #2
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000922:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2101      	movs	r1, #1
 800092e:	4618      	mov	r0, r3
 8000930:	f003 fbc0 	bl	80040b4 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800093a:	f000 f90f 	bl	8000b5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800093e:	2310      	movs	r3, #16
 8000940:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000946:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	4618      	mov	r0, r3
 800094c:	f003 fd18 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000956:	f000 f901 	bl	8000b5c <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3750      	adds	r7, #80	; 0x50
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <init_tim2>:




void init_tim2(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <init_tim2+0x50>)
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <init_tim2+0x50>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	61d3      	str	r3, [r2, #28]
    TIM2->PSC = 80-1;
 8000974:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000978:	224f      	movs	r2, #79	; 0x4f
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 100-1;
 800097c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000980:	2263      	movs	r2, #99	; 0x63
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 8000984:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 8000994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	6013      	str	r3, [r2, #0]
    NVIC->ISER[0] = 1<<TIM2_IRQn;
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <init_tim2+0x54>)
 80009a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	40021000 	.word	0x40021000
 80009b8:	e000e100 	.word	0xe000e100

080009bc <init_usart1>:

void init_usart1() {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80009c0:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <init_usart1+0xb4>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a2a      	ldr	r2, [pc, #168]	; (8000a70 <init_usart1+0xb4>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= ~0x00f0;
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <init_usart1+0xb8>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <init_usart1+0xb8>)
 80009d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009d6:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= 0x00a0;
 80009d8:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <init_usart1+0xb8>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	4a25      	ldr	r2, [pc, #148]	; (8000a74 <init_usart1+0xb8>)
 80009de:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80009e2:	6053      	str	r3, [r2, #4]
    // GPIOA->AFR[1] |= 0x440;

    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <init_usart1+0xb4>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <init_usart1+0xb4>)
 80009ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ee:	6193      	str	r3, [r2, #24]
    USART1->CR1 &= ~USART_CR1_UE;
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <init_usart1+0xbc>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	4a20      	ldr	r2, [pc, #128]	; (8000a78 <init_usart1+0xbc>)
 80009f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009fa:	60d3      	str	r3, [r2, #12]
    USART1->CR1 &= ~(1<<28);
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <init_usart1+0xbc>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <init_usart1+0xbc>)
 8000a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a06:	60d3      	str	r3, [r2, #12]
    USART1->CR1 &= ~(1<<12);
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <init_usart1+0xbc>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	4a1a      	ldr	r2, [pc, #104]	; (8000a78 <init_usart1+0xbc>)
 8000a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a12:	60d3      	str	r3, [r2, #12]
    USART1->CR2 &= ~(3<<12);
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <init_usart1+0xbc>)
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <init_usart1+0xbc>)
 8000a1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a1e:	6113      	str	r3, [r2, #16]
    USART1->CR1 &= ~(1<<10);
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <init_usart1+0xbc>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <init_usart1+0xbc>)
 8000a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a2a:	60d3      	str	r3, [r2, #12]
    USART1->CR1 &= ~(1<<16);
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <init_usart1+0xbc>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <init_usart1+0xbc>)
 8000a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a36:	60d3      	str	r3, [r2, #12]
    // USART1->BRR = 0xd05; // 32MHz
    //USART1->BRR = 0xda; // 2.08MHz
    USART1->BRR = 833; // 8MHz
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <init_usart1+0xbc>)
 8000a3a:	f240 3241 	movw	r2, #833	; 0x341
 8000a3e:	609a      	str	r2, [r3, #8]
    USART1->CR1 |= 3<<2;
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <init_usart1+0xbc>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <init_usart1+0xbc>)
 8000a46:	f043 030c 	orr.w	r3, r3, #12
 8000a4a:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <init_usart1+0xbc>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <init_usart1+0xbc>)
 8000a52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a56:	60d3      	str	r3, [r2, #12]
    while(!(USART1->CR1  & USART_CR1_TE)){ }
 8000a58:	bf00      	nop
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <init_usart1+0xbc>)
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0f9      	beq.n	8000a5a <init_usart1+0x9e>
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010800 	.word	0x40010800
 8000a78:	40013800 	.word	0x40013800

08000a7c <init_eeprom>:



void init_eeprom(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <init_eeprom+0x30>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a09      	ldr	r2, [pc, #36]	; (8000aac <init_eeprom+0x30>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6193      	str	r3, [r2, #24]
	// PA5 I2C CLK
	// PA6 I2C DATA
	GPIOA->CRL &= ~(0xff00000);
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <init_eeprom+0x34>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <init_eeprom+0x34>)
 8000a92:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8000a96:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x6600000;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <init_eeprom+0x34>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <init_eeprom+0x34>)
 8000a9e:	f043 63cc 	orr.w	r3, r3, #106954752	; 0x6600000
 8000aa2:	6013      	str	r3, [r2, #0]

	return;
 8000aa4:	bf00      	nop
}
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010800 	.word	0x40010800

08000ab4 <enable_ports>:



void enable_ports(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0


    // feb 23
	// pb0-1, 3-15 column (input)
	// pa0-4, row (drive row -> output)
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <enable_ports+0x94>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <enable_ports+0x94>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~(0xFFFFF);
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <enable_ports+0x98>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <enable_ports+0x98>)
 8000aca:	0d1b      	lsrs	r3, r3, #20
 8000acc:	051b      	lsls	r3, r3, #20
 8000ace:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x66666;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <enable_ports+0x98>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	491d      	ldr	r1, [pc, #116]	; (8000b4c <enable_ports+0x98>)
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <enable_ports+0x9c>)
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	600b      	str	r3, [r1, #0]
	//GPIOA->BSRR = 0x1F;

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <enable_ports+0x94>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <enable_ports+0x94>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	6193      	str	r3, [r2, #24]
    GPIOB->CRL &= ~(0xFFFFF0FF);
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <enable_ports+0xa0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <enable_ports+0xa0>)
 8000aee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000af2:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= 0x88888088;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <enable_ports+0xa0>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4916      	ldr	r1, [pc, #88]	; (8000b54 <enable_ports+0xa0>)
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <enable_ports+0xa4>)
 8000afc:	4313      	orrs	r3, r2
 8000afe:	600b      	str	r3, [r1, #0]
    GPIOB->CRH &= ~(0xFFFFFFFF);
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <enable_ports+0xa0>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <enable_ports+0xa0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	605a      	str	r2, [r3, #4]
    GPIOB->CRH |= 0x88888888;
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <enable_ports+0xa0>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <enable_ports+0xa0>)
 8000b10:	f043 3388 	orr.w	r3, r3, #2290649224	; 0x88888888
 8000b14:	6053      	str	r3, [r2, #4]
    GPIOB->BSRR = 0xFFFB;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <enable_ports+0xa0>)
 8000b18:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000b1c:	611a      	str	r2, [r3, #16]

    GPIOA->CRH &= ~(0x00000f00);
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <enable_ports+0x98>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <enable_ports+0x98>)
 8000b24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b28:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= 0x00000800;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <enable_ports+0x98>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <enable_ports+0x98>)
 8000b30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b34:	6053      	str	r3, [r2, #4]
    GPIOA->BSRR = 0x04000000;
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <enable_ports+0x98>)
 8000b38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b3c:	611a      	str	r2, [r3, #16]
    //mode selection



    /////////////////////////
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	00066666 	.word	0x00066666
 8000b54:	40010c00 	.word	0x40010c00
 8000b58:	88888088 	.word	0x88888088

08000b5c <Error_Handler>:
}



void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <update_history>:
}



void update_history(int c, int rows)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]

	// maybe c should be rows
    for(int i = 0; i < 15; i++) {
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	e1d7      	b.n	8000f28 <update_history+0x3c0>
    	//if (i == 2) continue;
        hist[rows][i] = (hist[rows][i]<<1) + ((c>>i)&1);
 8000b78:	497f      	ldr	r1, [pc, #508]	; (8000d78 <update_history+0x210>)
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	1a9b      	subs	r3, r3, r2
 8000b82:	18ca      	adds	r2, r1, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	fa41 f303 	asr.w	r3, r1, r3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b2d8      	uxtb	r0, r3
 8000ba2:	4975      	ldr	r1, [pc, #468]	; (8000d78 <update_history+0x210>)
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	18ca      	adds	r2, r1, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	701a      	strb	r2, [r3, #0]


        if (hist[rows][i] == 0x01)
 8000bb6:	4970      	ldr	r1, [pc, #448]	; (8000d78 <update_history+0x210>)
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	1a9b      	subs	r3, r3, r2
 8000bc0:	18ca      	adds	r2, r1, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	f040 80db 	bne.w	8000d84 <update_history+0x21c>
        {
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 225)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	b25a      	sxtb	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	4313      	orrs	r3, r2
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fab1 	bl	800014c <decode_usb>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2be1      	cmp	r3, #225	; 0xe1
 8000bee:	d106      	bne.n	8000bfe <update_history+0x96>
        	{
        		func |= 1 << 5; //left shift
 8000bf0:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <update_history+0x214>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	f043 0320 	orr.w	r3, r3, #32
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4b60      	ldr	r3, [pc, #384]	; (8000d7c <update_history+0x214>)
 8000bfc:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 224)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	b25a      	sxtb	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	f003 030f 	and.w	r3, r3, #15
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fa99 	bl	800014c <decode_usb>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2be0      	cmp	r3, #224	; 0xe0
 8000c1e:	d106      	bne.n	8000c2e <update_history+0xc6>
        	{
        		func |= 1 << 4;//left ctrl
 8000c20:	4b56      	ldr	r3, [pc, #344]	; (8000d7c <update_history+0x214>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <update_history+0x214>)
 8000c2c:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 227)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	b25a      	sxtb	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	f003 030f 	and.w	r3, r3, #15
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fa81 	bl	800014c <decode_usb>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2be3      	cmp	r3, #227	; 0xe3
 8000c4e:	d106      	bne.n	8000c5e <update_history+0xf6>
        	{
        		func |= 1 << 7; //left GUI
 8000c50:	4b4a      	ldr	r3, [pc, #296]	; (8000d7c <update_history+0x214>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b48      	ldr	r3, [pc, #288]	; (8000d7c <update_history+0x214>)
 8000c5c:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 226)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	b25a      	sxtb	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	f003 030f 	and.w	r3, r3, #15
 8000c6c:	b25b      	sxtb	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fa69 	bl	800014c <decode_usb>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2be2      	cmp	r3, #226	; 0xe2
 8000c7e:	d106      	bne.n	8000c8e <update_history+0x126>
        	{
        		func |= 1 << 6; //left alt
 8000c80:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <update_history+0x214>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b3c      	ldr	r3, [pc, #240]	; (8000d7c <update_history+0x214>)
 8000c8c:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 230)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	b25a      	sxtb	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	f003 030f 	and.w	r3, r3, #15
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fa51 	bl	800014c <decode_usb>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2be6      	cmp	r3, #230	; 0xe6
 8000cae:	d106      	bne.n	8000cbe <update_history+0x156>
        	{
        		func |= 1 << 2; //right alt
 8000cb0:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <update_history+0x214>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <update_history+0x214>)
 8000cbc:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 228)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	011b      	lsls	r3, r3, #4
 8000cc2:	b25a      	sxtb	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	f003 030f 	and.w	r3, r3, #15
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fa39 	bl	800014c <decode_usb>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2be4      	cmp	r3, #228	; 0xe4
 8000cde:	d106      	bne.n	8000cee <update_history+0x186>
        	{
        		func |= 1 << 0; //right ctrl
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <update_history+0x214>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <update_history+0x214>)
 8000cec:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 229)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	b25a      	sxtb	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	f003 030f 	and.w	r3, r3, #15
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fa21 	bl	800014c <decode_usb>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2be5      	cmp	r3, #229	; 0xe5
 8000d0e:	d106      	bne.n	8000d1e <update_history+0x1b6>
        	{
        		func |= 1 << 1; //right shift
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <update_history+0x214>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <update_history+0x214>)
 8000d1c:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 0xff)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	b25a      	sxtb	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	f003 030f 	and.w	r3, r3, #15
 8000d2c:	b25b      	sxtb	r3, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fa09 	bl	800014c <decode_usb>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2bff      	cmp	r3, #255	; 0xff
 8000d3e:	d106      	bne.n	8000d4e <update_history+0x1e6>
        	{
        	    func |= 1 << 8; //f1
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <update_history+0x214>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <update_history+0x214>)
 8000d4c:	801a      	strh	r2, [r3, #0]
        	}


//        	push_queue(0x80 | (((rows << 4) & 0x70) | (0xf & i )));
        	press = (0x80 | (((rows << 4) & 0x70) | (0xf & i )));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000d58:	b25a      	sxtb	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <update_history+0x218>)
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	e0d5      	b.n	8000f22 <update_history+0x3ba>
 8000d76:	bf00      	nop
 8000d78:	20000674 	.word	0x20000674
 8000d7c:	200006c0 	.word	0x200006c0
 8000d80:	200006bf 	.word	0x200006bf
        }
        else if (hist[rows][i] == 0xfe)
 8000d84:	496d      	ldr	r1, [pc, #436]	; (8000f3c <update_history+0x3d4>)
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	1a9b      	subs	r3, r3, r2
 8000d8e:	18ca      	adds	r2, r1, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2bfe      	cmp	r3, #254	; 0xfe
 8000d98:	f040 80c3 	bne.w	8000f22 <update_history+0x3ba>
        {
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 225)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	b25a      	sxtb	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff f9ca 	bl	800014c <decode_usb>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2be1      	cmp	r3, #225	; 0xe1
 8000dbc:	d106      	bne.n	8000dcc <update_history+0x264>
        	{
        		func &= ~(1 << 5);
 8000dbe:	4b60      	ldr	r3, [pc, #384]	; (8000f40 <update_history+0x3d8>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	f023 0320 	bic.w	r3, r3, #32
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b5d      	ldr	r3, [pc, #372]	; (8000f40 <update_history+0x3d8>)
 8000dca:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 224)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	b25a      	sxtb	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff f9b2 	bl	800014c <decode_usb>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2be0      	cmp	r3, #224	; 0xe0
 8000dec:	d106      	bne.n	8000dfc <update_history+0x294>
        	{
        		func &= ~(1 << 4);//left ctrl
 8000dee:	4b54      	ldr	r3, [pc, #336]	; (8000f40 <update_history+0x3d8>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	f023 0310 	bic.w	r3, r3, #16
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b51      	ldr	r3, [pc, #324]	; (8000f40 <update_history+0x3d8>)
 8000dfa:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 227)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff f99a 	bl	800014c <decode_usb>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2be3      	cmp	r3, #227	; 0xe3
 8000e1c:	d106      	bne.n	8000e2c <update_history+0x2c4>
        	{
        		func &= ~(1 << 7); //left GUI
 8000e1e:	4b48      	ldr	r3, [pc, #288]	; (8000f40 <update_history+0x3d8>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	4b45      	ldr	r3, [pc, #276]	; (8000f40 <update_history+0x3d8>)
 8000e2a:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 226)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	b25a      	sxtb	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff f982 	bl	800014c <decode_usb>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2be2      	cmp	r3, #226	; 0xe2
 8000e4c:	d106      	bne.n	8000e5c <update_history+0x2f4>
        	{
        		func &= ~(1 << 6); //left alt
 8000e4e:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <update_history+0x3d8>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <update_history+0x3d8>)
 8000e5a:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 230)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	b25a      	sxtb	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	b25b      	sxtb	r3, r3
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff f96a 	bl	800014c <decode_usb>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2be6      	cmp	r3, #230	; 0xe6
 8000e7c:	d106      	bne.n	8000e8c <update_history+0x324>
        	{
				func &= ~(1 << 2); //right alt
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <update_history+0x3d8>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	f023 0304 	bic.w	r3, r3, #4
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <update_history+0x3d8>)
 8000e8a:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 228)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	b25a      	sxtb	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff f952 	bl	800014c <decode_usb>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2be4      	cmp	r3, #228	; 0xe4
 8000eac:	d106      	bne.n	8000ebc <update_history+0x354>
        	{
        		func &= ~(1 << 0); //right ctrl
 8000eae:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <update_history+0x3d8>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <update_history+0x3d8>)
 8000eba:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 229)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	b25a      	sxtb	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff f93a 	bl	800014c <decode_usb>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2be5      	cmp	r3, #229	; 0xe5
 8000edc:	d106      	bne.n	8000eec <update_history+0x384>
        	{
        		func &= ~(1 << 1); //right shift
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <update_history+0x3d8>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	f023 0302 	bic.w	r3, r3, #2
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <update_history+0x3d8>)
 8000eea:	801a      	strh	r2, [r3, #0]
        	}
        	if(decode_usb((0xf0 & (rows << 4)) | (0xf & i)) == 0xff)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	b25a      	sxtb	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff f922 	bl	800014c <decode_usb>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2bff      	cmp	r3, #255	; 0xff
 8000f0c:	d106      	bne.n	8000f1c <update_history+0x3b4>
        	{
        	    func &= ~(1 << 8); //f1
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <update_history+0x3d8>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <update_history+0x3d8>)
 8000f1a:	801a      	strh	r2, [r3, #0]
        	}


//        	push_queue((((rows << 4) & 0x70) | (0xf & i)));
//        	press = ((((rows << 4) & 0x70) | (0xf & i)));
        	press = 0;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <update_history+0x3dc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 15; i++) {
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3301      	adds	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b0e      	cmp	r3, #14
 8000f2c:	f77f ae24 	ble.w	8000b78 <update_history+0x10>


        }
    }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000674 	.word	0x20000674
 8000f40:	200006c0 	.word	0x200006c0
 8000f44:	200006bf 	.word	0x200006bf

08000f48 <drive_row>:

void drive_row(int c)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    GPIOA->BSRR = (0x1F & ~(1 << c)) | (1 << (c + 16));
 8000f50:	2201      	movs	r2, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	f003 021f 	and.w	r2, r3, #31
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3310      	adds	r3, #16
 8000f62:	2101      	movs	r1, #1
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <drive_row+0x30>)
 8000f6c:	611a      	str	r2, [r3, #16]

    //GPIOA->BSRR = 0x00ffff;
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	40010800 	.word	0x40010800

08000f7c <read_col>:

int read_col()
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
//    return ((~GPIOB->IDR)>>3) & 0xff;
	int re = ~GPIOB->IDR;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <read_col+0x2c>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	607b      	str	r3, [r7, #4]

	return (re & 0x3) | ((re & 0xfff8) >> 1);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f003 0203 	and.w	r2, r3, #3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	1059      	asrs	r1, r3, #1
 8000f94:	f647 73fc 	movw	r3, #32764	; 0x7ffc
 8000f98:	400b      	ands	r3, r1
 8000f9a:	4313      	orrs	r3, r2
	//return (~GPIOB->IDR);
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40010c00 	.word	0x40010c00

08000fac <get_key_event>:

uint8_t get_key_event(void) {
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
    for(;;) {
        asm volatile ("wfi" : :);   // wait for an interrupt
 8000fb0:	bf30      	wfi
//        if (queue[qout] != 0)
        if (press != 0)
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <get_key_event+0x20>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d100      	bne.n	8000fbc <get_key_event+0x10>
        asm volatile ("wfi" : :);   // wait for an interrupt
 8000fba:	e7f9      	b.n	8000fb0 <get_key_event+0x4>
            break;
 8000fbc:	bf00      	nop
    }
//    return pop_queue();
    return press;
 8000fbe:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <get_key_event+0x20>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200006bf 	.word	0x200006bf

08000fd0 <get_keypress>:

uint8_t get_keypress() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	uint8_t event;
    for(;;) {
        // Wait for every button event...
        event = get_key_event();
 8000fd6:	f7ff ffe9 	bl	8000fac <get_key_event>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
        press = 0;
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <get_keypress+0x2c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
        // ...but ignore if it's a release.
        if (event & 0x80){
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	daf4      	bge.n	8000fd6 <get_keypress+0x6>
        	return event & 0x7f;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff2:	b2db      	uxtb	r3, r3
        }


    }

}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200006bf 	.word	0x200006bf

08001000 <send_char>:



uint32_t send_char()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	uint8_t key = get_keypress();
 8001006:	f7ff ffe3 	bl	8000fd0 <get_keypress>
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	return ((func << 8) | (0xff & key));
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <send_char+0x20>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	021a      	lsls	r2, r3, #8
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4313      	orrs	r3, r2
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200006c0 	.word	0x200006c0

08001024 <main>:
		{"SHIFT\t","z\t","x\t","c\t","v\t","b\t","n\t","m\t",",/<\t",".>\t","//?\t","SHIFT\t","UP\t","\t","\t"},
		{"CTRL\t","GUI\t","ALT\t","\t","\t","SPACE\t","\t","\t","\t","\t","ALT\t","CTRL\t","LEFT\t","DOWN\t","RIGHT\t"},
	};

int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
	HAL_Init();
 800102a:	f000 ff81 	bl	8001f30 <HAL_Init>
	enable_ports();
 800102e:	f7ff fd41 	bl	8000ab4 <enable_ports>

	init_tim2();
 8001032:	f7ff fc97 	bl	8000964 <init_tim2>

	init_usart1();
 8001036:	f7ff fcc1 	bl	80009bc <init_usart1>
	SystemClock_Config();
 800103a:	f7ff fc37 	bl	80008ac <SystemClock_Config>
	MX_USB_DEVICE_Init();
 800103e:	f007 fa57 	bl	80084f0 <MX_USB_DEVICE_Init>



	#define eprog
	#ifdef eprog
	init_eeprom();
 8001042:	f7ff fd1b 	bl	8000a7c <init_eeprom>
	loadLayout();
 8001046:	f000 fe7f 	bl	8001d48 <loadLayout>
	loadSeq();
 800104a:	f000 fe09 	bl	8001c60 <loadSeq>
	#endif


	#define key
	#ifdef key
	int countF2 = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]

	while (1)
	{
		uint32_t c = send_char();
 8001052:	f7ff ffd5 	bl	8001000 <send_char>
 8001056:	6038      	str	r0, [r7, #0]

		if (GPIOA->IDR >> 10 & 1) //uart
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <main+0xb4>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	0a9b      	lsrs	r3, r3, #10
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d011      	beq.n	800108a <main+0x66>
		{
			if ((c >> (8 + 8)) & 1) // f1
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	0c1b      	lsrs	r3, r3, #16
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <main+0x5a>
			{
				countF2 = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
				display_sequence(c);
 8001076:	6838      	ldr	r0, [r7, #0]
 8001078:	f000 f830 	bl	80010dc <display_sequence>
 800107c:	e7e9      	b.n	8001052 <main+0x2e>
			}
			else
			{
				countF2 = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
				uart_printChar(c);
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f000 f95e 	bl	8001344 <uart_printChar>
 8001088:	e7e3      	b.n	8001052 <main+0x2e>
			}

		}
		else //usb
		{
			if ((c >> (8 + 8)) & 1) // f1
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <main+0x7e>
			{
				countF2 = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
				display_sequence(c);
 800109a:	6838      	ldr	r0, [r7, #0]
 800109c:	f000 f81e 	bl	80010dc <display_sequence>
 80010a0:	e7d7      	b.n	8001052 <main+0x2e>
			}
			else if (decode_uart(c) == F2) // f2
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f88e 	bl	80001c8 <decode_uart>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b85      	cmp	r3, #133	; 0x85
 80010b0:	d10a      	bne.n	80010c8 <main+0xa4>
			{
				countF2++;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
				if (countF2 == 3) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d1c9      	bne.n	8001052 <main+0x2e>
					UI_modify();
 80010be:	f000 f9e3 	bl	8001488 <UI_modify>
					countF2 = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	e7c4      	b.n	8001052 <main+0x2e>
				}
			}
			else
			{
				countF2 = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
				usb_printKey(c);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f951 	bl	8001378 <usb_printKey>
	{
 80010d6:	e7bc      	b.n	8001052 <main+0x2e>
 80010d8:	40010800 	.word	0x40010800

080010dc <display_sequence>:


	#endif
}
void display_sequence(uint32_t c)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
		if (GPIOA->IDR >> 10 & 1) {
 80010e4:	4b7c      	ldr	r3, [pc, #496]	; (80012d8 <display_sequence+0x1fc>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	0a9b      	lsrs	r3, r3, #10
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d077      	beq.n	80011e2 <display_sequence+0x106>
			if (decode_usb(c) == 30) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f828 	bl	800014c <decode_usb>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b1e      	cmp	r3, #30
 8001100:	d103      	bne.n	800110a <display_sequence+0x2e>
				uart_printSeq(sequence[1]);
 8001102:	4876      	ldr	r0, [pc, #472]	; (80012dc <display_sequence+0x200>)
 8001104:	f000 f8fe 	bl	8001304 <uart_printSeq>
			} else if (decode_usb(c) == 39) {
				usb_printSeq(sequence[0]);
			}
		}

}
 8001108:	e0e2      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 31) {
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f81c 	bl	800014c <decode_usb>
 8001114:	4603      	mov	r3, r0
 8001116:	2b1f      	cmp	r3, #31
 8001118:	d103      	bne.n	8001122 <display_sequence+0x46>
				uart_printSeq(sequence[2]);
 800111a:	4871      	ldr	r0, [pc, #452]	; (80012e0 <display_sequence+0x204>)
 800111c:	f000 f8f2 	bl	8001304 <uart_printSeq>
}
 8001120:	e0d6      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 32) {
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f810 	bl	800014c <decode_usb>
 800112c:	4603      	mov	r3, r0
 800112e:	2b20      	cmp	r3, #32
 8001130:	d103      	bne.n	800113a <display_sequence+0x5e>
				uart_printSeq(sequence[3]);
 8001132:	486c      	ldr	r0, [pc, #432]	; (80012e4 <display_sequence+0x208>)
 8001134:	f000 f8e6 	bl	8001304 <uart_printSeq>
}
 8001138:	e0ca      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 33) {
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f804 	bl	800014c <decode_usb>
 8001144:	4603      	mov	r3, r0
 8001146:	2b21      	cmp	r3, #33	; 0x21
 8001148:	d103      	bne.n	8001152 <display_sequence+0x76>
				uart_printSeq(sequence[4]);
 800114a:	4867      	ldr	r0, [pc, #412]	; (80012e8 <display_sequence+0x20c>)
 800114c:	f000 f8da 	bl	8001304 <uart_printSeq>
}
 8001150:	e0be      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 34) {
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f7fe fff8 	bl	800014c <decode_usb>
 800115c:	4603      	mov	r3, r0
 800115e:	2b22      	cmp	r3, #34	; 0x22
 8001160:	d103      	bne.n	800116a <display_sequence+0x8e>
				uart_printSeq(sequence[5]);
 8001162:	4862      	ldr	r0, [pc, #392]	; (80012ec <display_sequence+0x210>)
 8001164:	f000 f8ce 	bl	8001304 <uart_printSeq>
}
 8001168:	e0b2      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 35) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f7fe ffec 	bl	800014c <decode_usb>
 8001174:	4603      	mov	r3, r0
 8001176:	2b23      	cmp	r3, #35	; 0x23
 8001178:	d103      	bne.n	8001182 <display_sequence+0xa6>
				uart_printSeq(sequence[6]);
 800117a:	485d      	ldr	r0, [pc, #372]	; (80012f0 <display_sequence+0x214>)
 800117c:	f000 f8c2 	bl	8001304 <uart_printSeq>
}
 8001180:	e0a6      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 36) {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f7fe ffe0 	bl	800014c <decode_usb>
 800118c:	4603      	mov	r3, r0
 800118e:	2b24      	cmp	r3, #36	; 0x24
 8001190:	d103      	bne.n	800119a <display_sequence+0xbe>
				uart_printSeq(sequence[7]);
 8001192:	4858      	ldr	r0, [pc, #352]	; (80012f4 <display_sequence+0x218>)
 8001194:	f000 f8b6 	bl	8001304 <uart_printSeq>
}
 8001198:	e09a      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 37) {
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f7fe ffd4 	bl	800014c <decode_usb>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b25      	cmp	r3, #37	; 0x25
 80011a8:	d103      	bne.n	80011b2 <display_sequence+0xd6>
				uart_printSeq(sequence[8]);
 80011aa:	4853      	ldr	r0, [pc, #332]	; (80012f8 <display_sequence+0x21c>)
 80011ac:	f000 f8aa 	bl	8001304 <uart_printSeq>
}
 80011b0:	e08e      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 38) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7fe ffc8 	bl	800014c <decode_usb>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b26      	cmp	r3, #38	; 0x26
 80011c0:	d103      	bne.n	80011ca <display_sequence+0xee>
				uart_printSeq(sequence[9]);
 80011c2:	484e      	ldr	r0, [pc, #312]	; (80012fc <display_sequence+0x220>)
 80011c4:	f000 f89e 	bl	8001304 <uart_printSeq>
}
 80011c8:	e082      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 39) {
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7fe ffbc 	bl	800014c <decode_usb>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b27      	cmp	r3, #39	; 0x27
 80011d8:	d17a      	bne.n	80012d0 <display_sequence+0x1f4>
				uart_printSeq(sequence[0]);
 80011da:	4849      	ldr	r0, [pc, #292]	; (8001300 <display_sequence+0x224>)
 80011dc:	f000 f892 	bl	8001304 <uart_printSeq>
}
 80011e0:	e076      	b.n	80012d0 <display_sequence+0x1f4>
			if (decode_usb(c) == 30) {
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7fe ffb0 	bl	800014c <decode_usb>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b1e      	cmp	r3, #30
 80011f0:	d103      	bne.n	80011fa <display_sequence+0x11e>
				usb_printSeq(sequence[1]);
 80011f2:	483a      	ldr	r0, [pc, #232]	; (80012dc <display_sequence+0x200>)
 80011f4:	f000 f928 	bl	8001448 <usb_printSeq>
}
 80011f8:	e06a      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 31) {
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f7fe ffa4 	bl	800014c <decode_usb>
 8001204:	4603      	mov	r3, r0
 8001206:	2b1f      	cmp	r3, #31
 8001208:	d103      	bne.n	8001212 <display_sequence+0x136>
				usb_printSeq(sequence[2]);
 800120a:	4835      	ldr	r0, [pc, #212]	; (80012e0 <display_sequence+0x204>)
 800120c:	f000 f91c 	bl	8001448 <usb_printSeq>
}
 8001210:	e05e      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 32) {
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7fe ff98 	bl	800014c <decode_usb>
 800121c:	4603      	mov	r3, r0
 800121e:	2b20      	cmp	r3, #32
 8001220:	d103      	bne.n	800122a <display_sequence+0x14e>
				usb_printSeq(sequence[3]);
 8001222:	4830      	ldr	r0, [pc, #192]	; (80012e4 <display_sequence+0x208>)
 8001224:	f000 f910 	bl	8001448 <usb_printSeq>
}
 8001228:	e052      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 33) {
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f7fe ff8c 	bl	800014c <decode_usb>
 8001234:	4603      	mov	r3, r0
 8001236:	2b21      	cmp	r3, #33	; 0x21
 8001238:	d103      	bne.n	8001242 <display_sequence+0x166>
				usb_printSeq(sequence[4]);
 800123a:	482b      	ldr	r0, [pc, #172]	; (80012e8 <display_sequence+0x20c>)
 800123c:	f000 f904 	bl	8001448 <usb_printSeq>
}
 8001240:	e046      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 34) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7fe ff80 	bl	800014c <decode_usb>
 800124c:	4603      	mov	r3, r0
 800124e:	2b22      	cmp	r3, #34	; 0x22
 8001250:	d103      	bne.n	800125a <display_sequence+0x17e>
				usb_printSeq(sequence[5]);
 8001252:	4826      	ldr	r0, [pc, #152]	; (80012ec <display_sequence+0x210>)
 8001254:	f000 f8f8 	bl	8001448 <usb_printSeq>
}
 8001258:	e03a      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 35) {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f7fe ff74 	bl	800014c <decode_usb>
 8001264:	4603      	mov	r3, r0
 8001266:	2b23      	cmp	r3, #35	; 0x23
 8001268:	d103      	bne.n	8001272 <display_sequence+0x196>
				usb_printSeq(sequence[6]);
 800126a:	4821      	ldr	r0, [pc, #132]	; (80012f0 <display_sequence+0x214>)
 800126c:	f000 f8ec 	bl	8001448 <usb_printSeq>
}
 8001270:	e02e      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 36) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7fe ff68 	bl	800014c <decode_usb>
 800127c:	4603      	mov	r3, r0
 800127e:	2b24      	cmp	r3, #36	; 0x24
 8001280:	d103      	bne.n	800128a <display_sequence+0x1ae>
				usb_printSeq(sequence[7]);
 8001282:	481c      	ldr	r0, [pc, #112]	; (80012f4 <display_sequence+0x218>)
 8001284:	f000 f8e0 	bl	8001448 <usb_printSeq>
}
 8001288:	e022      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 37) {
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f7fe ff5c 	bl	800014c <decode_usb>
 8001294:	4603      	mov	r3, r0
 8001296:	2b25      	cmp	r3, #37	; 0x25
 8001298:	d103      	bne.n	80012a2 <display_sequence+0x1c6>
				usb_printSeq(sequence[8]);
 800129a:	4817      	ldr	r0, [pc, #92]	; (80012f8 <display_sequence+0x21c>)
 800129c:	f000 f8d4 	bl	8001448 <usb_printSeq>
}
 80012a0:	e016      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 38) {
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7fe ff50 	bl	800014c <decode_usb>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b26      	cmp	r3, #38	; 0x26
 80012b0:	d103      	bne.n	80012ba <display_sequence+0x1de>
				usb_printSeq(sequence[9]);
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <display_sequence+0x220>)
 80012b4:	f000 f8c8 	bl	8001448 <usb_printSeq>
}
 80012b8:	e00a      	b.n	80012d0 <display_sequence+0x1f4>
			} else if (decode_usb(c) == 39) {
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7fe ff44 	bl	800014c <decode_usb>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b27      	cmp	r3, #39	; 0x27
 80012c8:	d102      	bne.n	80012d0 <display_sequence+0x1f4>
				usb_printSeq(sequence[0]);
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <display_sequence+0x224>)
 80012cc:	f000 f8bc 	bl	8001448 <usb_printSeq>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40010800 	.word	0x40010800
 80012dc:	2000006c 	.word	0x2000006c
 80012e0:	2000008c 	.word	0x2000008c
 80012e4:	200000ac 	.word	0x200000ac
 80012e8:	200000cc 	.word	0x200000cc
 80012ec:	200000ec 	.word	0x200000ec
 80012f0:	2000010c 	.word	0x2000010c
 80012f4:	2000012c 	.word	0x2000012c
 80012f8:	2000014c 	.word	0x2000014c
 80012fc:	2000016c 	.word	0x2000016c
 8001300:	2000004c 	.word	0x2000004c

08001304 <uart_printSeq>:

void uart_printSeq(uint16_t* sequence)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	int idx = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
		while (sequence[idx] != 0xffff)
 8001310:	e00a      	b.n	8001328 <uart_printSeq+0x24>
		{
			uart_printChar(sequence[idx]);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f811 	bl	8001344 <uart_printChar>
			idx++;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3301      	adds	r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
		while (sequence[idx] != 0xffff)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001336:	4293      	cmp	r3, r2
 8001338:	d1eb      	bne.n	8001312 <uart_printSeq+0xe>
		}

		return;
 800133a:	bf00      	nop
}
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <uart_printChar>:

void uart_printChar(uint32_t c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & USART_SR_TXE)) {}
 800134c:	bf00      	nop
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <uart_printChar+0x30>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f9      	beq.n	800134e <uart_printChar+0xa>
	USART1->DR = decode_uart(c);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	b29b      	uxth	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7fe ff32 	bl	80001c8 <decode_uart>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <uart_printChar+0x30>)
 800136a:	605a      	str	r2, [r3, #4]
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40013800 	.word	0x40013800

08001378 <usb_printKey>:


void usb_printKey(uint16_t output)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
	keyBoardHIDsub.MODIFIER = (output >> 8) & 0xff;
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <usb_printKey+0x5c>)
 800138c:	701a      	strb	r2, [r3, #0]
	keyBoardHIDsub.KEYCODE1 = decode_usb(output & 0xff);
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f7fe feda 	bl	800014c <decode_usb>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <usb_printKey+0x5c>)
 800139e:	709a      	strb	r2, [r3, #2]

	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyBoardHIDsub, sizeof(keyBoardHIDsub));
 80013a0:	2208      	movs	r2, #8
 80013a2:	490c      	ldr	r1, [pc, #48]	; (80013d4 <usb_printKey+0x5c>)
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <usb_printKey+0x60>)
 80013a6:	f005 ffb3 	bl	8007310 <USBD_HID_SendReport>
	HAL_Delay(HAL_DELAY);
 80013aa:	2002      	movs	r0, #2
 80013ac:	f000 fe22 	bl	8001ff4 <HAL_Delay>

	keyBoardHIDsub.MODIFIER = 0x00;
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <usb_printKey+0x5c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	keyBoardHIDsub.KEYCODE1 = 0;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <usb_printKey+0x5c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyBoardHIDsub, sizeof(keyBoardHIDsub));
 80013bc:	2208      	movs	r2, #8
 80013be:	4905      	ldr	r1, [pc, #20]	; (80013d4 <usb_printKey+0x5c>)
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <usb_printKey+0x60>)
 80013c2:	f005 ffa5 	bl	8007310 <USBD_HID_SendReport>
	HAL_Delay(HAL_DELAY*2);
 80013c6:	2004      	movs	r0, #4
 80013c8:	f000 fe14 	bl	8001ff4 <HAL_Delay>

	return;
 80013cc:	bf00      	nop
}
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200006c4 	.word	0x200006c4
 80013d8:	200006d8 	.word	0x200006d8

080013dc <usb_printChar>:

void usb_printChar(uint16_t c)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
	if((c >> 8 & 1) == 1)
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <usb_printChar+0x20>
	{
		keyBoardHIDsub.MODIFIER = 1 << 1;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <usb_printChar+0x64>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	e002      	b.n	8001402 <usb_printChar+0x26>
	}
	else
	{
		keyBoardHIDsub.MODIFIER = 0;
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <usb_printChar+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
	}
	keyBoardHIDsub.KEYCODE1 = c & 0xff;
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <usb_printChar+0x64>)
 8001408:	709a      	strb	r2, [r3, #2]

	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyBoardHIDsub, sizeof(keyBoardHIDsub));
 800140a:	2208      	movs	r2, #8
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <usb_printChar+0x64>)
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <usb_printChar+0x68>)
 8001410:	f005 ff7e 	bl	8007310 <USBD_HID_SendReport>
	HAL_Delay(HAL_DELAY);
 8001414:	2002      	movs	r0, #2
 8001416:	f000 fded 	bl	8001ff4 <HAL_Delay>

	keyBoardHIDsub.MODIFIER = 0x00;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <usb_printChar+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
	keyBoardHIDsub.KEYCODE1 = 0;
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <usb_printChar+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyBoardHIDsub, sizeof(keyBoardHIDsub));
 8001426:	2208      	movs	r2, #8
 8001428:	4905      	ldr	r1, [pc, #20]	; (8001440 <usb_printChar+0x64>)
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <usb_printChar+0x68>)
 800142c:	f005 ff70 	bl	8007310 <USBD_HID_SendReport>
	HAL_Delay(HAL_DELAY*2);
 8001430:	2004      	movs	r0, #4
 8001432:	f000 fddf 	bl	8001ff4 <HAL_Delay>
	return;
 8001436:	bf00      	nop
}
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200006c4 	.word	0x200006c4
 8001444:	200006d8 	.word	0x200006d8

08001448 <usb_printSeq>:

void usb_printSeq(uint16_t *sequence)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	int idx = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
	while (sequence[idx] != 0xffff)
 8001454:	e00a      	b.n	800146c <usb_printSeq+0x24>
	{
		usb_printKey(sequence[idx]);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff89 	bl	8001378 <usb_printKey>
		idx++;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3301      	adds	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
	while (sequence[idx] != 0xffff)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147a:	4293      	cmp	r3, r2
 800147c:	d1eb      	bne.n	8001456 <usb_printSeq+0xe>
	}

	return;
 800147e:	bf00      	nop
}
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <UI_modify>:


void UI_modify()
{
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
	char escape[] = "\rFinish setup. Bye Bye :)\r";
 800148e:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <UI_modify+0x118>)
 8001490:	1d3c      	adds	r4, r7, #4
 8001492:	461d      	mov	r5, r3
 8001494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800149c:	c403      	stmia	r4!, {r0, r1}
 800149e:	8022      	strh	r2, [r4, #0]
 80014a0:	3402      	adds	r4, #2
 80014a2:	0c13      	lsrs	r3, r2, #16
 80014a4:	7023      	strb	r3, [r4, #0]
	print_message(UI1);
 80014a6:	483f      	ldr	r0, [pc, #252]	; (80015a4 <UI_modify+0x11c>)
 80014a8:	f000 f9fc 	bl	80018a4 <print_message>
	uint32_t enter;
	do
	{
		enter = send_char();
 80014ac:	f7ff fda8 	bl	8001000 <send_char>
 80014b0:	6278      	str	r0, [r7, #36]	; 0x24
	}while(decode_uart(enter) != '\r');
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7fe fe86 	bl	80001c8 <decode_uart>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b0d      	cmp	r3, #13
 80014c0:	d1f4      	bne.n	80014ac <UI_modify+0x24>
	print_message(UI2);
 80014c2:	4839      	ldr	r0, [pc, #228]	; (80015a8 <UI_modify+0x120>)
 80014c4:	f000 f9ee 	bl	80018a4 <print_message>
	do
	{
		print_message(UI3);
 80014c8:	4838      	ldr	r0, [pc, #224]	; (80015ac <UI_modify+0x124>)
 80014ca:	f000 f9eb 	bl	80018a4 <print_message>
		uint32_t sel = send_char();
 80014ce:	f7ff fd97 	bl	8001000 <send_char>
 80014d2:	6238      	str	r0, [r7, #32]
		uint8_t num = decode_uart(sel);
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe fe75 	bl	80001c8 <decode_uart>
 80014de:	4603      	mov	r3, r0
 80014e0:	77fb      	strb	r3, [r7, #31]
		switch (num)
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	3b1b      	subs	r3, #27
 80014e6:	2b1b      	cmp	r3, #27
 80014e8:	d851      	bhi.n	800158e <UI_modify+0x106>
 80014ea:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <UI_modify+0x68>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	08001585 	.word	0x08001585
 80014f4:	0800158f 	.word	0x0800158f
 80014f8:	0800158f 	.word	0x0800158f
 80014fc:	0800158f 	.word	0x0800158f
 8001500:	0800158f 	.word	0x0800158f
 8001504:	0800158f 	.word	0x0800158f
 8001508:	0800158f 	.word	0x0800158f
 800150c:	0800158f 	.word	0x0800158f
 8001510:	0800158f 	.word	0x0800158f
 8001514:	0800158f 	.word	0x0800158f
 8001518:	0800158f 	.word	0x0800158f
 800151c:	0800158f 	.word	0x0800158f
 8001520:	0800158f 	.word	0x0800158f
 8001524:	0800158f 	.word	0x0800158f
 8001528:	0800158f 	.word	0x0800158f
 800152c:	0800158f 	.word	0x0800158f
 8001530:	0800158f 	.word	0x0800158f
 8001534:	0800158f 	.word	0x0800158f
 8001538:	0800158f 	.word	0x0800158f
 800153c:	0800158f 	.word	0x0800158f
 8001540:	0800158f 	.word	0x0800158f
 8001544:	0800158f 	.word	0x0800158f
 8001548:	08001561 	.word	0x08001561
 800154c:	08001567 	.word	0x08001567
 8001550:	0800156d 	.word	0x0800156d
 8001554:	08001573 	.word	0x08001573
 8001558:	08001579 	.word	0x08001579
 800155c:	0800157f 	.word	0x0800157f
		{
		case 0x31:
			display_layout();
 8001560:	f000 f828 	bl	80015b4 <display_layout>
			break;
 8001564:	e017      	b.n	8001596 <UI_modify+0x10e>
		case 0x32:
			display_key_sequence();
 8001566:	f000 f873 	bl	8001650 <display_key_sequence>
			break;
 800156a:	e014      	b.n	8001596 <UI_modify+0x10e>
		case 0x33:
			setup_sequence();
 800156c:	f000 f89e 	bl	80016ac <setup_sequence>
			break;
 8001570:	e011      	b.n	8001596 <UI_modify+0x10e>
		case 0x34:
			swap_key();
 8001572:	f000 f9b9 	bl	80018e8 <swap_key>
			break;
 8001576:	e00e      	b.n	8001596 <UI_modify+0x10e>
		case 0x35:
			reset_sequence();
 8001578:	f000 f95a 	bl	8001830 <reset_sequence>
			break;
 800157c:	e00b      	b.n	8001596 <UI_modify+0x10e>
		case 0x36:
			reset_layout();
 800157e:	f7fe fecb 	bl	8000318 <reset_layout>
			break;
 8001582:	e008      	b.n	8001596 <UI_modify+0x10e>
			//print_message(messageSav);
			//saveLayout();
			//saveSeq();
			//char messageD[] = "\rDone";
			//print_message(messageD);
			print_message(escape);
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f98c 	bl	80018a4 <print_message>
			return;
 800158c:	e004      	b.n	8001598 <UI_modify+0x110>
			break;

		default:
			print_message(ERR);
 800158e:	4808      	ldr	r0, [pc, #32]	; (80015b0 <UI_modify+0x128>)
 8001590:	f000 f988 	bl	80018a4 <print_message>
			break;
 8001594:	bf00      	nop
	{
 8001596:	e797      	b.n	80014c8 <UI_modify+0x40>
		}
	} while (1);
	return;
}
 8001598:	3728      	adds	r7, #40	; 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bdb0      	pop	{r4, r5, r7, pc}
 800159e:	bf00      	nop
 80015a0:	08008d18 	.word	0x08008d18
 80015a4:	2000018c 	.word	0x2000018c
 80015a8:	200001d8 	.word	0x200001d8
 80015ac:	20000280 	.word	0x20000280
 80015b0:	200002b8 	.word	0x200002b8

080015b4 <display_layout>:

void display_layout()
 {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0

	char newline[] = { "\r" };
 80015ba:	230d      	movs	r3, #13
 80015bc:	803b      	strh	r3, [r7, #0]
	print_message(newline);
 80015be:	463b      	mov	r3, r7
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f96f 	bl	80018a4 <print_message>
	uint8_t (*map)[15] = get_keyMap();
 80015c6:	f7fe ff41 	bl	800044c <get_keyMap>
 80015ca:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 5; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	e034      	b.n	800163c <display_layout+0x88>
		for (int j = 0; j < 15; j++) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	e027      	b.n	8001628 <display_layout+0x74>
			print_message(keyout[(map[i][j] & 0xf0) >> 4][map[i][j] & 0xf]);
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4613      	mov	r3, r2
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	1a9b      	subs	r3, r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	441a      	add	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4619      	mov	r1, r3
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4613      	mov	r3, r2
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	1a9b      	subs	r3, r3, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	441a      	add	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	461a      	mov	r2, r3
 8001608:	00d2      	lsls	r2, r2, #3
 800160a:	1ad2      	subs	r2, r2, r3
 800160c:	460b      	mov	r3, r1
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	1a5b      	subs	r3, r3, r1
 8001612:	0119      	lsls	r1, r3, #4
 8001614:	1ac9      	subs	r1, r1, r3
 8001616:	1853      	adds	r3, r2, r1
 8001618:	4a0c      	ldr	r2, [pc, #48]	; (800164c <display_layout+0x98>)
 800161a:	4413      	add	r3, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f941 	bl	80018a4 <print_message>
		for (int j = 0; j < 15; j++) {
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3301      	adds	r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b0e      	cmp	r3, #14
 800162c:	ddd4      	ble.n	80015d8 <display_layout+0x24>
		}
		print_message(newline);
 800162e:	463b      	mov	r3, r7
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f937 	bl	80018a4 <print_message>
	for (int i = 0; i < 5; i++) {
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3301      	adds	r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b04      	cmp	r3, #4
 8001640:	ddc7      	ble.n	80015d2 <display_layout+0x1e>
	}
	return;
 8001642:	bf00      	nop
}
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200002f0 	.word	0x200002f0

08001650 <display_key_sequence>:


void display_key_sequence()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

	for(int i = 0; i < 10; i++)
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	e01d      	b.n	8001698 <display_key_sequence+0x48>
		{
			usb_printKey(0x2c); //enter
 800165c:	202c      	movs	r0, #44	; 0x2c
 800165e:	f7ff fe8b 	bl	8001378 <usb_printKey>
			usb_printChar(lookup_char(0x30+i));  //num
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	3330      	adds	r3, #48	; 0x30
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fdfe 	bl	800026c <lookup_char>
 8001670:	4603      	mov	r3, r0
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff feb2 	bl	80013dc <usb_printChar>
			usb_printKey(0x39); //"."
 8001678:	2039      	movs	r0, #57	; 0x39
 800167a:	f7ff fe7d 	bl	8001378 <usb_printKey>
			usb_printKey(0x45); //" "
 800167e:	2045      	movs	r0, #69	; 0x45
 8001680:	f7ff fe7a 	bl	8001378 <usb_printKey>

			usb_printSeq(sequence[i]);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	015b      	lsls	r3, r3, #5
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <display_key_sequence+0x58>)
 800168a:	4413      	add	r3, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fedb 	bl	8001448 <usb_printSeq>
	for(int i = 0; i < 10; i++)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3301      	adds	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b09      	cmp	r3, #9
 800169c:	ddde      	ble.n	800165c <display_key_sequence+0xc>
		}
}
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000004c 	.word	0x2000004c

080016ac <setup_sequence>:

void setup_sequence()
{
 80016ac:	b5b0      	push	{r4, r5, r7, lr}
 80016ae:	b0aa      	sub	sp, #168	; 0xa8
 80016b0:	af00      	add	r7, sp, #0

	uint8_t num;
	uint32_t entry;
	uint8_t input;

	int count = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	do {
		char message[] = "\rChoose the sequence to modify. From 0 - 9 >>>>";
 80016b8:	4b56      	ldr	r3, [pc, #344]	; (8001814 <setup_sequence+0x168>)
 80016ba:	463c      	mov	r4, r7
 80016bc:	461d      	mov	r5, r3
 80016be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		print_message(message);
 80016ce:	463b      	mov	r3, r7
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 f8e7 	bl	80018a4 <print_message>
		entry = send_char();
 80016d6:	f7ff fc93 	bl	8001000 <send_char>
 80016da:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		num = decode_uart(entry);
 80016de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fd6f 	bl	80001c8 <decode_uart>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		if (num < 0x30 || num > 0x39) {
 80016f0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80016f4:	2b2f      	cmp	r3, #47	; 0x2f
 80016f6:	d903      	bls.n	8001700 <setup_sequence+0x54>
 80016f8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80016fc:	2b39      	cmp	r3, #57	; 0x39
 80016fe:	d902      	bls.n	8001706 <setup_sequence+0x5a>
			print_message(ERR);
 8001700:	4845      	ldr	r0, [pc, #276]	; (8001818 <setup_sequence+0x16c>)
 8001702:	f000 f8cf 	bl	80018a4 <print_message>
		}
	} while (num < 0x30 || num > 0x39);
 8001706:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800170a:	2b2f      	cmp	r3, #47	; 0x2f
 800170c:	d9d4      	bls.n	80016b8 <setup_sequence+0xc>
 800170e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001712:	2b39      	cmp	r3, #57	; 0x39
 8001714:	d8d0      	bhi.n	80016b8 <setup_sequence+0xc>

	char message1[] = "\rStart Setting number ";
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <setup_sequence+0x170>)
 8001718:	f107 0484 	add.w	r4, r7, #132	; 0x84
 800171c:	461d      	mov	r5, r3
 800171e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001722:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001726:	6020      	str	r0, [r4, #0]
 8001728:	3404      	adds	r4, #4
 800172a:	8021      	strh	r1, [r4, #0]
 800172c:	3402      	adds	r4, #2
 800172e:	0c0b      	lsrs	r3, r1, #16
 8001730:	7023      	strb	r3, [r4, #0]
	print_message(message1);
 8001732:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f8b4 	bl	80018a4 <print_message>
	usb_printKey(entry);
 800173c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001740:	b29b      	uxth	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fe18 	bl	8001378 <usb_printKey>

	char message3[] = " Please enter the sequence end with ENTER:\rNo more than 15 characters!!!\r";
 8001748:	4a35      	ldr	r2, [pc, #212]	; (8001820 <setup_sequence+0x174>)
 800174a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800174e:	4611      	mov	r1, r2
 8001750:	224a      	movs	r2, #74	; 0x4a
 8001752:	4618      	mov	r0, r3
 8001754:	f007 faaa 	bl	8008cac <memcpy>
	print_message(message3);
 8001758:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800175c:	4618      	mov	r0, r3
 800175e:	f000 f8a1 	bl	80018a4 <print_message>

	do
	{
		entry = send_char();
 8001762:	f7ff fc4d 	bl	8001000 <send_char>
 8001766:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		input = decode_uart(entry);
 800176a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800176e:	b29b      	uxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fd29 	bl	80001c8 <decode_uart>
 8001776:	4603      	mov	r3, r0
 8001778:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		if(input != '\r')
 800177c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001780:	2b0d      	cmp	r3, #13
 8001782:	d017      	beq.n	80017b4 <setup_sequence+0x108>
		{
			sequence[num & 0xf][count++] = entry & 0xffff;
 8001784:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001788:	f003 020f 	and.w	r2, r3, #15
 800178c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001790:	1c59      	adds	r1, r3, #1
 8001792:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8001796:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800179a:	b288      	uxth	r0, r1
 800179c:	4921      	ldr	r1, [pc, #132]	; (8001824 <setup_sequence+0x178>)
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	4602      	mov	r2, r0
 80017a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			usb_printKey(entry);
 80017a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fde2 	bl	8001378 <usb_printKey>
		}

	}while (input != '\r' && (count != SEQUENCE_LENGTH-1));
 80017b4:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80017b8:	2b0d      	cmp	r3, #13
 80017ba:	d003      	beq.n	80017c4 <setup_sequence+0x118>
 80017bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d1ce      	bne.n	8001762 <setup_sequence+0xb6>
	sequence[num & 0xf][count] = 0xffff;
 80017c4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	4915      	ldr	r1, [pc, #84]	; (8001824 <setup_sequence+0x178>)
 80017ce:	011a      	lsls	r2, r3, #4
 80017d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017d4:	4413      	add	r3, r2
 80017d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	print_message(messageSav);
 80017de:	4812      	ldr	r0, [pc, #72]	; (8001828 <setup_sequence+0x17c>)
 80017e0:	f000 f860 	bl	80018a4 <print_message>
	saveSeq(num - 0x30);
 80017e4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80017e8:	3b30      	subs	r3, #48	; 0x30
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f9f2 	bl	8001bd4 <saveSeq>
	char messageD[] = "\rDone";
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <setup_sequence+0x180>)
 80017f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017fa:	6018      	str	r0, [r3, #0]
 80017fc:	3304      	adds	r3, #4
 80017fe:	8019      	strh	r1, [r3, #0]
	print_message(messageD);
 8001800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f84d 	bl	80018a4 <print_message>
	return;
 800180a:	bf00      	nop
}
 800180c:	37a8      	adds	r7, #168	; 0xa8
 800180e:	46bd      	mov	sp, r7
 8001810:	bdb0      	pop	{r4, r5, r7, pc}
 8001812:	bf00      	nop
 8001814:	08008d34 	.word	0x08008d34
 8001818:	200002b8 	.word	0x200002b8
 800181c:	08008d64 	.word	0x08008d64
 8001820:	08008d7c 	.word	0x08008d7c
 8001824:	2000004c 	.word	0x2000004c
 8001828:	200002d4 	.word	0x200002d4
 800182c:	08008dc8 	.word	0x08008dc8

08001830 <reset_sequence>:




void reset_sequence()
{
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0
	char message[] = "\rStart resetting sequence......";
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <reset_sequence+0x68>)
 8001838:	f107 040c 	add.w	r4, r7, #12
 800183c:	461d      	mov	r5, r3
 800183e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001842:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	print_message(message);
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f828 	bl	80018a4 <print_message>
	for(int i = 0; i < 10; i++)
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001858:	e00c      	b.n	8001874 <reset_sequence+0x44>
	{

			sequence[i][0] = 0xffff;
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <reset_sequence+0x6c>)
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	015b      	lsls	r3, r3, #5
 8001860:	4413      	add	r3, r2
 8001862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001866:	801a      	strh	r2, [r3, #0]
			saveSeq(i);
 8001868:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800186a:	f000 f9b3 	bl	8001bd4 <saveSeq>
	for(int i = 0; i < 10; i++)
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	3301      	adds	r3, #1
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001876:	2b09      	cmp	r3, #9
 8001878:	ddef      	ble.n	800185a <reset_sequence+0x2a>
	}
	char message1[] = "\rDone";
 800187a:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <reset_sequence+0x70>)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001882:	6018      	str	r0, [r3, #0]
 8001884:	3304      	adds	r3, #4
 8001886:	8019      	strh	r1, [r3, #0]
	print_message(message1);
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f80a 	bl	80018a4 <print_message>
}
 8001890:	bf00      	nop
 8001892:	3730      	adds	r7, #48	; 0x30
 8001894:	46bd      	mov	sp, r7
 8001896:	bdb0      	pop	{r4, r5, r7, pc}
 8001898:	08008dd0 	.word	0x08008dd0
 800189c:	2000004c 	.word	0x2000004c
 80018a0:	08008dc8 	.word	0x08008dc8

080018a4 <print_message>:

void print_message(char *msg)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	int idx = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
	while(msg[idx] != 0)
 80018b0:	e00f      	b.n	80018d2 <print_message+0x2e>
		{
			uint16_t result = lookup_char(msg[idx++]);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	60fa      	str	r2, [r7, #12]
 80018b8:	461a      	mov	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fcd3 	bl	800026c <lookup_char>
 80018c6:	4603      	mov	r3, r0
 80018c8:	817b      	strh	r3, [r7, #10]
			usb_printChar(result);
 80018ca:	897b      	ldrh	r3, [r7, #10]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fd85 	bl	80013dc <usb_printChar>
	while(msg[idx] != 0)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e9      	bne.n	80018b2 <print_message+0xe>
		}
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <swap_key>:
void swap_key()
{
 80018e8:	b5b0      	push	{r4, r5, r7, lr}
 80018ea:	b0a4      	sub	sp, #144	; 0x90
 80018ec:	af00      	add	r7, sp, #0
	uint32_t first;
	uint32_t second;
	//do {
	uint8_t (*map)[15] = get_keyMap();
 80018ee:	f7fe fdad 	bl	800044c <get_keyMap>
 80018f2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		char message[] = "\rChoose first key to swap: ";
 80018f6:	4bb1      	ldr	r3, [pc, #708]	; (8001bbc <swap_key+0x2d4>)
 80018f8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80018fc:	461d      	mov	r5, r3
 80018fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001902:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		print_message(message);
 800190a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ffc8 	bl	80018a4 <print_message>
		first = send_char();
 8001914:	f7ff fb74 	bl	8001000 <send_char>
 8001918:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		int i, j;
		i = (first & 0xf0) >> 4;
 800191c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	67fb      	str	r3, [r7, #124]	; 0x7c
		j = first & 0xf;
 8001928:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	67bb      	str	r3, [r7, #120]	; 0x78
		print_message(keyout[(map[i][j] & 0xf0) >> 4][map[i][j] & 0xf]);
 8001932:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001934:	4613      	mov	r3, r2
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800193e:	441a      	add	r2, r3
 8001940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4619      	mov	r1, r3
 800194c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001958:	441a      	add	r2, r3
 800195a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800195c:	4413      	add	r3, r2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	461a      	mov	r2, r3
 8001966:	00d2      	lsls	r2, r2, #3
 8001968:	1ad2      	subs	r2, r2, r3
 800196a:	460b      	mov	r3, r1
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	1a5b      	subs	r3, r3, r1
 8001970:	0119      	lsls	r1, r3, #4
 8001972:	1ac9      	subs	r1, r1, r3
 8001974:	1853      	adds	r3, r2, r1
 8001976:	4a92      	ldr	r2, [pc, #584]	; (8001bc0 <swap_key+0x2d8>)
 8001978:	4413      	add	r3, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff92 	bl	80018a4 <print_message>

		char message2[] = "\rChoose second key to swap: ";
 8001980:	4b90      	ldr	r3, [pc, #576]	; (8001bc4 <swap_key+0x2dc>)
 8001982:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001986:	461d      	mov	r5, r3
 8001988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800198a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800198c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001990:	c407      	stmia	r4!, {r0, r1, r2}
 8001992:	7023      	strb	r3, [r4, #0]
		print_message(message2);
 8001994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff83 	bl	80018a4 <print_message>
		second = send_char();
 800199e:	f7ff fb2f 	bl	8001000 <send_char>
 80019a2:	6778      	str	r0, [r7, #116]	; 0x74
		i = (second & 0xf0) >> 4;
 80019a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	67fb      	str	r3, [r7, #124]	; 0x7c
		j = second & 0xf;
 80019ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	67bb      	str	r3, [r7, #120]	; 0x78
		print_message(keyout[(map[i][j] & 0xf0) >> 4][map[i][j] & 0xf]);
 80019b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80019c2:	441a      	add	r2, r3
 80019c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019c6:	4413      	add	r3, r2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4619      	mov	r1, r3
 80019d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019d2:	4613      	mov	r3, r2
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80019dc:	441a      	add	r2, r3
 80019de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	461a      	mov	r2, r3
 80019ea:	00d2      	lsls	r2, r2, #3
 80019ec:	1ad2      	subs	r2, r2, r3
 80019ee:	460b      	mov	r3, r1
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	1a5b      	subs	r3, r3, r1
 80019f4:	0119      	lsls	r1, r3, #4
 80019f6:	1ac9      	subs	r1, r1, r3
 80019f8:	1853      	adds	r3, r2, r1
 80019fa:	4a71      	ldr	r2, [pc, #452]	; (8001bc0 <swap_key+0x2d8>)
 80019fc:	4413      	add	r3, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff50 	bl	80018a4 <print_message>
		//	char message3[] = "\rENTER cannot be swapped, try again";
		//	print_message(message3);
		//}
	//} while (((first & 0xff) == 0x2d) || ((second & 0xff) == 0x2d));

	swap((first & 0xff), (second & 0xff));
 8001a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fcd1 	bl	80003b8 <swap>

	char messageS[] = "\rSaving......Please wait!";
 8001a16:	4b6c      	ldr	r3, [pc, #432]	; (8001bc8 <swap_key+0x2e0>)
 8001a18:	f107 040c 	add.w	r4, r7, #12
 8001a1c:	461d      	mov	r5, r3
 8001a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a26:	c403      	stmia	r4!, {r0, r1}
 8001a28:	8022      	strh	r2, [r4, #0]
		print_message(messageS);
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff ff38 	bl	80018a4 <print_message>
	for (int i = 0; i < 10; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001a3a:	e06a      	b.n	8001b12 <swap_key+0x22a>
	{
		for (int j = 0; j < SEQUENCE_LENGTH; j++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a42:	e05d      	b.n	8001b00 <swap_key+0x218>
		{
			if ((sequence[i][j] & 0xff) == (first & 0xff))
 8001a44:	4961      	ldr	r1, [pc, #388]	; (8001bcc <swap_key+0x2e4>)
 8001a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a4a:	011a      	lsls	r2, r3, #4
 8001a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a50:	4413      	add	r3, r2
 8001a52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a5c:	4053      	eors	r3, r2
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d11c      	bne.n	8001a9e <swap_key+0x1b6>
			{
				sequence[i][j] = (sequence[i][j] & 0xff00) | (second & 0xff);
 8001a64:	4959      	ldr	r1, [pc, #356]	; (8001bcc <swap_key+0x2e4>)
 8001a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a6a:	011a      	lsls	r2, r3, #4
 8001a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a70:	4413      	add	r3, r2
 8001a72:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4313      	orrs	r3, r2
 8001a86:	b298      	uxth	r0, r3
 8001a88:	4950      	ldr	r1, [pc, #320]	; (8001bcc <swap_key+0x2e4>)
 8001a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a8e:	011a      	lsls	r2, r3, #4
 8001a90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a94:	4413      	add	r3, r2
 8001a96:	4602      	mov	r2, r0
 8001a98:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				continue;
 8001a9c:	e02b      	b.n	8001af6 <swap_key+0x20e>
			}
			if ((sequence[i][j] & 0xff) == (second & 0xff))
 8001a9e:	494b      	ldr	r1, [pc, #300]	; (8001bcc <swap_key+0x2e4>)
 8001aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aa4:	011a      	lsls	r2, r3, #4
 8001aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aaa:	4413      	add	r3, r2
 8001aac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ab4:	4053      	eors	r3, r2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d11c      	bne.n	8001af6 <swap_key+0x20e>
			{
				sequence[i][j] = (sequence[i][j] & 0xff00) | (first & 0xff);
 8001abc:	4943      	ldr	r1, [pc, #268]	; (8001bcc <swap_key+0x2e4>)
 8001abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ac2:	011a      	lsls	r2, r3, #4
 8001ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ac8:	4413      	add	r3, r2
 8001aca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b298      	uxth	r0, r3
 8001ae2:	493a      	ldr	r1, [pc, #232]	; (8001bcc <swap_key+0x2e4>)
 8001ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ae8:	011a      	lsls	r2, r3, #4
 8001aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aee:	4413      	add	r3, r2
 8001af0:	4602      	mov	r2, r0
 8001af2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < SEQUENCE_LENGTH; j++)
 8001af6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001afa:	3301      	adds	r3, #1
 8001afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b04:	2b0f      	cmp	r3, #15
 8001b06:	dd9d      	ble.n	8001a44 <swap_key+0x15c>
	for (int i = 0; i < 10; i++)
 8001b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b16:	2b09      	cmp	r3, #9
 8001b18:	dd90      	ble.n	8001a3c <swap_key+0x154>

		}
	}

	int ax,ay,bx,by;
	ax = (first & 0xf0) >> 4;
 8001b1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	673b      	str	r3, [r7, #112]	; 0x70
	ay = first & 0xf;
 8001b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
	bx = (second & 0xf0) >> 4;
 8001b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	66bb      	str	r3, [r7, #104]	; 0x68
	by = second & 0xf;
 8001b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	667b      	str	r3, [r7, #100]	; 0x64
	eeprom_byteWrite(map[ax][ay], ax*15+ay);
 8001b42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001b44:	4613      	mov	r3, r2
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001b4e:	441a      	add	r2, r3
 8001b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b52:	4413      	add	r3, r2
 8001b54:	7818      	ldrb	r0, [r3, #0]
 8001b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	0112      	lsls	r2, r2, #4
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f7fe fde7 	bl	800073e <eeprom_byteWrite>
	eeprom_byteWrite(map[bx][by], bx*15+by);
 8001b70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b72:	4613      	mov	r3, r2
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001b7c:	441a      	add	r2, r3
 8001b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b80:	4413      	add	r3, r2
 8001b82:	7818      	ldrb	r0, [r3, #0]
 8001b84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7fe fdd0 	bl	800073e <eeprom_byteWrite>
	//saveLayout();

	char messageD[] = "\rDone";
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <swap_key+0x2e8>)
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba6:	6018      	str	r0, [r3, #0]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	8019      	strh	r1, [r3, #0]
	print_message(messageD);
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fe78 	bl	80018a4 <print_message>
}
 8001bb4:	bf00      	nop
 8001bb6:	3790      	adds	r7, #144	; 0x90
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	08008df0 	.word	0x08008df0
 8001bc0:	200002f0 	.word	0x200002f0
 8001bc4:	08008e0c 	.word	0x08008e0c
 8001bc8:	08008e2c 	.word	0x08008e2c
 8001bcc:	2000004c 	.word	0x2000004c
 8001bd0:	08008dc8 	.word	0x08008dc8

08001bd4 <saveSeq>:

void saveSeq(int entry)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 10; i++)
	//{
		uint8_t temp[SEQUENCE_LENGTH*2];

		for(int j = 0; j <SEQUENCE_LENGTH; j++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001be0:	e029      	b.n	8001c36 <saveSeq+0x62>
		{
			for(int k = 0; k < 2; k++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be6:	e020      	b.n	8001c2a <saveSeq+0x56>
			{
				temp[j*2 + k] = (k == 0) ? ((sequence[entry][j] & 0xff00) >> 8 ) : (sequence[entry][j] & 0xff);
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10a      	bne.n	8001c04 <saveSeq+0x30>
 8001bee:	491b      	ldr	r1, [pc, #108]	; (8001c5c <saveSeq+0x88>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	011a      	lsls	r2, r3, #4
 8001bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	e007      	b.n	8001c14 <saveSeq+0x40>
 8001c04:	4915      	ldr	r1, [pc, #84]	; (8001c5c <saveSeq+0x88>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	011a      	lsls	r2, r3, #4
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c16:	0051      	lsls	r1, r2, #1
 8001c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c1a:	440a      	add	r2, r1
 8001c1c:	3230      	adds	r2, #48	; 0x30
 8001c1e:	443a      	add	r2, r7
 8001c20:	f802 3c28 	strb.w	r3, [r2, #-40]
			for(int k = 0; k < 2; k++)
 8001c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c26:	3301      	adds	r3, #1
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	dddb      	ble.n	8001be8 <saveSeq+0x14>
		for(int j = 0; j <SEQUENCE_LENGTH; j++)
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	3301      	adds	r3, #1
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	ddd2      	ble.n	8001be2 <saveSeq+0xe>
			}
		}
		eeprom_pageWrite(temp, KEY_SEQUENCE_PAGE_START + SEQUENCE_LENGTH*2 * entry, SEQUENCE_LENGTH*2);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3303      	adds	r3, #3
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	015b      	lsls	r3, r3, #5
 8001c44:	b299      	uxth	r1, r3
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fd91 	bl	8000774 <eeprom_pageWrite>
	//}

	return;
 8001c52:	bf00      	nop
}
 8001c54:	3730      	adds	r7, #48	; 0x30
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000004c 	.word	0x2000004c

08001c60 <loadSeq>:

void loadSeq()
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b0d4      	sub	sp, #336	; 0x150
 8001c64:	af00      	add	r7, sp, #0
	uint8_t temp[10*SEQUENCE_LENGTH*2];
	eeprom_sequentialRead(temp, KEY_SEQUENCE_PAGE_START, 10*SEQUENCE_LENGTH*2);
 8001c66:	463b      	mov	r3, r7
 8001c68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c6c:	2160      	movs	r1, #96	; 0x60
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fde9 	bl	8000846 <eeprom_sequentialRead>
	{
		while (!(USART1->SR & USART_SR_TXE)) {}
		USART1->DR = temp[i];
	}
	*/
	for(int i = 0; i < 10; i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c7a:	e059      	b.n	8001d30 <loadSeq+0xd0>
		{

			for(int j = 0; j <SEQUENCE_LENGTH; j++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001c82:	e04c      	b.n	8001d1e <loadSeq+0xbe>
			{
				uint8_t temp1;
				uint8_t temp2;
				for(int k = 0; k < 2; k++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001c8a:	e02b      	b.n	8001ce4 <loadSeq+0x84>
				{
					if (k == 0) temp1 = temp[i*SEQUENCE_LENGTH*2 + j * 2 + k];
 8001c8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d111      	bne.n	8001cb8 <loadSeq+0x58>
 8001c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c98:	011a      	lsls	r2, r3, #4
 8001c9a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001c9e:	4413      	add	r3, r2
 8001ca0:	005a      	lsls	r2, r3, #1
 8001ca2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001cac:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8001cb0:	5cd3      	ldrb	r3, [r2, r3]
 8001cb2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8001cb6:	e010      	b.n	8001cda <loadSeq+0x7a>
					else temp2 = temp[i*SEQUENCE_LENGTH*2 + j * 2 + k];
 8001cb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001cbc:	011a      	lsls	r2, r3, #4
 8001cbe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001cc2:	4413      	add	r3, r2
 8001cc4:	005a      	lsls	r2, r3, #1
 8001cc6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001cca:	4413      	add	r3, r2
 8001ccc:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001cd0:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8001cd4:	5cd3      	ldrb	r3, [r2, r3]
 8001cd6:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
				for(int k = 0; k < 2; k++)
 8001cda:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001ce4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	ddcf      	ble.n	8001c8c <loadSeq+0x2c>
				}

				sequence[i][j] = ((temp1 << 8) | temp2) & 0xffff;
 8001cec:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	b298      	uxth	r0, r3
 8001d00:	4910      	ldr	r1, [pc, #64]	; (8001d44 <loadSeq+0xe4>)
 8001d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001d06:	011a      	lsls	r2, r3, #4
 8001d08:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int j = 0; j <SEQUENCE_LENGTH; j++)
 8001d14:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001d1e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	ddae      	ble.n	8001c84 <loadSeq+0x24>
	for(int i = 0; i < 10; i++)
 8001d26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001d34:	2b09      	cmp	r3, #9
 8001d36:	dda1      	ble.n	8001c7c <loadSeq+0x1c>
			}

		}

	return;
 8001d38:	bf00      	nop
}
 8001d3a:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000004c 	.word	0x2000004c

08001d48 <loadLayout>:
}
*/


void loadLayout()
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b096      	sub	sp, #88	; 0x58
 8001d4c:	af00      	add	r7, sp, #0
	uint8_t (*keyarr)[15] = get_keyMap();
 8001d4e:	f7fe fb7d 	bl	800044c <get_keyMap>
 8001d52:	64f8      	str	r0, [r7, #76]	; 0x4c
	uint8_t temp[75];
	eeprom_sequentialRead(temp, 0, 75);
 8001d54:	463b      	mov	r3, r7
 8001d56:	224b      	movs	r2, #75	; 0x4b
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fd73 	bl	8000846 <eeprom_sequentialRead>
	for(int i = 0; i<5; i++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	657b      	str	r3, [r7, #84]	; 0x54
 8001d64:	e020      	b.n	8001da8 <loadLayout+0x60>
	{
		for(int j = 0; j<15; j++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	653b      	str	r3, [r7, #80]	; 0x50
 8001d6a:	e017      	b.n	8001d9c <loadLayout+0x54>
		{
			keyarr[i][j] = temp[i*15+j];
 8001d6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d6e:	4613      	mov	r3, r2
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	1a9a      	subs	r2, r3, r2
 8001d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d76:	18d1      	adds	r1, r2, r3
 8001d78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d82:	441a      	add	r2, r3
 8001d84:	f101 0358 	add.w	r3, r1, #88	; 0x58
 8001d88:	443b      	add	r3, r7
 8001d8a:	f813 1c58 	ldrb.w	r1, [r3, #-88]
 8001d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d90:	4413      	add	r3, r2
 8001d92:	460a      	mov	r2, r1
 8001d94:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<15; j++)
 8001d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d98:	3301      	adds	r3, #1
 8001d9a:	653b      	str	r3, [r7, #80]	; 0x50
 8001d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d9e:	2b0e      	cmp	r3, #14
 8001da0:	dde4      	ble.n	8001d6c <loadLayout+0x24>
	for(int i = 0; i<5; i++)
 8001da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da4:	3301      	adds	r3, #1
 8001da6:	657b      	str	r3, [r7, #84]	; 0x54
 8001da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	dddb      	ble.n	8001d66 <loadLayout+0x1e>
		}

	}
	return;
 8001dae:	bf00      	nop
}
 8001db0:	3758      	adds	r7, #88	; 0x58
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <TIM2_IRQHandler>:
//============================================================================
// The Timer 2 ISR
//============================================================================

void TIM2_IRQHandler()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
    TIM2->SR &= ~1;
 8001dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6113      	str	r3, [r2, #16]
    int col = read_col();
 8001dce:	f7ff f8d5 	bl	8000f7c <read_col>
 8001dd2:	6078      	str	r0, [r7, #4]
    update_history(col, rows);
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <TIM2_IRQHandler+0x54>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7fe fec4 	bl	8000b68 <update_history>
    rows = rows + 1 <= 4 ? (rows + 1) : 0;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <TIM2_IRQHandler+0x54>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d804      	bhi.n	8001df2 <TIM2_IRQHandler+0x3a>
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <TIM2_IRQHandler+0x54>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	3301      	adds	r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	e000      	b.n	8001df4 <TIM2_IRQHandler+0x3c>
 8001df2:	2300      	movs	r3, #0
 8001df4:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <TIM2_IRQHandler+0x54>)
 8001df6:	7013      	strb	r3, [r2, #0]
    drive_row(rows);
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <TIM2_IRQHandler+0x54>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f8a3 	bl	8000f48 <drive_row>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200006cc 	.word	0x200006cc

08001e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6193      	str	r3, [r2, #24]
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	61d3      	str	r3, [r2, #28]
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_MspInit+0x5c>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_MspInit+0x60>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <HAL_MspInit+0x60>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <NMI_Handler+0x4>

08001e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <MemManage_Handler+0x4>

08001e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <BusFault_Handler+0x4>

08001e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <UsageFault_Handler+0x4>

08001e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eba:	f000 f87f 	bl	8001fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001eca:	f000 faf5 	bl	80024b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000b9c 	.word	0x20000b9c

08001ed8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ee6:	490d      	ldr	r1, [pc, #52]	; (8001f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001efc:	4c0a      	ldr	r4, [pc, #40]	; (8001f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f0a:	f7ff ffe5 	bl	8001ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f006 fea9 	bl	8008c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f12:	f7ff f887 	bl	8001024 <main>
  bx lr
 8001f16:	4770      	bx	lr
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	20000658 	.word	0x20000658
  ldr r2, =_sidata
 8001f20:	08008fe0 	.word	0x08008fe0
  ldr r2, =_sbss
 8001f24:	20000658 	.word	0x20000658
  ldr r4, =_ebss
 8001f28:	20000e9c 	.word	0x20000e9c

08001f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC1_2_IRQHandler>
	...

08001f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_Init+0x28>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_Init+0x28>)
 8001f3a:	f043 0310 	orr.w	r3, r3, #16
 8001f3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f000 f947 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f46:	200f      	movs	r0, #15
 8001f48:	f000 f808 	bl	8001f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4c:	f7ff ff60 	bl	8001e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40022000 	.word	0x40022000

08001f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_InitTick+0x54>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x58>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f95f 	bl	800223e <HAL_SYSTICK_Config>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00e      	b.n	8001fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b0f      	cmp	r3, #15
 8001f8e:	d80a      	bhi.n	8001fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f90:	2200      	movs	r2, #0
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f000 f927 	bl	80021ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <HAL_InitTick+0x5c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000500 	.word	0x20000500
 8001fb4:	20000508 	.word	0x20000508
 8001fb8:	20000504 	.word	0x20000504

08001fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_IncTick+0x1c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_IncTick+0x20>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <HAL_IncTick+0x20>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	20000508 	.word	0x20000508
 8001fdc:	200006d0 	.word	0x200006d0

08001fe0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <HAL_GetTick+0x10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	200006d0 	.word	0x200006d0

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff fff0 	bl	8001fe0 <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d005      	beq.n	800201a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_Delay+0x44>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800201a:	bf00      	nop
 800201c:	f7ff ffe0 	bl	8001fe0 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8f7      	bhi.n	800201c <HAL_Delay+0x28>
  {
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000508 	.word	0x20000508

0800203c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206e:	4a04      	ldr	r2, [pc, #16]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60d3      	str	r3, [r2, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <__NVIC_GetPriorityGrouping+0x18>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0307 	and.w	r3, r3, #7
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	db0b      	blt.n	80020ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4906      	ldr	r1, [pc, #24]	; (80020d4 <__NVIC_EnableIRQ+0x34>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2001      	movs	r0, #1
 80020c2:	fa00 f202 	lsl.w	r2, r0, r2
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	; (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf28      	it	cs
 800214a:	2304      	movcs	r3, #4
 800214c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3304      	adds	r3, #4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d902      	bls.n	800215c <NVIC_EncodePriority+0x30>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3b03      	subs	r3, #3
 800215a:	e000      	b.n	800215e <NVIC_EncodePriority+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	f04f 32ff 	mov.w	r2, #4294967295
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43d9      	mvns	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	4313      	orrs	r3, r2
         );
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a0:	d301      	bcc.n	80021a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00f      	b.n	80021c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <SysTick_Config+0x40>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ae:	210f      	movs	r1, #15
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f7ff ff90 	bl	80020d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <SysTick_Config+0x40>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <SysTick_Config+0x40>)
 80021c0:	2207      	movs	r2, #7
 80021c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff2d 	bl	800203c <__NVIC_SetPriorityGrouping>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021fc:	f7ff ff42 	bl	8002084 <__NVIC_GetPriorityGrouping>
 8002200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff ff90 	bl	800212c <NVIC_EncodePriority>
 800220c:	4602      	mov	r2, r0
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff5f 	bl	80020d8 <__NVIC_SetPriority>
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff35 	bl	80020a0 <__NVIC_EnableIRQ>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffa2 	bl	8002190 <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002256:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002258:	b08b      	sub	sp, #44	; 0x2c
 800225a:	af06      	add	r7, sp, #24
 800225c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0fd      	b.n	8002464 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f006 fa6b 	bl	8008758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2203      	movs	r2, #3
 8002286:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f002 f952 	bl	8004538 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	687e      	ldr	r6, [r7, #4]
 800229c:	466d      	mov	r5, sp
 800229e:	f106 0410 	add.w	r4, r6, #16
 80022a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	602b      	str	r3, [r5, #0]
 80022aa:	1d33      	adds	r3, r6, #4
 80022ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ae:	6838      	ldr	r0, [r7, #0]
 80022b0:	f002 f91c 	bl	80044ec <USB_CoreInit>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2202      	movs	r2, #2
 80022be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0ce      	b.n	8002464 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 f94d 	bl	800456c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	e04c      	b.n	8002372 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	3301      	adds	r3, #1
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	b298      	uxth	r0, r3
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	440b      	add	r3, r1
 8002314:	3336      	adds	r3, #54	; 0x36
 8002316:	4602      	mov	r2, r0
 8002318:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	3303      	adds	r3, #3
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	3338      	adds	r3, #56	; 0x38
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	333c      	adds	r3, #60	; 0x3c
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	3340      	adds	r3, #64	; 0x40
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	3301      	adds	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	d3ad      	bcc.n	80022d8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
 8002380:	e044      	b.n	800240c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	440b      	add	r3, r1
 80023a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	440b      	add	r3, r1
 80023bc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	440b      	add	r3, r1
 80023d2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	440b      	add	r3, r1
 80023e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	3301      	adds	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d3b5      	bcc.n	8002382 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	687e      	ldr	r6, [r7, #4]
 800241e:	466d      	mov	r5, sp
 8002420:	f106 0410 	add.w	r4, r6, #16
 8002424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	602b      	str	r3, [r5, #0]
 800242c:	1d33      	adds	r3, r6, #4
 800242e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002430:	6838      	ldr	r0, [r7, #0]
 8002432:	f002 f8a7 	bl	8004584 <USB_DevInit>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e00d      	b.n	8002464 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f004 fd59 	bl	8006f14 <USB_DevDisconnect>

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800246c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_PCD_Start+0x16>
 800247e:	2302      	movs	r3, #2
 8002480:	e016      	b.n	80024b0 <HAL_PCD_Start+0x44>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f002 f83c 	bl	800450c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002494:	2101      	movs	r1, #1
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f006 fbad 	bl	8008bf6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f004 fd2d 	bl	8006f00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f004 fd2f 	bl	8006f28 <USB_ReadInterrupts>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d4:	d102      	bne.n	80024dc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fb48 	bl	8002b6c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 fd21 	bl	8006f28 <USB_ReadInterrupts>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f0:	d112      	bne.n	8002518 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002504:	b292      	uxth	r2, r2
 8002506:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f006 f99f 	bl	800884e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002510:	2100      	movs	r1, #0
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f923 	bl	800275e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f004 fd03 	bl	8006f28 <USB_ReadInterrupts>
 8002522:	4603      	mov	r3, r0
 8002524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800252c:	d10b      	bne.n	8002546 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002536:	b29a      	uxth	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002540:	b292      	uxth	r2, r2
 8002542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f004 fcec 	bl	8006f28 <USB_ReadInterrupts>
 8002550:	4603      	mov	r3, r0
 8002552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800255a:	d10b      	bne.n	8002574 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002564:	b29a      	uxth	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800256e:	b292      	uxth	r2, r2
 8002570:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f004 fcd5 	bl	8006f28 <USB_ReadInterrupts>
 800257e:	4603      	mov	r3, r0
 8002580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002588:	d126      	bne.n	80025d8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002592:	b29a      	uxth	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0204 	bic.w	r2, r2, #4
 800259c:	b292      	uxth	r2, r2
 800259e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0208 	bic.w	r2, r2, #8
 80025b4:	b292      	uxth	r2, r2
 80025b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f006 f980 	bl	80088c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025d2:	b292      	uxth	r2, r2
 80025d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f004 fca3 	bl	8006f28 <USB_ReadInterrupts>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ec:	f040 8082 	bne.w	80026f4 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	77fb      	strb	r3, [r7, #31]
 80025f4:	e010      	b.n	8002618 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	7ffb      	ldrb	r3, [r7, #31]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	441a      	add	r2, r3
 8002602:	7ffb      	ldrb	r3, [r7, #31]
 8002604:	8812      	ldrh	r2, [r2, #0]
 8002606:	b292      	uxth	r2, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	3320      	adds	r3, #32
 800260c:	443b      	add	r3, r7
 800260e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002612:	7ffb      	ldrb	r3, [r7, #31]
 8002614:	3301      	adds	r3, #1
 8002616:	77fb      	strb	r3, [r7, #31]
 8002618:	7ffb      	ldrb	r3, [r7, #31]
 800261a:	2b07      	cmp	r3, #7
 800261c:	d9eb      	bls.n	80025f6 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002626:	b29a      	uxth	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	b292      	uxth	r2, r2
 8002632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800263e:	b29a      	uxth	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	b292      	uxth	r2, r2
 800264a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800264e:	bf00      	nop
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002658:	b29b      	uxth	r3, r3
 800265a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f6      	beq.n	8002650 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800266a:	b29a      	uxth	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002674:	b292      	uxth	r2, r2
 8002676:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800267a:	2300      	movs	r3, #0
 800267c:	77fb      	strb	r3, [r7, #31]
 800267e:	e00f      	b.n	80026a0 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002680:	7ffb      	ldrb	r3, [r7, #31]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	4611      	mov	r1, r2
 8002688:	7ffa      	ldrb	r2, [r7, #31]
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	440a      	add	r2, r1
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	3320      	adds	r3, #32
 8002692:	443b      	add	r3, r7
 8002694:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002698:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800269a:	7ffb      	ldrb	r3, [r7, #31]
 800269c:	3301      	adds	r3, #1
 800269e:	77fb      	strb	r3, [r7, #31]
 80026a0:	7ffb      	ldrb	r3, [r7, #31]
 80026a2:	2b07      	cmp	r3, #7
 80026a4:	d9ec      	bls.n	8002680 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0208 	orr.w	r2, r2, #8
 80026b8:	b292      	uxth	r2, r2
 80026ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d0:	b292      	uxth	r2, r2
 80026d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0204 	orr.w	r2, r2, #4
 80026e8:	b292      	uxth	r2, r2
 80026ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f006 f8cc 	bl	800888c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f004 fc15 	bl	8006f28 <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002708:	d10e      	bne.n	8002728 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002712:	b29a      	uxth	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800271c:	b292      	uxth	r2, r2
 800271e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f006 f885 	bl	8008832 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f004 fbfb 	bl	8006f28 <USB_ReadInterrupts>
 8002732:	4603      	mov	r3, r0
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800273c:	d10b      	bne.n	8002756 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002746:	b29a      	uxth	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002750:	b292      	uxth	r2, r2
 8002752:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002756:	bf00      	nop
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_PCD_SetAddress+0x1a>
 8002774:	2302      	movs	r3, #2
 8002776:	e013      	b.n	80027a0 <HAL_PCD_SetAddress+0x42>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f004 fba2 	bl	8006eda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	4608      	mov	r0, r1
 80027b2:	4611      	mov	r1, r2
 80027b4:	461a      	mov	r2, r3
 80027b6:	4603      	mov	r3, r0
 80027b8:	70fb      	strb	r3, [r7, #3]
 80027ba:	460b      	mov	r3, r1
 80027bc:	803b      	strh	r3, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	da0e      	bge.n	80027ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	705a      	strb	r2, [r3, #1]
 80027ea:	e00e      	b.n	800280a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 0207 	and.w	r2, r3, #7
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	b2da      	uxtb	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002816:	883a      	ldrh	r2, [r7, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	78ba      	ldrb	r2, [r7, #2]
 8002820:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	785b      	ldrb	r3, [r3, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d004      	beq.n	8002834 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002834:	78bb      	ldrb	r3, [r7, #2]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d102      	bne.n	8002840 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_PCD_EP_Open+0xa6>
 800284a:	2302      	movs	r3, #2
 800284c:	e00e      	b.n	800286c <HAL_PCD_EP_Open+0xc4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	4618      	mov	r0, r3
 800285e:	f001 feb1 	bl	80045c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800286a:	7afb      	ldrb	r3, [r7, #11]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002884:	2b00      	cmp	r3, #0
 8002886:	da0e      	bge.n	80028a6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	705a      	strb	r2, [r3, #1]
 80028a4:	e00e      	b.n	80028c4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	f003 0207 	and.w	r2, r3, #7
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	4413      	add	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_PCD_EP_Close+0x6a>
 80028da:	2302      	movs	r3, #2
 80028dc:	e00e      	b.n	80028fc <HAL_PCD_EP_Close+0x88>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68f9      	ldr	r1, [r7, #12]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f002 f9d3 	bl	8004c98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	460b      	mov	r3, r1
 8002912:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	f003 0207 	and.w	r2, r3, #7
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4413      	add	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2200      	movs	r2, #0
 8002942:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002944:	7afb      	ldrb	r3, [r7, #11]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	b2da      	uxtb	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002950:	7afb      	ldrb	r3, [r7, #11]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6979      	ldr	r1, [r7, #20]
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fb85 	bl	8005070 <USB_EPStartXfer>
 8002966:	e005      	b.n	8002974 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6979      	ldr	r1, [r7, #20]
 800296e:	4618      	mov	r0, r3
 8002970:	f002 fb7e 	bl	8005070 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	460b      	mov	r3, r1
 800298c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800298e:	7afb      	ldrb	r3, [r7, #11]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4413      	add	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2200      	movs	r2, #0
 80029c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2201      	movs	r2, #1
 80029c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ca:	7afb      	ldrb	r3, [r7, #11]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029d6:	7afb      	ldrb	r3, [r7, #11]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d106      	bne.n	80029ee <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6979      	ldr	r1, [r7, #20]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 fb42 	bl	8005070 <USB_EPStartXfer>
 80029ec:	e005      	b.n	80029fa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6979      	ldr	r1, [r7, #20]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fb3b 	bl	8005070 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	f003 0207 	and.w	r2, r3, #7
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d901      	bls.n	8002a22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e04c      	b.n	8002abc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	da0e      	bge.n	8002a48 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	705a      	strb	r2, [r3, #1]
 8002a46:	e00c      	b.n	8002a62 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_PCD_EP_SetStall+0x7e>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e01c      	b.n	8002abc <HAL_PCD_EP_SetStall+0xb8>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68f9      	ldr	r1, [r7, #12]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 f925 	bl	8006ce0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d108      	bne.n	8002ab2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4610      	mov	r0, r2
 8002aae:	f004 fa4a 	bl	8006f46 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	f003 020f 	and.w	r2, r3, #15
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d901      	bls.n	8002ae2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e040      	b.n	8002b64 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	da0e      	bge.n	8002b08 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	705a      	strb	r2, [r3, #1]
 8002b06:	e00e      	b.n	8002b26 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 0207 	and.w	r2, r3, #7
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_PCD_EP_ClrStall+0x82>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e00e      	b.n	8002b64 <HAL_PCD_EP_ClrStall+0xa0>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68f9      	ldr	r1, [r7, #12]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f004 f913 	bl	8006d80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08e      	sub	sp, #56	; 0x38
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b74:	e2ec      	b.n	8003150 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002b8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f040 8161 	bne.w	8002e58 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d152      	bne.n	8002c46 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb0:	81fb      	strh	r3, [r7, #14]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	89fb      	ldrh	r3, [r7, #14]
 8002bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3328      	adds	r3, #40	; 0x28
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3302      	adds	r3, #2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	441a      	add	r2, r3
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c04:	2100      	movs	r1, #0
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f005 fdf9 	bl	80087fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 829b 	beq.w	8003150 <PCD_EP_ISR_Handler+0x5e4>
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 8296 	bne.w	8003150 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b292      	uxth	r2, r2
 8002c38:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c44:	e284      	b.n	8003150 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d034      	beq.n	8002cca <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	3306      	adds	r3, #6
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	f004 f9a1 	bl	8006fe6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	823b      	strh	r3, [r7, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	8a3a      	ldrh	r2, [r7, #16]
 8002cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f005 fd6e 	bl	80087a4 <HAL_PCD_SetupStageCallback>
 8002cc8:	e242      	b.n	8003150 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f280 823e 	bge.w	8003150 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	83bb      	strh	r3, [r7, #28]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	8bba      	ldrh	r2, [r7, #28]
 8002cea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cee:	b292      	uxth	r2, r2
 8002cf0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	3306      	adds	r3, #6
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d019      	beq.n	8002d5a <PCD_EP_ISR_Handler+0x1ee>
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d015      	beq.n	8002d5a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	6959      	ldr	r1, [r3, #20]
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f004 f951 	bl	8006fe6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	695a      	ldr	r2, [r3, #20]
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	441a      	add	r2, r3
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d52:	2100      	movs	r1, #0
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f005 fd37 	bl	80087c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 81f2 	bne.w	8003150 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4413      	add	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d112      	bne.n	8002dba <PCD_EP_ISR_Handler+0x24e>
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	801a      	strh	r2, [r3, #0]
 8002db8:	e02f      	b.n	8002e1a <PCD_EP_ISR_Handler+0x2ae>
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8002dc0:	d813      	bhi.n	8002dea <PCD_EP_ISR_Handler+0x27e>
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <PCD_EP_ISR_Handler+0x270>
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	3301      	adds	r3, #1
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	029b      	lsls	r3, r3, #10
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	801a      	strh	r2, [r3, #0]
 8002de8:	e017      	b.n	8002e1a <PCD_EP_ISR_Handler+0x2ae>
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <PCD_EP_ISR_Handler+0x298>
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	3b01      	subs	r3, #1
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	029b      	lsls	r3, r3, #10
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2a:	827b      	strh	r3, [r7, #18]
 8002e2c:	8a7b      	ldrh	r3, [r7, #18]
 8002e2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e32:	827b      	strh	r3, [r7, #18]
 8002e34:	8a7b      	ldrh	r3, [r7, #18]
 8002e36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e3a:	827b      	strh	r3, [r7, #18]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	8a7b      	ldrh	r3, [r7, #18]
 8002e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	8013      	strh	r3, [r2, #0]
 8002e56:	e17b      	b.n	8003150 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e6a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f280 80ea 	bge.w	8003048 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	853b      	strh	r3, [r7, #40]	; 0x28
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ea2:	b292      	uxth	r2, r2
 8002ea4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ea6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	7b1b      	ldrb	r3, [r3, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d122      	bne.n	8002f0a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3306      	adds	r3, #6
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eec:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002eee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8087 	beq.w	8003004 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	6959      	ldr	r1, [r3, #20]
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	88da      	ldrh	r2, [r3, #6]
 8002f02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f04:	f004 f86f 	bl	8006fe6 <USB_ReadPMA>
 8002f08:	e07c      	b.n	8003004 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	78db      	ldrb	r3, [r3, #3]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d108      	bne.n	8002f24 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f14:	461a      	mov	r2, r3
 8002f16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f927 	bl	800316c <HAL_PCD_EP_DB_Receive>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002f22:	e06f      	b.n	8003004 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	441a      	add	r2, r3
 8002f4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d021      	beq.n	8002fc2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	3302      	adds	r3, #2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002fa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d02a      	beq.n	8003004 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	6959      	ldr	r1, [r3, #20]
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	891a      	ldrh	r2, [r3, #8]
 8002fba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fbc:	f004 f813 	bl	8006fe6 <USB_ReadPMA>
 8002fc0:	e020      	b.n	8003004 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3306      	adds	r3, #6
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fea:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002fec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	6959      	ldr	r1, [r3, #20]
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	895a      	ldrh	r2, [r3, #10]
 8002ffe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003000:	f003 fff1 	bl	8006fe6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	69da      	ldr	r2, [r3, #28]
 8003008:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800300a:	441a      	add	r2, r3
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003016:	441a      	add	r2, r3
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <PCD_EP_ISR_Handler+0x4c2>
 8003024:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	429a      	cmp	r2, r3
 800302c:	d206      	bcs.n	800303c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f005 fbc7 	bl	80087c8 <HAL_PCD_DataOutStageCallback>
 800303a:	e005      	b.n	8003048 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003042:	4618      	mov	r0, r3
 8003044:	f002 f814 	bl	8005070 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003048:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d07e      	beq.n	8003150 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003052:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800307c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003080:	843b      	strh	r3, [r7, #32]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	441a      	add	r2, r3
 8003090:	8c3b      	ldrh	r3, [r7, #32]
 8003092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800309a:	b29b      	uxth	r3, r3
 800309c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	78db      	ldrb	r3, [r3, #3]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d00c      	beq.n	80030c0 <PCD_EP_ISR_Handler+0x554>
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	78db      	ldrb	r3, [r3, #3]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d146      	bne.n	8003144 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80030b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d141      	bne.n	8003144 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	3302      	adds	r3, #2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	8bfb      	ldrh	r3, [r7, #30]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d906      	bls.n	8003102 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	8bfb      	ldrh	r3, [r7, #30]
 80030fa:	1ad2      	subs	r2, r2, r3
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	619a      	str	r2, [r3, #24]
 8003100:	e002      	b.n	8003108 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	2200      	movs	r2, #0
 8003106:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	4619      	mov	r1, r3
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f005 fb71 	bl	80087fe <HAL_PCD_DataInStageCallback>
 800311c:	e018      	b.n	8003150 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	8bfb      	ldrh	r3, [r7, #30]
 8003124:	441a      	add	r2, r3
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	8bfb      	ldrh	r3, [r7, #30]
 8003130:	441a      	add	r2, r3
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800313c:	4618      	mov	r0, r3
 800313e:	f001 ff97 	bl	8005070 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003142:	e005      	b.n	8003150 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003144:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003146:	461a      	mov	r2, r3
 8003148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f91b 	bl	8003386 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003158:	b29b      	uxth	r3, r3
 800315a:	b21b      	sxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	f6ff ad0a 	blt.w	8002b76 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3738      	adds	r7, #56	; 0x38
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d07e      	beq.n	8003282 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800318c:	b29b      	uxth	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	3302      	adds	r3, #2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	8b7b      	ldrh	r3, [r7, #26]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d306      	bcc.n	80031c6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	699a      	ldr	r2, [r3, #24]
 80031bc:	8b7b      	ldrh	r3, [r7, #26]
 80031be:	1ad2      	subs	r2, r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	619a      	str	r2, [r3, #24]
 80031c4:	e002      	b.n	80031cc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2200      	movs	r2, #0
 80031ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d123      	bne.n	800321c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	833b      	strh	r3, [r7, #24]
 80031f0:	8b3b      	ldrh	r3, [r7, #24]
 80031f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031f6:	833b      	strh	r3, [r7, #24]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	441a      	add	r2, r3
 8003206:	8b3b      	ldrh	r3, [r7, #24]
 8003208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003218:	b29b      	uxth	r3, r3
 800321a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01f      	beq.n	8003266 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003240:	82fb      	strh	r3, [r7, #22]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	441a      	add	r2, r3
 8003250:	8afb      	ldrh	r3, [r7, #22]
 8003252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800325a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800325e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003262:	b29b      	uxth	r3, r3
 8003264:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003266:	8b7b      	ldrh	r3, [r7, #26]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8087 	beq.w	800337c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6959      	ldr	r1, [r3, #20]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	891a      	ldrh	r2, [r3, #8]
 800327a:	8b7b      	ldrh	r3, [r7, #26]
 800327c:	f003 feb3 	bl	8006fe6 <USB_ReadPMA>
 8003280:	e07c      	b.n	800337c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800328a:	b29b      	uxth	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	3306      	adds	r3, #6
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	8b7b      	ldrh	r3, [r7, #26]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d306      	bcc.n	80032c4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	8b7b      	ldrh	r3, [r7, #26]
 80032bc:	1ad2      	subs	r2, r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	619a      	str	r2, [r3, #24]
 80032c2:	e002      	b.n	80032ca <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d123      	bne.n	800331a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ec:	83fb      	strh	r3, [r7, #30]
 80032ee:	8bfb      	ldrh	r3, [r7, #30]
 80032f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032f4:	83fb      	strh	r3, [r7, #30]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	441a      	add	r2, r3
 8003304:	8bfb      	ldrh	r3, [r7, #30]
 8003306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800330a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800330e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003316:	b29b      	uxth	r3, r3
 8003318:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11f      	bne.n	8003364 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333e:	83bb      	strh	r3, [r7, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	8bbb      	ldrh	r3, [r7, #28]
 8003350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003360:	b29b      	uxth	r3, r3
 8003362:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003364:	8b7b      	ldrh	r3, [r7, #26]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	6959      	ldr	r1, [r3, #20]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	895a      	ldrh	r2, [r3, #10]
 8003376:	8b7b      	ldrh	r3, [r7, #26]
 8003378:	f003 fe35 	bl	8006fe6 <USB_ReadPMA>
    }
  }

  return count;
 800337c:	8b7b      	ldrh	r3, [r7, #26]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b0a2      	sub	sp, #136	; 0x88
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	4613      	mov	r3, r2
 8003392:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 81c7 	beq.w	800372e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	3302      	adds	r3, #2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d907      	bls.n	80033e8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033e0:	1ad2      	subs	r2, r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	619a      	str	r2, [r3, #24]
 80033e6:	e002      	b.n	80033ee <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2200      	movs	r2, #0
 80033ec:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 80b9 	bne.w	800356a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d126      	bne.n	800344e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	4413      	add	r3, r2
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	011a      	lsls	r2, r3, #4
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	4413      	add	r3, r2
 8003422:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	b29b      	uxth	r3, r3
 800342e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003432:	b29a      	uxth	r2, r3
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	801a      	strh	r2, [r3, #0]
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003446:	b29a      	uxth	r2, r3
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	801a      	strh	r2, [r3, #0]
 800344c:	e01a      	b.n	8003484 <HAL_PCD_EP_DB_Transmit+0xfe>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	785b      	ldrb	r3, [r3, #1]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d116      	bne.n	8003484 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	633b      	str	r3, [r7, #48]	; 0x30
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003464:	b29b      	uxth	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	4413      	add	r3, r2
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	011a      	lsls	r2, r3, #4
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	4413      	add	r3, r2
 8003478:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	2200      	movs	r2, #0
 8003482:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	623b      	str	r3, [r7, #32]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	785b      	ldrb	r3, [r3, #1]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d126      	bne.n	80034e0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	4413      	add	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	011a      	lsls	r2, r3, #4
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	4413      	add	r3, r2
 80034b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	801a      	strh	r2, [r3, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d8:	b29a      	uxth	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	801a      	strh	r2, [r3, #0]
 80034de:	e017      	b.n	8003510 <HAL_PCD_EP_DB_Transmit+0x18a>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	785b      	ldrb	r3, [r3, #1]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d113      	bne.n	8003510 <HAL_PCD_EP_DB_Transmit+0x18a>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	4413      	add	r3, r2
 80034f8:	623b      	str	r3, [r7, #32]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	011a      	lsls	r2, r3, #4
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	4413      	add	r3, r2
 8003504:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	2200      	movs	r2, #0
 800350e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	4619      	mov	r1, r3
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f005 f971 	bl	80087fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 82d4 	beq.w	8003ad0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	827b      	strh	r3, [r7, #18]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	8a7b      	ldrh	r3, [r7, #18]
 8003554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003564:	b29b      	uxth	r3, r3
 8003566:	8013      	strh	r3, [r2, #0]
 8003568:	e2b2      	b.n	8003ad0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d021      	beq.n	80035b8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	b29b      	uxth	r3, r3
 8003586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	441a      	add	r2, r3
 80035a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035be:	2b01      	cmp	r3, #1
 80035c0:	f040 8286 	bne.w	8003ad0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035cc:	441a      	add	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035da:	441a      	add	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	6a1a      	ldr	r2, [r3, #32]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d309      	bcc.n	8003600 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6a1a      	ldr	r2, [r3, #32]
 80035f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f8:	1ad2      	subs	r2, r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	621a      	str	r2, [r3, #32]
 80035fe:	e015      	b.n	800362c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003608:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800360c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003616:	e009      	b.n	800362c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2200      	movs	r2, #0
 800362a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	785b      	ldrb	r3, [r3, #1]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d155      	bne.n	80036e0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	63bb      	str	r3, [r7, #56]	; 0x38
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003642:	b29b      	uxth	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	4413      	add	r3, r2
 800364a:	63bb      	str	r3, [r7, #56]	; 0x38
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	011a      	lsls	r2, r3, #4
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	4413      	add	r3, r2
 8003656:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800365a:	637b      	str	r3, [r7, #52]	; 0x34
 800365c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365e:	2b00      	cmp	r3, #0
 8003660:	d112      	bne.n	8003688 <HAL_PCD_EP_DB_Transmit+0x302>
 8003662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800366c:	b29a      	uxth	r2, r3
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	801a      	strh	r2, [r3, #0]
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800367c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003680:	b29a      	uxth	r2, r3
 8003682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003684:	801a      	strh	r2, [r3, #0]
 8003686:	e047      	b.n	8003718 <HAL_PCD_EP_DB_Transmit+0x392>
 8003688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368a:	2b3e      	cmp	r3, #62	; 0x3e
 800368c:	d811      	bhi.n	80036b2 <HAL_PCD_EP_DB_Transmit+0x32c>
 800368e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	64bb      	str	r3, [r7, #72]	; 0x48
 8003694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x31e>
 800369e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a0:	3301      	adds	r3, #1
 80036a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	029b      	lsls	r3, r3, #10
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ae:	801a      	strh	r2, [r3, #0]
 80036b0:	e032      	b.n	8003718 <HAL_PCD_EP_DB_Transmit+0x392>
 80036b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <HAL_PCD_EP_DB_Transmit+0x342>
 80036c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c4:	3b01      	subs	r3, #1
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	029b      	lsls	r3, r3, #10
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036d8:	b29a      	uxth	r2, r3
 80036da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036dc:	801a      	strh	r2, [r3, #0]
 80036de:	e01b      	b.n	8003718 <HAL_PCD_EP_DB_Transmit+0x392>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d117      	bne.n	8003718 <HAL_PCD_EP_DB_Transmit+0x392>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	643b      	str	r3, [r7, #64]	; 0x40
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036fc:	4413      	add	r3, r2
 80036fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	011a      	lsls	r2, r3, #4
 8003706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003708:	4413      	add	r3, r2
 800370a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003712:	b29a      	uxth	r2, r3
 8003714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003716:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	6959      	ldr	r1, [r3, #20]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	891a      	ldrh	r2, [r3, #8]
 8003724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003726:	b29b      	uxth	r3, r3
 8003728:	f003 fc18 	bl	8006f5c <USB_WritePMA>
 800372c:	e1d0      	b.n	8003ad0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003736:	b29b      	uxth	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	3306      	adds	r3, #6
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003756:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003762:	429a      	cmp	r2, r3
 8003764:	d307      	bcc.n	8003776 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800376e:	1ad2      	subs	r2, r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	619a      	str	r2, [r3, #24]
 8003774:	e002      	b.n	800377c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f040 80c4 	bne.w	800390e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	785b      	ldrb	r3, [r3, #1]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d126      	bne.n	80037dc <HAL_PCD_EP_DB_Transmit+0x456>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379c:	b29b      	uxth	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a2:	4413      	add	r3, r2
 80037a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	011a      	lsls	r2, r3, #4
 80037ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ae:	4413      	add	r3, r2
 80037b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80037b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037c4:	801a      	strh	r2, [r3, #0]
 80037c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	e01a      	b.n	8003812 <HAL_PCD_EP_DB_Transmit+0x48c>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	785b      	ldrb	r3, [r3, #1]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d116      	bne.n	8003812 <HAL_PCD_EP_DB_Transmit+0x48c>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	677b      	str	r3, [r7, #116]	; 0x74
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f8:	4413      	add	r3, r2
 80037fa:	677b      	str	r3, [r7, #116]	; 0x74
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	011a      	lsls	r2, r3, #4
 8003802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003804:	4413      	add	r3, r2
 8003806:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800380a:	673b      	str	r3, [r7, #112]	; 0x70
 800380c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800380e:	2200      	movs	r2, #0
 8003810:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	67bb      	str	r3, [r7, #120]	; 0x78
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	785b      	ldrb	r3, [r3, #1]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d12f      	bne.n	8003880 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003830:	b29b      	uxth	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003838:	4413      	add	r3, r2
 800383a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	011a      	lsls	r2, r3, #4
 8003844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003848:	4413      	add	r3, r2
 800384a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800384e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003852:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800385e:	b29a      	uxth	r2, r3
 8003860:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003864:	801a      	strh	r2, [r3, #0]
 8003866:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29b      	uxth	r3, r3
 800386e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003876:	b29a      	uxth	r2, r3
 8003878:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800387c:	801a      	strh	r2, [r3, #0]
 800387e:	e017      	b.n	80038b0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	785b      	ldrb	r3, [r3, #1]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d113      	bne.n	80038b0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003890:	b29b      	uxth	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003896:	4413      	add	r3, r2
 8003898:	67bb      	str	r3, [r7, #120]	; 0x78
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	011a      	lsls	r2, r3, #4
 80038a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a2:	4413      	add	r3, r2
 80038a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038ac:	2200      	movs	r2, #0
 80038ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	4619      	mov	r1, r3
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f004 ffa1 	bl	80087fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f040 8104 	bne.w	8003ad0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	441a      	add	r2, r3
 80038f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80038f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003908:	b29b      	uxth	r3, r3
 800390a:	8013      	strh	r3, [r2, #0]
 800390c:	e0e0      	b.n	8003ad0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d121      	bne.n	800395c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	441a      	add	r2, r3
 8003944:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800394c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003950:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003958:	b29b      	uxth	r3, r3
 800395a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003962:	2b01      	cmp	r3, #1
 8003964:	f040 80b4 	bne.w	8003ad0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003970:	441a      	add	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800397e:	441a      	add	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	429a      	cmp	r2, r3
 800398e:	d309      	bcc.n	80039a4 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6a1a      	ldr	r2, [r3, #32]
 800399a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800399c:	1ad2      	subs	r2, r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	621a      	str	r2, [r3, #32]
 80039a2:	e015      	b.n	80039d0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80039ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039ba:	e009      	b.n	80039d0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2200      	movs	r2, #0
 80039c6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	667b      	str	r3, [r7, #100]	; 0x64
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d155      	bne.n	8003a8a <HAL_PCD_EP_DB_Transmit+0x704>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f2:	4413      	add	r3, r2
 80039f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	011a      	lsls	r2, r3, #4
 80039fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fe:	4413      	add	r3, r2
 8003a00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a04:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d112      	bne.n	8003a32 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a1a:	801a      	strh	r2, [r3, #0]
 8003a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a2e:	801a      	strh	r2, [r3, #0]
 8003a30:	e044      	b.n	8003abc <HAL_PCD_EP_DB_Transmit+0x736>
 8003a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a34:	2b3e      	cmp	r3, #62	; 0x3e
 8003a36:	d811      	bhi.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a3a:	085b      	lsrs	r3, r3, #1
 8003a3c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	029b      	lsls	r3, r3, #10
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a58:	801a      	strh	r2, [r3, #0]
 8003a5a:	e02f      	b.n	8003abc <HAL_PCD_EP_DB_Transmit+0x736>
 8003a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	657b      	str	r3, [r7, #84]	; 0x54
 8003a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d102      	bne.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	657b      	str	r3, [r7, #84]	; 0x54
 8003a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	029b      	lsls	r3, r3, #10
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a86:	801a      	strh	r2, [r3, #0]
 8003a88:	e018      	b.n	8003abc <HAL_PCD_EP_DB_Transmit+0x736>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	785b      	ldrb	r3, [r3, #1]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d114      	bne.n	8003abc <HAL_PCD_EP_DB_Transmit+0x736>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aa0:	4413      	add	r3, r2
 8003aa2:	667b      	str	r3, [r7, #100]	; 0x64
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	011a      	lsls	r2, r3, #4
 8003aaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aac:	4413      	add	r3, r2
 8003aae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ab2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6959      	ldr	r1, [r3, #20]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	895a      	ldrh	r2, [r3, #10]
 8003ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f003 fa46 	bl	8006f5c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aea:	823b      	strh	r3, [r7, #16]
 8003aec:	8a3b      	ldrh	r3, [r7, #16]
 8003aee:	f083 0310 	eor.w	r3, r3, #16
 8003af2:	823b      	strh	r3, [r7, #16]
 8003af4:	8a3b      	ldrh	r3, [r7, #16]
 8003af6:	f083 0320 	eor.w	r3, r3, #32
 8003afa:	823b      	strh	r3, [r7, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	441a      	add	r2, r3
 8003b0a:	8a3b      	ldrh	r3, [r7, #16]
 8003b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3788      	adds	r7, #136	; 0x88
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b087      	sub	sp, #28
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	817b      	strh	r3, [r7, #10]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003b3c:	897b      	ldrh	r3, [r7, #10]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00b      	beq.n	8003b60 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b48:	897b      	ldrh	r3, [r7, #10]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e009      	b.n	8003b74 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b60:	897a      	ldrh	r2, [r7, #10]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4413      	add	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b74:	893b      	ldrh	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d107      	bne.n	8003b8a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	80da      	strh	r2, [r3, #6]
 8003b88:	e00b      	b.n	8003ba2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	0c1b      	lsrs	r3, r3, #16
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e272      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8087 	beq.w	8003cde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bd0:	4b92      	ldr	r3, [pc, #584]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d00c      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bdc:	4b8f      	ldr	r3, [pc, #572]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d112      	bne.n	8003c0e <HAL_RCC_OscConfig+0x5e>
 8003be8:	4b8c      	ldr	r3, [pc, #560]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d10b      	bne.n	8003c0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf6:	4b89      	ldr	r3, [pc, #548]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d06c      	beq.n	8003cdc <HAL_RCC_OscConfig+0x12c>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d168      	bne.n	8003cdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e24c      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c16:	d106      	bne.n	8003c26 <HAL_RCC_OscConfig+0x76>
 8003c18:	4b80      	ldr	r3, [pc, #512]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a7f      	ldr	r2, [pc, #508]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	e02e      	b.n	8003c84 <HAL_RCC_OscConfig+0xd4>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x98>
 8003c2e:	4b7b      	ldr	r3, [pc, #492]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a7a      	ldr	r2, [pc, #488]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b78      	ldr	r3, [pc, #480]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a77      	ldr	r2, [pc, #476]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e01d      	b.n	8003c84 <HAL_RCC_OscConfig+0xd4>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0xbc>
 8003c52:	4b72      	ldr	r3, [pc, #456]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a71      	ldr	r2, [pc, #452]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	4b6f      	ldr	r3, [pc, #444]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a6e      	ldr	r2, [pc, #440]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0xd4>
 8003c6c:	4b6b      	ldr	r3, [pc, #428]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a6a      	ldr	r2, [pc, #424]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	4b68      	ldr	r3, [pc, #416]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a67      	ldr	r2, [pc, #412]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d013      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7fe f9a8 	bl	8001fe0 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fe f9a4 	bl	8001fe0 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e200      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	4b5d      	ldr	r3, [pc, #372]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0xe4>
 8003cb2:	e014      	b.n	8003cde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fe f994 	bl	8001fe0 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cbc:	f7fe f990 	bl	8001fe0 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e1ec      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cce:	4b53      	ldr	r3, [pc, #332]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x10c>
 8003cda:	e000      	b.n	8003cde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d063      	beq.n	8003db2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cea:	4b4c      	ldr	r3, [pc, #304]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cf6:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d11c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x18c>
 8003d02:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d116      	bne.n	8003d3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0e:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_RCC_OscConfig+0x176>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d001      	beq.n	8003d26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e1c0      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	4b3d      	ldr	r3, [pc, #244]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4939      	ldr	r1, [pc, #228]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3a:	e03a      	b.n	8003db2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d020      	beq.n	8003d86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d44:	4b36      	ldr	r3, [pc, #216]	; (8003e20 <HAL_RCC_OscConfig+0x270>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fe f949 	bl	8001fe0 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fe f945 	bl	8001fe0 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e1a1      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d64:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d70:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4927      	ldr	r1, [pc, #156]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]
 8003d84:	e015      	b.n	8003db2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d86:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <HAL_RCC_OscConfig+0x270>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fe f928 	bl	8001fe0 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d94:	f7fe f924 	bl	8001fe0 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e180      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da6:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d03a      	beq.n	8003e34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d019      	beq.n	8003dfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc6:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dcc:	f7fe f908 	bl	8001fe0 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd4:	f7fe f904 	bl	8001fe0 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e160      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <HAL_RCC_OscConfig+0x26c>)
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003df2:	2001      	movs	r0, #1
 8003df4:	f000 faa6 	bl	8004344 <RCC_Delay>
 8003df8:	e01c      	b.n	8003e34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <HAL_RCC_OscConfig+0x274>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e00:	f7fe f8ee 	bl	8001fe0 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e06:	e00f      	b.n	8003e28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e08:	f7fe f8ea 	bl	8001fe0 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d908      	bls.n	8003e28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e146      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	42420000 	.word	0x42420000
 8003e24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	4b92      	ldr	r3, [pc, #584]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e9      	bne.n	8003e08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a6 	beq.w	8003f8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e46:	4b8b      	ldr	r3, [pc, #556]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10d      	bne.n	8003e6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e52:	4b88      	ldr	r3, [pc, #544]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	4a87      	ldr	r2, [pc, #540]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	61d3      	str	r3, [r2, #28]
 8003e5e:	4b85      	ldr	r3, [pc, #532]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	4b82      	ldr	r3, [pc, #520]	; (8004078 <HAL_RCC_OscConfig+0x4c8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d118      	bne.n	8003eac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7a:	4b7f      	ldr	r3, [pc, #508]	; (8004078 <HAL_RCC_OscConfig+0x4c8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a7e      	ldr	r2, [pc, #504]	; (8004078 <HAL_RCC_OscConfig+0x4c8>)
 8003e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e86:	f7fe f8ab 	bl	8001fe0 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8e:	f7fe f8a7 	bl	8001fe0 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b64      	cmp	r3, #100	; 0x64
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e103      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	4b75      	ldr	r3, [pc, #468]	; (8004078 <HAL_RCC_OscConfig+0x4c8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d106      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x312>
 8003eb4:	4b6f      	ldr	r3, [pc, #444]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	4a6e      	ldr	r2, [pc, #440]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6213      	str	r3, [r2, #32]
 8003ec0:	e02d      	b.n	8003f1e <HAL_RCC_OscConfig+0x36e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x334>
 8003eca:	4b6a      	ldr	r3, [pc, #424]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	4a69      	ldr	r2, [pc, #420]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	6213      	str	r3, [r2, #32]
 8003ed6:	4b67      	ldr	r3, [pc, #412]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	4a66      	ldr	r2, [pc, #408]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003edc:	f023 0304 	bic.w	r3, r3, #4
 8003ee0:	6213      	str	r3, [r2, #32]
 8003ee2:	e01c      	b.n	8003f1e <HAL_RCC_OscConfig+0x36e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b05      	cmp	r3, #5
 8003eea:	d10c      	bne.n	8003f06 <HAL_RCC_OscConfig+0x356>
 8003eec:	4b61      	ldr	r3, [pc, #388]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	4a60      	ldr	r2, [pc, #384]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003ef2:	f043 0304 	orr.w	r3, r3, #4
 8003ef6:	6213      	str	r3, [r2, #32]
 8003ef8:	4b5e      	ldr	r3, [pc, #376]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	4a5d      	ldr	r2, [pc, #372]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6213      	str	r3, [r2, #32]
 8003f04:	e00b      	b.n	8003f1e <HAL_RCC_OscConfig+0x36e>
 8003f06:	4b5b      	ldr	r3, [pc, #364]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	4a5a      	ldr	r2, [pc, #360]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	6213      	str	r3, [r2, #32]
 8003f12:	4b58      	ldr	r3, [pc, #352]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	4a57      	ldr	r2, [pc, #348]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003f18:	f023 0304 	bic.w	r3, r3, #4
 8003f1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d015      	beq.n	8003f52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f26:	f7fe f85b 	bl	8001fe0 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2e:	f7fe f857 	bl	8001fe0 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0b1      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f44:	4b4b      	ldr	r3, [pc, #300]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0ee      	beq.n	8003f2e <HAL_RCC_OscConfig+0x37e>
 8003f50:	e014      	b.n	8003f7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f52:	f7fe f845 	bl	8001fe0 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f58:	e00a      	b.n	8003f70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5a:	f7fe f841 	bl	8001fe0 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e09b      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f70:	4b40      	ldr	r3, [pc, #256]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ee      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d105      	bne.n	8003f8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f82:	4b3c      	ldr	r3, [pc, #240]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	4a3b      	ldr	r2, [pc, #236]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8087 	beq.w	80040a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f98:	4b36      	ldr	r3, [pc, #216]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 030c 	and.w	r3, r3, #12
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d061      	beq.n	8004068 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d146      	bne.n	800403a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fac:	4b33      	ldr	r3, [pc, #204]	; (800407c <HAL_RCC_OscConfig+0x4cc>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb2:	f7fe f815 	bl	8001fe0 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fe f811 	bl	8001fe0 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e06d      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fcc:	4b29      	ldr	r3, [pc, #164]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe0:	d108      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	4921      	ldr	r1, [pc, #132]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ff4:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a19      	ldr	r1, [r3, #32]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	430b      	orrs	r3, r1
 8004006:	491b      	ldr	r1, [pc, #108]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_OscConfig+0x4cc>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7fd ffe5 	bl	8001fe0 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401a:	f7fd ffe1 	bl	8001fe0 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e03d      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800402c:	4b11      	ldr	r3, [pc, #68]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x46a>
 8004038:	e035      	b.n	80040a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403a:	4b10      	ldr	r3, [pc, #64]	; (800407c <HAL_RCC_OscConfig+0x4cc>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fd ffce 	bl	8001fe0 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd ffca 	bl	8001fe0 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e026      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <HAL_RCC_OscConfig+0x4c4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x498>
 8004066:	e01e      	b.n	80040a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d107      	bne.n	8004080 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e019      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
 8004074:	40021000 	.word	0x40021000
 8004078:	40007000 	.word	0x40007000
 800407c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_RCC_OscConfig+0x500>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	429a      	cmp	r2, r3
 8004092:	d106      	bne.n	80040a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40021000 	.word	0x40021000

080040b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0d0      	b.n	800426a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b6a      	ldr	r3, [pc, #424]	; (8004274 <HAL_RCC_ClockConfig+0x1c0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d910      	bls.n	80040f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b67      	ldr	r3, [pc, #412]	; (8004274 <HAL_RCC_ClockConfig+0x1c0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 0207 	bic.w	r2, r3, #7
 80040de:	4965      	ldr	r1, [pc, #404]	; (8004274 <HAL_RCC_ClockConfig+0x1c0>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b63      	ldr	r3, [pc, #396]	; (8004274 <HAL_RCC_ClockConfig+0x1c0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0b8      	b.n	800426a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d020      	beq.n	8004146 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004110:	4b59      	ldr	r3, [pc, #356]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4a58      	ldr	r2, [pc, #352]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800411a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004128:	4b53      	ldr	r3, [pc, #332]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4a52      	ldr	r2, [pc, #328]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004132:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004134:	4b50      	ldr	r3, [pc, #320]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	494d      	ldr	r1, [pc, #308]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	4313      	orrs	r3, r2
 8004144:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d040      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d107      	bne.n	800416a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	4b47      	ldr	r3, [pc, #284]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d115      	bne.n	8004192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e07f      	b.n	800426a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d107      	bne.n	8004182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004172:	4b41      	ldr	r3, [pc, #260]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e073      	b.n	800426a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004182:	4b3d      	ldr	r3, [pc, #244]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e06b      	b.n	800426a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004192:	4b39      	ldr	r3, [pc, #228]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f023 0203 	bic.w	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	4936      	ldr	r1, [pc, #216]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041a4:	f7fd ff1c 	bl	8001fe0 <HAL_GetTick>
 80041a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041aa:	e00a      	b.n	80041c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ac:	f7fd ff18 	bl	8001fe0 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e053      	b.n	800426a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	4b2d      	ldr	r3, [pc, #180]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f003 020c 	and.w	r2, r3, #12
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d1eb      	bne.n	80041ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041d4:	4b27      	ldr	r3, [pc, #156]	; (8004274 <HAL_RCC_ClockConfig+0x1c0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d210      	bcs.n	8004204 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b24      	ldr	r3, [pc, #144]	; (8004274 <HAL_RCC_ClockConfig+0x1c0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 0207 	bic.w	r2, r3, #7
 80041ea:	4922      	ldr	r1, [pc, #136]	; (8004274 <HAL_RCC_ClockConfig+0x1c0>)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f2:	4b20      	ldr	r3, [pc, #128]	; (8004274 <HAL_RCC_ClockConfig+0x1c0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e032      	b.n	800426a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004210:	4b19      	ldr	r3, [pc, #100]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4916      	ldr	r1, [pc, #88]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 800421e:	4313      	orrs	r3, r2
 8004220:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800422e:	4b12      	ldr	r3, [pc, #72]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	490e      	ldr	r1, [pc, #56]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004242:	f000 f821 	bl	8004288 <HAL_RCC_GetSysClockFreq>
 8004246:	4602      	mov	r2, r0
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	490a      	ldr	r1, [pc, #40]	; (800427c <HAL_RCC_ClockConfig+0x1c8>)
 8004254:	5ccb      	ldrb	r3, [r1, r3]
 8004256:	fa22 f303 	lsr.w	r3, r2, r3
 800425a:	4a09      	ldr	r2, [pc, #36]	; (8004280 <HAL_RCC_ClockConfig+0x1cc>)
 800425c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_RCC_ClockConfig+0x1d0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fe7a 	bl	8001f5c <HAL_InitTick>

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40022000 	.word	0x40022000
 8004278:	40021000 	.word	0x40021000
 800427c:	08008fc8 	.word	0x08008fc8
 8004280:	20000500 	.word	0x20000500
 8004284:	20000504 	.word	0x20000504

08004288 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004288:	b490      	push	{r4, r7}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800428e:	4b29      	ldr	r3, [pc, #164]	; (8004334 <HAL_RCC_GetSysClockFreq+0xac>)
 8004290:	1d3c      	adds	r4, r7, #4
 8004292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004298:	f240 2301 	movw	r3, #513	; 0x201
 800429c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	2300      	movs	r3, #0
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042b2:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_RCC_GetSysClockFreq+0xb0>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d002      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x40>
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d003      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x46>
 80042c6:	e02b      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042c8:	4b1c      	ldr	r3, [pc, #112]	; (800433c <HAL_RCC_GetSysClockFreq+0xb4>)
 80042ca:	623b      	str	r3, [r7, #32]
      break;
 80042cc:	e02b      	b.n	8004326 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	0c9b      	lsrs	r3, r3, #18
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	3328      	adds	r3, #40	; 0x28
 80042d8:	443b      	add	r3, r7
 80042da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042de:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d012      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042ea:	4b13      	ldr	r3, [pc, #76]	; (8004338 <HAL_RCC_GetSysClockFreq+0xb0>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	0c5b      	lsrs	r3, r3, #17
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	3328      	adds	r3, #40	; 0x28
 80042f6:	443b      	add	r3, r7
 80042f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	4a0e      	ldr	r2, [pc, #56]	; (800433c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004302:	fb03 f202 	mul.w	r2, r3, r2
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	e004      	b.n	800431a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	623b      	str	r3, [r7, #32]
      break;
 800431e:	e002      	b.n	8004326 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004322:	623b      	str	r3, [r7, #32]
      break;
 8004324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004326:	6a3b      	ldr	r3, [r7, #32]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3728      	adds	r7, #40	; 0x28
 800432c:	46bd      	mov	sp, r7
 800432e:	bc90      	pop	{r4, r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	08008e48 	.word	0x08008e48
 8004338:	40021000 	.word	0x40021000
 800433c:	007a1200 	.word	0x007a1200
 8004340:	003d0900 	.word	0x003d0900

08004344 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <RCC_Delay+0x34>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0a      	ldr	r2, [pc, #40]	; (800437c <RCC_Delay+0x38>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	0a5b      	lsrs	r3, r3, #9
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004360:	bf00      	nop
  }
  while (Delay --);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1e5a      	subs	r2, r3, #1
 8004366:	60fa      	str	r2, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f9      	bne.n	8004360 <RCC_Delay+0x1c>
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	20000500 	.word	0x20000500
 800437c:	10624dd3 	.word	0x10624dd3

08004380 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d07d      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800439c:	2300      	movs	r3, #0
 800439e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a0:	4b4f      	ldr	r3, [pc, #316]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10d      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ac:	4b4c      	ldr	r3, [pc, #304]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	4a4b      	ldr	r2, [pc, #300]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b6:	61d3      	str	r3, [r2, #28]
 80043b8:	4b49      	ldr	r3, [pc, #292]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c4:	2301      	movs	r3, #1
 80043c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c8:	4b46      	ldr	r3, [pc, #280]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d118      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043d4:	4b43      	ldr	r3, [pc, #268]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a42      	ldr	r2, [pc, #264]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e0:	f7fd fdfe 	bl	8001fe0 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e6:	e008      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e8:	f7fd fdfa 	bl	8001fe0 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e06d      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fa:	4b3a      	ldr	r3, [pc, #232]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004406:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d02e      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	429a      	cmp	r2, r3
 8004422:	d027      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004424:	4b2e      	ldr	r3, [pc, #184]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800442e:	4b2e      	ldr	r3, [pc, #184]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004434:	4b2c      	ldr	r3, [pc, #176]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800443a:	4a29      	ldr	r2, [pc, #164]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d014      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444a:	f7fd fdc9 	bl	8001fe0 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004450:	e00a      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fd fdc5 	bl	8001fe0 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e036      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004468:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0ee      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004474:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4917      	ldr	r1, [pc, #92]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004482:	4313      	orrs	r3, r2
 8004484:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004486:	7dfb      	ldrb	r3, [r7, #23]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d105      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800448c:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004496:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	490b      	ldr	r1, [pc, #44]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044c2:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	4904      	ldr	r1, [pc, #16]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40007000 	.word	0x40007000
 80044e8:	42420440 	.word	0x42420440

080044ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044ec:	b084      	sub	sp, #16
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	f107 0014 	add.w	r0, r7, #20
 80044fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	b004      	add	sp, #16
 800450a:	4770      	bx	lr

0800450c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800451c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004520:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004540:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004544:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	b29b      	uxth	r3, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	b29b      	uxth	r3, r3
 8004556:	4013      	ands	r3, r2
 8004558:	b29a      	uxth	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004584:	b084      	sub	sp, #16
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	f107 0014 	add.w	r0, r7, #20
 8004592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	b004      	add	sp, #16
 80045c2:	4770      	bx	lr

080045c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b09b      	sub	sp, #108	; 0x6c
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	78db      	ldrb	r3, [r3, #3]
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d81f      	bhi.n	8004636 <USB_ActivateEndpoint+0x72>
 80045f6:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <USB_ActivateEndpoint+0x38>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	0800460d 	.word	0x0800460d
 8004600:	08004629 	.word	0x08004629
 8004604:	0800463f 	.word	0x0800463f
 8004608:	0800461b 	.word	0x0800461b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800460c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004614:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004618:	e012      	b.n	8004640 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800461a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800461e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004622:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004626:	e00b      	b.n	8004640 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004628:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800462c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004630:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004634:	e004      	b.n	8004640 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800463c:	e000      	b.n	8004640 <USB_ActivateEndpoint+0x7c>
      break;
 800463e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	441a      	add	r2, r3
 800464a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800464e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465e:	b29b      	uxth	r3, r3
 8004660:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004678:	b29a      	uxth	r2, r3
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	4313      	orrs	r3, r2
 8004682:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	441a      	add	r2, r3
 8004690:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	7b1b      	ldrb	r3, [r3, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f040 8149 	bne.w	8004944 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 8084 	beq.w	80047c4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	4413      	add	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	011a      	lsls	r2, r3, #4
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	88db      	ldrh	r3, [r3, #6]
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	81fb      	strh	r3, [r7, #14]
 80046fe:	89fb      	ldrh	r3, [r7, #14]
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01b      	beq.n	8004740 <USB_ActivateEndpoint+0x17c>
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	81bb      	strh	r3, [r7, #12]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	441a      	add	r2, r3
 800472a:	89bb      	ldrh	r3, [r7, #12]
 800472c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	78db      	ldrb	r3, [r3, #3]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d020      	beq.n	800478a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29b      	uxth	r3, r3
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475e:	813b      	strh	r3, [r7, #8]
 8004760:	893b      	ldrh	r3, [r7, #8]
 8004762:	f083 0320 	eor.w	r3, r3, #32
 8004766:	813b      	strh	r3, [r7, #8]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	441a      	add	r2, r3
 8004772:	893b      	ldrh	r3, [r7, #8]
 8004774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004784:	b29b      	uxth	r3, r3
 8004786:	8013      	strh	r3, [r2, #0]
 8004788:	e27f      	b.n	8004c8a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a0:	817b      	strh	r3, [r7, #10]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	441a      	add	r2, r3
 80047ac:	897b      	ldrh	r3, [r7, #10]
 80047ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]
 80047c2:	e262      	b.n	8004c8a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	4413      	add	r3, r2
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	011a      	lsls	r2, r3, #4
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	88db      	ldrh	r3, [r3, #6]
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004802:	b29b      	uxth	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	4413      	add	r3, r2
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	011a      	lsls	r2, r3, #4
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	4413      	add	r3, r2
 8004816:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800481a:	623b      	str	r3, [r7, #32]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d112      	bne.n	800484a <USB_ActivateEndpoint+0x286>
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800482e:	b29a      	uxth	r2, r3
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	801a      	strh	r2, [r3, #0]
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800483e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004842:	b29a      	uxth	r2, r3
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	801a      	strh	r2, [r3, #0]
 8004848:	e02f      	b.n	80048aa <USB_ActivateEndpoint+0x2e6>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b3e      	cmp	r3, #62	; 0x3e
 8004850:	d813      	bhi.n	800487a <USB_ActivateEndpoint+0x2b6>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	663b      	str	r3, [r7, #96]	; 0x60
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <USB_ActivateEndpoint+0x2a8>
 8004866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004868:	3301      	adds	r3, #1
 800486a:	663b      	str	r3, [r7, #96]	; 0x60
 800486c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800486e:	b29b      	uxth	r3, r3
 8004870:	029b      	lsls	r3, r3, #10
 8004872:	b29a      	uxth	r2, r3
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	e017      	b.n	80048aa <USB_ActivateEndpoint+0x2e6>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	663b      	str	r3, [r7, #96]	; 0x60
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <USB_ActivateEndpoint+0x2d0>
 800488e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004890:	3b01      	subs	r3, #1
 8004892:	663b      	str	r3, [r7, #96]	; 0x60
 8004894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004896:	b29b      	uxth	r3, r3
 8004898:	029b      	lsls	r3, r3, #10
 800489a:	b29b      	uxth	r3, r3
 800489c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	83fb      	strh	r3, [r7, #30]
 80048b8:	8bfb      	ldrh	r3, [r7, #30]
 80048ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d01b      	beq.n	80048fa <USB_ActivateEndpoint+0x336>
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d8:	83bb      	strh	r3, [r7, #28]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	441a      	add	r2, r3
 80048e4:	8bbb      	ldrh	r3, [r7, #28]
 80048e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800490c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004910:	837b      	strh	r3, [r7, #26]
 8004912:	8b7b      	ldrh	r3, [r7, #26]
 8004914:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004918:	837b      	strh	r3, [r7, #26]
 800491a:	8b7b      	ldrh	r3, [r7, #26]
 800491c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004920:	837b      	strh	r3, [r7, #26]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	8b7b      	ldrh	r3, [r7, #26]
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]
 8004942:	e1a2      	b.n	8004c8a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29b      	uxth	r3, r3
 8004952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	441a      	add	r2, r3
 8004968:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800496c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004974:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	b29b      	uxth	r3, r3
 800497e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	65bb      	str	r3, [r7, #88]	; 0x58
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800498a:	b29b      	uxth	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004990:	4413      	add	r3, r2
 8004992:	65bb      	str	r3, [r7, #88]	; 0x58
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	011a      	lsls	r2, r3, #4
 800499a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800499c:	4413      	add	r3, r2
 800499e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a2:	657b      	str	r3, [r7, #84]	; 0x54
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	891b      	ldrh	r3, [r3, #8]
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	653b      	str	r3, [r7, #80]	; 0x50
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c4:	4413      	add	r3, r2
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	011a      	lsls	r2, r3, #4
 80049ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	895b      	ldrh	r3, [r3, #10]
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	b29b      	uxth	r3, r3
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 8091 	bne.w	8004b14 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01b      	beq.n	8004a42 <USB_ActivateEndpoint+0x47e>
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a20:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d01b      	beq.n	8004a92 <USB_ActivateEndpoint+0x4ce>
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a70:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	441a      	add	r2, r3
 8004a7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004aaa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004aac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ab0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ab2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ab4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ab8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	441a      	add	r2, r3
 8004ac4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af0:	867b      	strh	r3, [r7, #50]	; 0x32
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	441a      	add	r2, r3
 8004afc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	8013      	strh	r3, [r2, #0]
 8004b12:	e0ba      	b.n	8004c8a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01d      	beq.n	8004b6c <USB_ActivateEndpoint+0x5a8>
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b46:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	441a      	add	r2, r3
 8004b54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004b7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01d      	beq.n	8004bc4 <USB_ActivateEndpoint+0x600>
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	78db      	ldrb	r3, [r3, #3]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d024      	beq.n	8004c16 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004be6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004bea:	f083 0320 	eor.w	r3, r3, #32
 8004bee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	441a      	add	r2, r3
 8004bfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	8013      	strh	r3, [r2, #0]
 8004c14:	e01d      	b.n	8004c52 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c68:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	441a      	add	r2, r3
 8004c74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004c8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	376c      	adds	r7, #108	; 0x6c
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b08d      	sub	sp, #52	; 0x34
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	7b1b      	ldrb	r3, [r3, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f040 808e 	bne.w	8004dc8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d044      	beq.n	8004d3e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	81bb      	strh	r3, [r7, #12]
 8004cc2:	89bb      	ldrh	r3, [r7, #12]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01b      	beq.n	8004d04 <USB_DeactivateEndpoint+0x6c>
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	817b      	strh	r3, [r7, #10]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	441a      	add	r2, r3
 8004cee:	897b      	ldrh	r3, [r7, #10]
 8004cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1a:	813b      	strh	r3, [r7, #8]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	441a      	add	r2, r3
 8004d26:	893b      	ldrh	r3, [r7, #8]
 8004d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	8013      	strh	r3, [r2, #0]
 8004d3c:	e192      	b.n	8005064 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	827b      	strh	r3, [r7, #18]
 8004d4c:	8a7b      	ldrh	r3, [r7, #18]
 8004d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01b      	beq.n	8004d8e <USB_DeactivateEndpoint+0xf6>
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	823b      	strh	r3, [r7, #16]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	441a      	add	r2, r3
 8004d78:	8a3b      	ldrh	r3, [r7, #16]
 8004d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da4:	81fb      	strh	r3, [r7, #14]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	441a      	add	r2, r3
 8004db0:	89fb      	ldrh	r3, [r7, #14]
 8004db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	8013      	strh	r3, [r2, #0]
 8004dc6:	e14d      	b.n	8005064 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 80a5 	bne.w	8004f1c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	843b      	strh	r3, [r7, #32]
 8004de0:	8c3b      	ldrh	r3, [r7, #32]
 8004de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01b      	beq.n	8004e22 <USB_DeactivateEndpoint+0x18a>
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e00:	83fb      	strh	r3, [r7, #30]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	441a      	add	r2, r3
 8004e0c:	8bfb      	ldrh	r3, [r7, #30]
 8004e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	83bb      	strh	r3, [r7, #28]
 8004e30:	8bbb      	ldrh	r3, [r7, #28]
 8004e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01b      	beq.n	8004e72 <USB_DeactivateEndpoint+0x1da>
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e50:	837b      	strh	r3, [r7, #26]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	441a      	add	r2, r3
 8004e5c:	8b7b      	ldrh	r3, [r7, #26]
 8004e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e88:	833b      	strh	r3, [r7, #24]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	441a      	add	r2, r3
 8004e94:	8b3b      	ldrh	r3, [r7, #24]
 8004e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	82fb      	strh	r3, [r7, #22]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	441a      	add	r2, r3
 8004ecc:	8afb      	ldrh	r3, [r7, #22]
 8004ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef8:	82bb      	strh	r3, [r7, #20]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	441a      	add	r2, r3
 8004f04:	8abb      	ldrh	r3, [r7, #20]
 8004f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]
 8004f1a:	e0a3      	b.n	8005064 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01b      	beq.n	8004f6c <USB_DeactivateEndpoint+0x2d4>
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	441a      	add	r2, r3
 8004f56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01b      	beq.n	8004fbc <USB_DeactivateEndpoint+0x324>
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	441a      	add	r2, r3
 8004fa6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005028:	b29b      	uxth	r3, r3
 800502a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	847b      	strh	r3, [r7, #34]	; 0x22
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	441a      	add	r2, r3
 800504e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005060:	b29b      	uxth	r3, r3
 8005062:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3734      	adds	r7, #52	; 0x34
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b0cc      	sub	sp, #304	; 0x130
 8005074:	af00      	add	r7, sp, #0
 8005076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800507e:	6018      	str	r0, [r3, #0]
 8005080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005088:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800508a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	2b01      	cmp	r3, #1
 8005098:	f041 817d 	bne.w	8006396 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800509c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d908      	bls.n	80050ca <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80050b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80050c8:	e007      	b.n	80050da <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80050ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80050da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	7b1b      	ldrb	r3, [r3, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d152      	bne.n	8005190 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6959      	ldr	r1, [r3, #20]
 80050f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	88da      	ldrh	r2, [r3, #6]
 8005102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005106:	b29b      	uxth	r3, r3
 8005108:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800510c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005110:	6800      	ldr	r0, [r0, #0]
 8005112:	f001 ff23 	bl	8006f5c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800511a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800511e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005122:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005138:	b29b      	uxth	r3, r3
 800513a:	4619      	mov	r1, r3
 800513c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005140:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005144:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005148:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	440a      	add	r2, r1
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	011a      	lsls	r2, r3, #4
 8005160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005164:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4413      	add	r3, r2
 800516c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005174:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800517e:	b29a      	uxth	r2, r3
 8005180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005184:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	801a      	strh	r2, [r3, #0]
 800518c:	f001 b8b5 	b.w	80062fa <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	78db      	ldrb	r3, [r3, #3]
 800519c:	2b02      	cmp	r3, #2
 800519e:	f040 84c6 	bne.w	8005b2e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6a1a      	ldr	r2, [r3, #32]
 80051ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	f240 8443 	bls.w	8005a46 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80051c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80051ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	441a      	add	r2, r3
 8005204:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005210:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005218:	b29b      	uxth	r3, r3
 800521a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800521c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800522c:	1ad2      	subs	r2, r2, r3
 800522e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800523a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 823e 	beq.w	80056de <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005266:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800526a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800526e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	2b00      	cmp	r3, #0
 8005284:	f040 809a 	bne.w	80053bc <USB_EPStartXfer+0x34c>
 8005288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005290:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005294:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052ba:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	440a      	add	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	011a      	lsls	r2, r3, #4
 80052d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80052e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d122      	bne.n	800533a <USB_EPStartXfer+0x2ca>
 80052f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005306:	b29a      	uxth	r2, r3
 8005308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005318:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532a:	b29a      	uxth	r2, r3
 800532c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005330:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	e079      	b.n	800542e <USB_EPStartXfer+0x3be>
 800533a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533e:	2b3e      	cmp	r3, #62	; 0x3e
 8005340:	d81b      	bhi.n	800537a <USB_EPStartXfer+0x30a>
 8005342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800534c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <USB_EPStartXfer+0x2f2>
 8005358:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800535c:	3301      	adds	r3, #1
 800535e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005362:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005366:	b29b      	uxth	r3, r3
 8005368:	029b      	lsls	r3, r3, #10
 800536a:	b29a      	uxth	r2, r3
 800536c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005370:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	e059      	b.n	800542e <USB_EPStartXfer+0x3be>
 800537a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <USB_EPStartXfer+0x32a>
 8005390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005394:	3b01      	subs	r3, #1
 8005396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800539a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800539e:	b29b      	uxth	r3, r3
 80053a0:	029b      	lsls	r3, r3, #10
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	e038      	b.n	800542e <USB_EPStartXfer+0x3be>
 80053bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d130      	bne.n	800542e <USB_EPStartXfer+0x3be>
 80053cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053da:	b29b      	uxth	r3, r3
 80053dc:	4619      	mov	r1, r3
 80053de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80053e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053ea:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	440a      	add	r2, r1
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	011a      	lsls	r2, r3, #4
 8005402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005406:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4413      	add	r3, r2
 800540e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005420:	b29a      	uxth	r2, r3
 8005422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800542e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	895b      	ldrh	r3, [r3, #10]
 800543a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800543e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6959      	ldr	r1, [r3, #20]
 800544a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800544e:	b29b      	uxth	r3, r3
 8005450:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005454:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005458:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800545c:	6800      	ldr	r0, [r0, #0]
 800545e:	f001 fd7d 	bl	8006f5c <USB_WritePMA>
            ep->xfer_buff += len;
 8005462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695a      	ldr	r2, [r3, #20]
 800546e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005472:	441a      	add	r2, r3
 8005474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a1a      	ldr	r2, [r3, #32]
 800548c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	429a      	cmp	r2, r3
 800549a:	d90f      	bls.n	80054bc <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800549c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6a1a      	ldr	r2, [r3, #32]
 80054a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ac:	1ad2      	subs	r2, r2, r3
 80054ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	621a      	str	r2, [r3, #32]
 80054ba:	e00e      	b.n	80054da <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80054bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2200      	movs	r2, #0
 80054d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f040 809a 	bne.w	8005620 <USB_EPStartXfer+0x5b0>
 80054ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80054f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054f8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550e:	b29b      	uxth	r3, r3
 8005510:	4619      	mov	r1, r3
 8005512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005516:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800551a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800551e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	440a      	add	r2, r1
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	011a      	lsls	r2, r3, #4
 8005536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4413      	add	r3, r2
 8005542:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d122      	bne.n	800559e <USB_EPStartXfer+0x52e>
 8005558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800556a:	b29a      	uxth	r2, r3
 800556c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005570:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558e:	b29a      	uxth	r2, r3
 8005590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005594:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	801a      	strh	r2, [r3, #0]
 800559c:	e083      	b.n	80056a6 <USB_EPStartXfer+0x636>
 800559e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a2:	2b3e      	cmp	r3, #62	; 0x3e
 80055a4:	d81b      	bhi.n	80055de <USB_EPStartXfer+0x56e>
 80055a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80055b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d004      	beq.n	80055c6 <USB_EPStartXfer+0x556>
 80055bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80055c0:	3301      	adds	r3, #1
 80055c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80055c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	029b      	lsls	r3, r3, #10
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	801a      	strh	r2, [r3, #0]
 80055dc:	e063      	b.n	80056a6 <USB_EPStartXfer+0x636>
 80055de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80055e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <USB_EPStartXfer+0x58e>
 80055f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80055f8:	3b01      	subs	r3, #1
 80055fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80055fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005602:	b29b      	uxth	r3, r3
 8005604:	029b      	lsls	r3, r3, #10
 8005606:	b29b      	uxth	r3, r3
 8005608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800560c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005610:	b29a      	uxth	r2, r3
 8005612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005616:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	e042      	b.n	80056a6 <USB_EPStartXfer+0x636>
 8005620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d13a      	bne.n	80056a6 <USB_EPStartXfer+0x636>
 8005630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005634:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005638:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800563c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005640:	6812      	ldr	r2, [r2, #0]
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005652:	b29b      	uxth	r3, r3
 8005654:	4619      	mov	r1, r3
 8005656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800565e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005662:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	440a      	add	r2, r1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	011a      	lsls	r2, r3, #4
 800567a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4413      	add	r3, r2
 8005686:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800568a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005698:	b29a      	uxth	r2, r3
 800569a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	891b      	ldrh	r3, [r3, #8]
 80056b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6959      	ldr	r1, [r3, #20]
 80056c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056d4:	6800      	ldr	r0, [r0, #0]
 80056d6:	f001 fc41 	bl	8006f5c <USB_WritePMA>
 80056da:	f000 be0e 	b.w	80062fa <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d16d      	bne.n	80057ca <USB_EPStartXfer+0x75a>
 80056ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80056fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570e:	4413      	add	r3, r2
 8005710:	64bb      	str	r3, [r7, #72]	; 0x48
 8005712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	011a      	lsls	r2, r3, #4
 8005720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005722:	4413      	add	r3, r2
 8005724:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005728:	647b      	str	r3, [r7, #68]	; 0x44
 800572a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d112      	bne.n	8005758 <USB_EPStartXfer+0x6e8>
 8005732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800573c:	b29a      	uxth	r2, r3
 800573e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800574c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005750:	b29a      	uxth	r2, r3
 8005752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005754:	801a      	strh	r2, [r3, #0]
 8005756:	e063      	b.n	8005820 <USB_EPStartXfer+0x7b0>
 8005758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575c:	2b3e      	cmp	r3, #62	; 0x3e
 800575e:	d817      	bhi.n	8005790 <USB_EPStartXfer+0x720>
 8005760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005764:	085b      	lsrs	r3, r3, #1
 8005766:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800576a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <USB_EPStartXfer+0x710>
 8005776:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800577a:	3301      	adds	r3, #1
 800577c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005780:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005784:	b29b      	uxth	r3, r3
 8005786:	029b      	lsls	r3, r3, #10
 8005788:	b29a      	uxth	r2, r3
 800578a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	e047      	b.n	8005820 <USB_EPStartXfer+0x7b0>
 8005790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800579a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d104      	bne.n	80057b0 <USB_EPStartXfer+0x740>
 80057a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057aa:	3b01      	subs	r3, #1
 80057ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80057b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	029b      	lsls	r3, r3, #10
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	e02a      	b.n	8005820 <USB_EPStartXfer+0x7b0>
 80057ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	785b      	ldrb	r3, [r3, #1]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d122      	bne.n	8005820 <USB_EPStartXfer+0x7b0>
 80057da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	653b      	str	r3, [r7, #80]	; 0x50
 80057e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fa:	4413      	add	r3, r2
 80057fc:	653b      	str	r3, [r7, #80]	; 0x50
 80057fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	011a      	lsls	r2, r3, #4
 800580c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800580e:	4413      	add	r3, r2
 8005810:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581a:	b29a      	uxth	r2, r3
 800581c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	891b      	ldrh	r3, [r3, #8]
 800582c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6959      	ldr	r1, [r3, #20]
 800583c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005840:	b29b      	uxth	r3, r3
 8005842:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005846:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800584a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800584e:	6800      	ldr	r0, [r0, #0]
 8005850:	f001 fb84 	bl	8006f5c <USB_WritePMA>
            ep->xfer_buff += len;
 8005854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695a      	ldr	r2, [r3, #20]
 8005860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005864:	441a      	add	r2, r3
 8005866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a1a      	ldr	r2, [r3, #32]
 800587e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	429a      	cmp	r2, r3
 800588c:	d90f      	bls.n	80058ae <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800588e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6a1a      	ldr	r2, [r3, #32]
 800589a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	621a      	str	r2, [r3, #32]
 80058ac:	e00e      	b.n	80058cc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80058ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80058be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2200      	movs	r2, #0
 80058ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	643b      	str	r3, [r7, #64]	; 0x40
 80058d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d16d      	bne.n	80059c4 <USB_EPStartXfer+0x954>
 80058e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005902:	b29b      	uxth	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	4413      	add	r3, r2
 800590a:	63bb      	str	r3, [r7, #56]	; 0x38
 800590c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	011a      	lsls	r2, r3, #4
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	4413      	add	r3, r2
 800591e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
 8005924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d112      	bne.n	8005952 <USB_EPStartXfer+0x8e2>
 800592c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	b29b      	uxth	r3, r3
 8005932:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005936:	b29a      	uxth	r2, r3
 8005938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593a:	801a      	strh	r2, [r3, #0]
 800593c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29b      	uxth	r3, r3
 8005942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800594a:	b29a      	uxth	r2, r3
 800594c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	e05d      	b.n	8005a0e <USB_EPStartXfer+0x99e>
 8005952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005956:	2b3e      	cmp	r3, #62	; 0x3e
 8005958:	d817      	bhi.n	800598a <USB_EPStartXfer+0x91a>
 800595a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <USB_EPStartXfer+0x90a>
 8005970:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005974:	3301      	adds	r3, #1
 8005976:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800597a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800597e:	b29b      	uxth	r3, r3
 8005980:	029b      	lsls	r3, r3, #10
 8005982:	b29a      	uxth	r2, r3
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	801a      	strh	r2, [r3, #0]
 8005988:	e041      	b.n	8005a0e <USB_EPStartXfer+0x99e>
 800598a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	2b00      	cmp	r3, #0
 800599e:	d104      	bne.n	80059aa <USB_EPStartXfer+0x93a>
 80059a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059a4:	3b01      	subs	r3, #1
 80059a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	029b      	lsls	r3, r3, #10
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059bc:	b29a      	uxth	r2, r3
 80059be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c0:	801a      	strh	r2, [r3, #0]
 80059c2:	e024      	b.n	8005a0e <USB_EPStartXfer+0x99e>
 80059c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	785b      	ldrb	r3, [r3, #1]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d11c      	bne.n	8005a0e <USB_EPStartXfer+0x99e>
 80059d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e8:	4413      	add	r3, r2
 80059ea:	643b      	str	r3, [r7, #64]	; 0x40
 80059ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	011a      	lsls	r2, r3, #4
 80059fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fc:	4413      	add	r3, r2
 80059fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	895b      	ldrh	r3, [r3, #10]
 8005a1a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6959      	ldr	r1, [r3, #20]
 8005a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a34:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a38:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a3c:	6800      	ldr	r0, [r0, #0]
 8005a3e:	f001 fa8d 	bl	8006f5c <USB_WritePMA>
 8005a42:	f000 bc5a 	b.w	80062fa <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	441a      	add	r2, r3
 8005a9a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad2:	4413      	add	r3, r2
 8005ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	011a      	lsls	r2, r3, #4
 8005ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005af6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	891b      	ldrh	r3, [r3, #8]
 8005b04:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6959      	ldr	r1, [r3, #20]
 8005b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b1e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b22:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b26:	6800      	ldr	r0, [r0, #0]
 8005b28:	f001 fa18 	bl	8006f5c <USB_WritePMA>
 8005b2c:	e3e5      	b.n	80062fa <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b54:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9a:	1ad2      	subs	r2, r2, r3
 8005b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 81bc 	beq.w	8005f48 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d16d      	bne.n	8005cca <USB_EPStartXfer+0xc5a>
 8005bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c0e:	4413      	add	r3, r2
 8005c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	011a      	lsls	r2, r3, #4
 8005c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c22:	4413      	add	r3, r2
 8005c24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c28:	677b      	str	r3, [r7, #116]	; 0x74
 8005c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d112      	bne.n	8005c58 <USB_EPStartXfer+0xbe8>
 8005c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	e060      	b.n	8005d1a <USB_EPStartXfer+0xcaa>
 8005c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c5e:	d817      	bhi.n	8005c90 <USB_EPStartXfer+0xc20>
 8005c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c64:	085b      	lsrs	r3, r3, #1
 8005c66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <USB_EPStartXfer+0xc10>
 8005c76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c80:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	029b      	lsls	r3, r3, #10
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e044      	b.n	8005d1a <USB_EPStartXfer+0xcaa>
 8005c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d104      	bne.n	8005cb0 <USB_EPStartXfer+0xc40>
 8005ca6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005caa:	3b01      	subs	r3, #1
 8005cac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005cb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	029b      	lsls	r3, r3, #10
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc6:	801a      	strh	r2, [r3, #0]
 8005cc8:	e027      	b.n	8005d1a <USB_EPStartXfer+0xcaa>
 8005cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d11f      	bne.n	8005d1a <USB_EPStartXfer+0xcaa>
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	011a      	lsls	r2, r3, #4
 8005d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d08:	4413      	add	r3, r2
 8005d0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	895b      	ldrh	r3, [r3, #10]
 8005d26:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6959      	ldr	r1, [r3, #20]
 8005d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d40:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d44:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d48:	6800      	ldr	r0, [r0, #0]
 8005d4a:	f001 f907 	bl	8006f5c <USB_WritePMA>
          ep->xfer_buff += len;
 8005d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695a      	ldr	r2, [r3, #20]
 8005d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5e:	441a      	add	r2, r3
 8005d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6a1a      	ldr	r2, [r3, #32]
 8005d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d90f      	bls.n	8005da8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6a1a      	ldr	r2, [r3, #32]
 8005d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d98:	1ad2      	subs	r2, r2, r3
 8005d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	621a      	str	r2, [r3, #32]
 8005da6:	e00e      	b.n	8005dc6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8295 	beq.w	80062fa <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d16d      	bne.n	8005ebc <USB_EPStartXfer+0xe4c>
 8005de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e00:	4413      	add	r3, r2
 8005e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	011a      	lsls	r2, r3, #4
 8005e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e14:	4413      	add	r3, r2
 8005e16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e1a:	667b      	str	r3, [r7, #100]	; 0x64
 8005e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d112      	bne.n	8005e4a <USB_EPStartXfer+0xdda>
 8005e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	e063      	b.n	8005f12 <USB_EPStartXfer+0xea2>
 8005e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e50:	d817      	bhi.n	8005e82 <USB_EPStartXfer+0xe12>
 8005e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e56:	085b      	lsrs	r3, r3, #1
 8005e58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <USB_EPStartXfer+0xe02>
 8005e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	029b      	lsls	r3, r3, #10
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e7e:	801a      	strh	r2, [r3, #0]
 8005e80:	e047      	b.n	8005f12 <USB_EPStartXfer+0xea2>
 8005e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e90:	f003 031f 	and.w	r3, r3, #31
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <USB_EPStartXfer+0xe32>
 8005e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	029b      	lsls	r3, r3, #10
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	e02a      	b.n	8005f12 <USB_EPStartXfer+0xea2>
 8005ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d122      	bne.n	8005f12 <USB_EPStartXfer+0xea2>
 8005ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005edc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eec:	4413      	add	r3, r2
 8005eee:	673b      	str	r3, [r7, #112]	; 0x70
 8005ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	011a      	lsls	r2, r3, #4
 8005efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f00:	4413      	add	r3, r2
 8005f02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	891b      	ldrh	r3, [r3, #8]
 8005f1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6959      	ldr	r1, [r3, #20]
 8005f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f38:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f3c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f40:	6800      	ldr	r0, [r0, #0]
 8005f42:	f001 f80b 	bl	8006f5c <USB_WritePMA>
 8005f46:	e1d8      	b.n	80062fa <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	785b      	ldrb	r3, [r3, #1]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d178      	bne.n	800604a <USB_EPStartXfer+0xfda>
 8005f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	011a      	lsls	r2, r3, #4
 8005f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f94:	4413      	add	r3, r2
 8005f96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d116      	bne.n	8005fd4 <USB_EPStartXfer+0xf64>
 8005fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fd0:	801a      	strh	r2, [r3, #0]
 8005fd2:	e06b      	b.n	80060ac <USB_EPStartXfer+0x103c>
 8005fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd8:	2b3e      	cmp	r3, #62	; 0x3e
 8005fda:	d818      	bhi.n	800600e <USB_EPStartXfer+0xf9e>
 8005fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe0:	085b      	lsrs	r3, r3, #1
 8005fe2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <USB_EPStartXfer+0xf8c>
 8005ff2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ffc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006000:	b29b      	uxth	r3, r3
 8006002:	029b      	lsls	r3, r3, #10
 8006004:	b29a      	uxth	r2, r3
 8006006:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	e04e      	b.n	80060ac <USB_EPStartXfer+0x103c>
 800600e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <USB_EPStartXfer+0xfbe>
 8006024:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006028:	3b01      	subs	r3, #1
 800602a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800602e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006032:	b29b      	uxth	r3, r3
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	b29b      	uxth	r3, r3
 8006038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006040:	b29a      	uxth	r2, r3
 8006042:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	e030      	b.n	80060ac <USB_EPStartXfer+0x103c>
 800604a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d128      	bne.n	80060ac <USB_EPStartXfer+0x103c>
 800605a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006076:	b29b      	uxth	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800607e:	4413      	add	r3, r2
 8006080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	011a      	lsls	r2, r3, #4
 8006092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006096:	4413      	add	r3, r2
 8006098:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800609c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	891b      	ldrh	r3, [r3, #8]
 80060b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6959      	ldr	r1, [r3, #20]
 80060c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060d2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80060d6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80060da:	6800      	ldr	r0, [r0, #0]
 80060dc:	f000 ff3e 	bl	8006f5c <USB_WritePMA>
          ep->xfer_buff += len;
 80060e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695a      	ldr	r2, [r3, #20]
 80060ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f0:	441a      	add	r2, r3
 80060f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80060fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6a1a      	ldr	r2, [r3, #32]
 800610a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	429a      	cmp	r2, r3
 8006118:	d90f      	bls.n	800613a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800611a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6a1a      	ldr	r2, [r3, #32]
 8006126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612a:	1ad2      	subs	r2, r2, r3
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	621a      	str	r2, [r3, #32]
 8006138:	e00e      	b.n	8006158 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800613a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800614a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2200      	movs	r2, #0
 8006156:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 80cc 	beq.w	80062fa <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006166:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d178      	bne.n	8006272 <USB_EPStartXfer+0x1202>
 8006180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006184:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800618e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006192:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800619c:	b29b      	uxth	r3, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061a4:	4413      	add	r3, r2
 80061a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	011a      	lsls	r2, r3, #4
 80061b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061bc:	4413      	add	r3, r2
 80061be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d116      	bne.n	80061fc <USB_EPStartXfer+0x118c>
 80061ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061da:	b29a      	uxth	r2, r3
 80061dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061f8:	801a      	strh	r2, [r3, #0]
 80061fa:	e064      	b.n	80062c6 <USB_EPStartXfer+0x1256>
 80061fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006200:	2b3e      	cmp	r3, #62	; 0x3e
 8006202:	d818      	bhi.n	8006236 <USB_EPStartXfer+0x11c6>
 8006204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800620e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <USB_EPStartXfer+0x11b4>
 800621a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800621e:	3301      	adds	r3, #1
 8006220:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006228:	b29b      	uxth	r3, r3
 800622a:	029b      	lsls	r3, r3, #10
 800622c:	b29a      	uxth	r2, r3
 800622e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	e047      	b.n	80062c6 <USB_EPStartXfer+0x1256>
 8006236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <USB_EPStartXfer+0x11e6>
 800624c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006250:	3b01      	subs	r3, #1
 8006252:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800625a:	b29b      	uxth	r3, r3
 800625c:	029b      	lsls	r3, r3, #10
 800625e:	b29b      	uxth	r3, r3
 8006260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	e029      	b.n	80062c6 <USB_EPStartXfer+0x1256>
 8006272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d121      	bne.n	80062c6 <USB_EPStartXfer+0x1256>
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006290:	b29b      	uxth	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006298:	4413      	add	r3, r2
 800629a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800629e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	011a      	lsls	r2, r3, #4
 80062ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062b0:	4413      	add	r3, r2
 80062b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80062ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062be:	b29a      	uxth	r2, r3
 80062c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	895b      	ldrh	r3, [r3, #10]
 80062d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6959      	ldr	r1, [r3, #20]
 80062e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80062f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80062f4:	6800      	ldr	r0, [r0, #0]
 80062f6:	f000 fe31 	bl	8006f5c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80062fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800631c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006328:	8013      	strh	r3, [r2, #0]
 800632a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006332:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006336:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800633a:	8812      	ldrh	r2, [r2, #0]
 800633c:	f082 0210 	eor.w	r2, r2, #16
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006346:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800634a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800634e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006352:	8812      	ldrh	r2, [r2, #0]
 8006354:	f082 0220 	eor.w	r2, r2, #32
 8006358:	801a      	strh	r2, [r3, #0]
 800635a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	441a      	add	r2, r3
 8006374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006378:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800638a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638e:	b29b      	uxth	r3, r3
 8006390:	8013      	strh	r3, [r2, #0]
 8006392:	f000 bc9f 	b.w	8006cd4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	7b1b      	ldrb	r3, [r3, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f040 80ae 	bne.w	8006504 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80063a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699a      	ldr	r2, [r3, #24]
 80063b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d917      	bls.n	80063f4 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80063c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80063d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699a      	ldr	r2, [r3, #24]
 80063e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e4:	1ad2      	subs	r2, r2, r3
 80063e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	619a      	str	r2, [r3, #24]
 80063f2:	e00e      	b.n	8006412 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80063f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2200      	movs	r2, #0
 8006410:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642e:	b29b      	uxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006436:	4413      	add	r3, r2
 8006438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800643c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	011a      	lsls	r2, r3, #4
 800644a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800644e:	4413      	add	r3, r2
 8006450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800645c:	2b00      	cmp	r3, #0
 800645e:	d116      	bne.n	800648e <USB_EPStartXfer+0x141e>
 8006460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800646c:	b29a      	uxth	r2, r3
 800646e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006472:	801a      	strh	r2, [r3, #0]
 8006474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006484:	b29a      	uxth	r2, r3
 8006486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	e3e8      	b.n	8006c60 <USB_EPStartXfer+0x1bf0>
 800648e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006492:	2b3e      	cmp	r3, #62	; 0x3e
 8006494:	d818      	bhi.n	80064c8 <USB_EPStartXfer+0x1458>
 8006496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800649a:	085b      	lsrs	r3, r3, #1
 800649c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <USB_EPStartXfer+0x1446>
 80064ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064b0:	3301      	adds	r3, #1
 80064b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	029b      	lsls	r3, r3, #10
 80064be:	b29a      	uxth	r2, r3
 80064c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	e3cb      	b.n	8006c60 <USB_EPStartXfer+0x1bf0>
 80064c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <USB_EPStartXfer+0x1478>
 80064de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064e2:	3b01      	subs	r3, #1
 80064e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	029b      	lsls	r3, r3, #10
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	e3ad      	b.n	8006c60 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	78db      	ldrb	r3, [r3, #3]
 8006510:	2b02      	cmp	r3, #2
 8006512:	f040 8200 	bne.w	8006916 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	785b      	ldrb	r3, [r3, #1]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f040 8091 	bne.w	800664a <USB_EPStartXfer+0x15da>
 8006528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006544:	b29b      	uxth	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800654c:	4413      	add	r3, r2
 800654e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	011a      	lsls	r2, r3, #4
 8006560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006564:	4413      	add	r3, r2
 8006566:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800656a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800656e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d116      	bne.n	80065ac <USB_EPStartXfer+0x153c>
 800657e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	b29b      	uxth	r3, r3
 8006586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800658a:	b29a      	uxth	r2, r3
 800658c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006590:	801a      	strh	r2, [r3, #0]
 8006592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b29b      	uxth	r3, r3
 800659a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065a8:	801a      	strh	r2, [r3, #0]
 80065aa:	e083      	b.n	80066b4 <USB_EPStartXfer+0x1644>
 80065ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b3e      	cmp	r3, #62	; 0x3e
 80065ba:	d820      	bhi.n	80065fe <USB_EPStartXfer+0x158e>
 80065bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d004      	beq.n	80065ec <USB_EPStartXfer+0x157c>
 80065e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e6:	3301      	adds	r3, #1
 80065e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	029b      	lsls	r3, r3, #10
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	e05a      	b.n	80066b4 <USB_EPStartXfer+0x1644>
 80065fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	2b00      	cmp	r3, #0
 8006622:	d104      	bne.n	800662e <USB_EPStartXfer+0x15be>
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	3b01      	subs	r3, #1
 800662a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800662e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006632:	b29b      	uxth	r3, r3
 8006634:	029b      	lsls	r3, r3, #10
 8006636:	b29b      	uxth	r3, r3
 8006638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800663c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006640:	b29a      	uxth	r2, r3
 8006642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006646:	801a      	strh	r2, [r3, #0]
 8006648:	e034      	b.n	80066b4 <USB_EPStartXfer+0x1644>
 800664a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d12c      	bne.n	80066b4 <USB_EPStartXfer+0x1644>
 800665a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006676:	b29b      	uxth	r3, r3
 8006678:	461a      	mov	r2, r3
 800667a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800667e:	4413      	add	r3, r2
 8006680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	011a      	lsls	r2, r3, #4
 8006692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006696:	4413      	add	r3, r2
 8006698:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800669c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 8091 	bne.w	80067f6 <USB_EPStartXfer+0x1786>
 80066d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066f8:	4413      	add	r3, r2
 80066fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	011a      	lsls	r2, r3, #4
 800670c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006710:	4413      	add	r3, r2
 8006712:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006716:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800671a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d116      	bne.n	8006758 <USB_EPStartXfer+0x16e8>
 800672a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006736:	b29a      	uxth	r2, r3
 8006738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800673c:	801a      	strh	r2, [r3, #0]
 800673e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800674a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800674e:	b29a      	uxth	r2, r3
 8006750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006754:	801a      	strh	r2, [r3, #0]
 8006756:	e07c      	b.n	8006852 <USB_EPStartXfer+0x17e2>
 8006758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b3e      	cmp	r3, #62	; 0x3e
 8006766:	d820      	bhi.n	80067aa <USB_EPStartXfer+0x173a>
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	085b      	lsrs	r3, r3, #1
 8006776:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800677a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d004      	beq.n	8006798 <USB_EPStartXfer+0x1728>
 800678e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006792:	3301      	adds	r3, #1
 8006794:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006798:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800679c:	b29b      	uxth	r3, r3
 800679e:	029b      	lsls	r3, r3, #10
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e053      	b.n	8006852 <USB_EPStartXfer+0x17e2>
 80067aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	f003 031f 	and.w	r3, r3, #31
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <USB_EPStartXfer+0x176a>
 80067d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067d4:	3b01      	subs	r3, #1
 80067d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067de:	b29b      	uxth	r3, r3
 80067e0:	029b      	lsls	r3, r3, #10
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067f2:	801a      	strh	r2, [r3, #0]
 80067f4:	e02d      	b.n	8006852 <USB_EPStartXfer+0x17e2>
 80067f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d125      	bne.n	8006852 <USB_EPStartXfer+0x17e2>
 8006806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006814:	b29b      	uxth	r3, r3
 8006816:	461a      	mov	r2, r3
 8006818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800681c:	4413      	add	r3, r2
 800681e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	011a      	lsls	r2, r3, #4
 8006830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006834:	4413      	add	r3, r2
 8006836:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800683a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800683e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	b29a      	uxth	r2, r3
 800684c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006850:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 81fe 	beq.w	8006c60 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006884:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <USB_EPStartXfer+0x182c>
 8006890:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10d      	bne.n	80068b8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800689c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f040 81db 	bne.w	8006c60 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068aa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f040 81d4 	bne.w	8006c60 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80068b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80068e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	441a      	add	r2, r3
 80068fc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006910:	b29b      	uxth	r3, r3
 8006912:	8013      	strh	r3, [r2, #0]
 8006914:	e1a4      	b.n	8006c60 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	78db      	ldrb	r3, [r3, #3]
 8006922:	2b01      	cmp	r3, #1
 8006924:	f040 819a 	bne.w	8006c5c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	699a      	ldr	r2, [r3, #24]
 8006934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	429a      	cmp	r2, r3
 8006942:	d917      	bls.n	8006974 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	699a      	ldr	r2, [r3, #24]
 8006960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006964:	1ad2      	subs	r2, r2, r3
 8006966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	619a      	str	r2, [r3, #24]
 8006972:	e00e      	b.n	8006992 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2200      	movs	r2, #0
 8006990:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d178      	bne.n	8006a94 <USB_EPStartXfer+0x1a24>
 80069a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069be:	b29b      	uxth	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069c6:	4413      	add	r3, r2
 80069c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	011a      	lsls	r2, r3, #4
 80069da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069de:	4413      	add	r3, r2
 80069e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d116      	bne.n	8006a1e <USB_EPStartXfer+0x19ae>
 80069f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a02:	801a      	strh	r2, [r3, #0]
 8006a04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	e06b      	b.n	8006af6 <USB_EPStartXfer+0x1a86>
 8006a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a22:	2b3e      	cmp	r3, #62	; 0x3e
 8006a24:	d818      	bhi.n	8006a58 <USB_EPStartXfer+0x19e8>
 8006a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <USB_EPStartXfer+0x19d6>
 8006a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a40:	3301      	adds	r3, #1
 8006a42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	029b      	lsls	r3, r3, #10
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a54:	801a      	strh	r2, [r3, #0]
 8006a56:	e04e      	b.n	8006af6 <USB_EPStartXfer+0x1a86>
 8006a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a5c:	095b      	lsrs	r3, r3, #5
 8006a5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d104      	bne.n	8006a78 <USB_EPStartXfer+0x1a08>
 8006a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a72:	3b01      	subs	r3, #1
 8006a74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	029b      	lsls	r3, r3, #10
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	e030      	b.n	8006af6 <USB_EPStartXfer+0x1a86>
 8006a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d128      	bne.n	8006af6 <USB_EPStartXfer+0x1a86>
 8006aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac8:	4413      	add	r3, r2
 8006aca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	011a      	lsls	r2, r3, #4
 8006adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ae6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d178      	bne.n	8006c06 <USB_EPStartXfer+0x1b96>
 8006b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b38:	4413      	add	r3, r2
 8006b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	011a      	lsls	r2, r3, #4
 8006b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b50:	4413      	add	r3, r2
 8006b52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d116      	bne.n	8006b90 <USB_EPStartXfer+0x1b20>
 8006b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b74:	801a      	strh	r2, [r3, #0]
 8006b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b8c:	801a      	strh	r2, [r3, #0]
 8006b8e:	e067      	b.n	8006c60 <USB_EPStartXfer+0x1bf0>
 8006b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b94:	2b3e      	cmp	r3, #62	; 0x3e
 8006b96:	d818      	bhi.n	8006bca <USB_EPStartXfer+0x1b5a>
 8006b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b9c:	085b      	lsrs	r3, r3, #1
 8006b9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d004      	beq.n	8006bb8 <USB_EPStartXfer+0x1b48>
 8006bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	029b      	lsls	r3, r3, #10
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	e04a      	b.n	8006c60 <USB_EPStartXfer+0x1bf0>
 8006bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <USB_EPStartXfer+0x1b7a>
 8006be0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006be4:	3b01      	subs	r3, #1
 8006be6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	029b      	lsls	r3, r3, #10
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	e02c      	b.n	8006c60 <USB_EPStartXfer+0x1bf0>
 8006c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	785b      	ldrb	r3, [r3, #1]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d124      	bne.n	8006c60 <USB_EPStartXfer+0x1bf0>
 8006c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	461a      	mov	r2, r3
 8006c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	011a      	lsls	r2, r3, #4
 8006c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c44:	4413      	add	r3, r2
 8006c46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c58:	801a      	strh	r2, [r3, #0]
 8006c5a:	e001      	b.n	8006c60 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e03a      	b.n	8006cd6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c86:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c8a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c92:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c96:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c9e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	441a      	add	r2, r3
 8006cbc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	785b      	ldrb	r3, [r3, #1]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d020      	beq.n	8006d34 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d08:	81bb      	strh	r3, [r7, #12]
 8006d0a:	89bb      	ldrh	r3, [r7, #12]
 8006d0c:	f083 0310 	eor.w	r3, r3, #16
 8006d10:	81bb      	strh	r3, [r7, #12]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	441a      	add	r2, r3
 8006d1c:	89bb      	ldrh	r3, [r7, #12]
 8006d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	8013      	strh	r3, [r2, #0]
 8006d32:	e01f      	b.n	8006d74 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	81fb      	strh	r3, [r7, #14]
 8006d4c:	89fb      	ldrh	r3, [r7, #14]
 8006d4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d52:	81fb      	strh	r3, [r7, #14]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	441a      	add	r2, r3
 8006d5e:	89fb      	ldrh	r3, [r7, #14]
 8006d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr

08006d80 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	7b1b      	ldrb	r3, [r3, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f040 809d 	bne.w	8006ece <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d04c      	beq.n	8006e36 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	823b      	strh	r3, [r7, #16]
 8006daa:	8a3b      	ldrh	r3, [r7, #16]
 8006dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01b      	beq.n	8006dec <USB_EPClearStall+0x6c>
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dca:	81fb      	strh	r3, [r7, #14]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	441a      	add	r2, r3
 8006dd6:	89fb      	ldrh	r3, [r7, #14]
 8006dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	78db      	ldrb	r3, [r3, #3]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d06c      	beq.n	8006ece <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e0a:	81bb      	strh	r3, [r7, #12]
 8006e0c:	89bb      	ldrh	r3, [r7, #12]
 8006e0e:	f083 0320 	eor.w	r3, r3, #32
 8006e12:	81bb      	strh	r3, [r7, #12]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	441a      	add	r2, r3
 8006e1e:	89bb      	ldrh	r3, [r7, #12]
 8006e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	8013      	strh	r3, [r2, #0]
 8006e34:	e04b      	b.n	8006ece <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	82fb      	strh	r3, [r7, #22]
 8006e44:	8afb      	ldrh	r3, [r7, #22]
 8006e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01b      	beq.n	8006e86 <USB_EPClearStall+0x106>
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e64:	82bb      	strh	r3, [r7, #20]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	441a      	add	r2, r3
 8006e70:	8abb      	ldrh	r3, [r7, #20]
 8006e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9c:	827b      	strh	r3, [r7, #18]
 8006e9e:	8a7b      	ldrh	r3, [r7, #18]
 8006ea0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ea4:	827b      	strh	r3, [r7, #18]
 8006ea6:	8a7b      	ldrh	r3, [r7, #18]
 8006ea8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006eac:	827b      	strh	r3, [r7, #18]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	441a      	add	r2, r3
 8006eb8:	8a7b      	ldrh	r3, [r7, #18]
 8006eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr

08006eda <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006ee6:	78fb      	ldrb	r3, [r7, #3]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d103      	bne.n	8006ef4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2280      	movs	r2, #128	; 0x80
 8006ef0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bc80      	pop	{r7}
 8006efe:	4770      	bx	lr

08006f00 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr

08006f46 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b08d      	sub	sp, #52	; 0x34
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	4611      	mov	r1, r2
 8006f68:	461a      	mov	r2, r3
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	80fb      	strh	r3, [r7, #6]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f72:	88bb      	ldrh	r3, [r7, #4]
 8006f74:	3301      	adds	r3, #1
 8006f76:	085b      	lsrs	r3, r3, #1
 8006f78:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	005a      	lsls	r2, r3, #1
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f8e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f94:	e01e      	b.n	8006fd4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	021b      	lsls	r3, r3, #8
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	461a      	mov	r2, r3
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	3302      	adds	r3, #2
 8006fc0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	3301      	adds	r3, #1
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1dd      	bne.n	8006f96 <USB_WritePMA+0x3a>
  }
}
 8006fda:	bf00      	nop
 8006fdc:	bf00      	nop
 8006fde:	3734      	adds	r7, #52	; 0x34
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr

08006fe6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b08b      	sub	sp, #44	; 0x2c
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	80fb      	strh	r3, [r7, #6]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006ffc:	88bb      	ldrh	r3, [r7, #4]
 8006ffe:	085b      	lsrs	r3, r3, #1
 8007000:	b29b      	uxth	r3, r3
 8007002:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800700c:	88fb      	ldrh	r3, [r7, #6]
 800700e:	005a      	lsls	r2, r3, #1
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007018:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
 800701e:	e01b      	b.n	8007058 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	3302      	adds	r3, #2
 800702c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	3301      	adds	r3, #1
 800703a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	0a1b      	lsrs	r3, r3, #8
 8007040:	b2da      	uxtb	r2, r3
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	3301      	adds	r3, #1
 800704a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	3302      	adds	r3, #2
 8007050:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	3b01      	subs	r3, #1
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e0      	bne.n	8007020 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800705e:	88bb      	ldrh	r3, [r7, #4]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d007      	beq.n	800707a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29b      	uxth	r3, r3
 8007070:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	b2da      	uxtb	r2, r3
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	701a      	strb	r2, [r3, #0]
  }
}
 800707a:	bf00      	nop
 800707c:	372c      	adds	r7, #44	; 0x2c
 800707e:	46bd      	mov	sp, r7
 8007080:	bc80      	pop	{r7}
 8007082:	4770      	bx	lr

08007084 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007090:	2304      	movs	r3, #4
 8007092:	2203      	movs	r2, #3
 8007094:	2181      	movs	r1, #129	; 0x81
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fc83 	bl	80089a2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80070a2:	2010      	movs	r0, #16
 80070a4:	f001 fd92 	bl	8008bcc <USBD_static_malloc>
 80070a8:	4602      	mov	r2, r0
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80070ba:	2302      	movs	r3, #2
 80070bc:	e005      	b.n	80070ca <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c4:	2200      	movs	r2, #0
 80070c6:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80070de:	2181      	movs	r1, #129	; 0x81
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fc84 	bl	80089ee <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	4618      	mov	r0, r3
 80070fe:	f001 fd71 	bl	8008be4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007124:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800713e:	2b00      	cmp	r3, #0
 8007140:	d045      	beq.n	80071ce <USBD_HID_Setup+0xba>
 8007142:	2b20      	cmp	r3, #32
 8007144:	f040 80d3 	bne.w	80072ee <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	785b      	ldrb	r3, [r3, #1]
 800714c:	3b02      	subs	r3, #2
 800714e:	2b09      	cmp	r3, #9
 8007150:	d835      	bhi.n	80071be <USBD_HID_Setup+0xaa>
 8007152:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <USBD_HID_Setup+0x44>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	080071af 	.word	0x080071af
 800715c:	0800718f 	.word	0x0800718f
 8007160:	080071bf 	.word	0x080071bf
 8007164:	080071bf 	.word	0x080071bf
 8007168:	080071bf 	.word	0x080071bf
 800716c:	080071bf 	.word	0x080071bf
 8007170:	080071bf 	.word	0x080071bf
 8007174:	080071bf 	.word	0x080071bf
 8007178:	0800719d 	.word	0x0800719d
 800717c:	08007181 	.word	0x08007181
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	885b      	ldrh	r3, [r3, #2]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	601a      	str	r2, [r3, #0]
          break;
 800718c:	e01e      	b.n	80071cc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2201      	movs	r2, #1
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 f944 	bl	8008422 <USBD_CtlSendData>
          break;
 800719a:	e017      	b.n	80071cc <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	885b      	ldrh	r3, [r3, #2]
 80071a0:	0a1b      	lsrs	r3, r3, #8
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	461a      	mov	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	605a      	str	r2, [r3, #4]
          break;
 80071ac:	e00e      	b.n	80071cc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	3304      	adds	r3, #4
 80071b2:	2201      	movs	r2, #1
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 f933 	bl	8008422 <USBD_CtlSendData>
          break;
 80071bc:	e006      	b.n	80071cc <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 f8c4 	bl	800834e <USBD_CtlError>
          ret = USBD_FAIL;
 80071c6:	2302      	movs	r3, #2
 80071c8:	75fb      	strb	r3, [r7, #23]
          break;
 80071ca:	bf00      	nop
      }
      break;
 80071cc:	e096      	b.n	80072fc <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b0b      	cmp	r3, #11
 80071d4:	f200 8083 	bhi.w	80072de <USBD_HID_Setup+0x1ca>
 80071d8:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <USBD_HID_Setup+0xcc>)
 80071da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071de:	bf00      	nop
 80071e0:	08007211 	.word	0x08007211
 80071e4:	080072df 	.word	0x080072df
 80071e8:	080072df 	.word	0x080072df
 80071ec:	080072df 	.word	0x080072df
 80071f0:	080072df 	.word	0x080072df
 80071f4:	080072df 	.word	0x080072df
 80071f8:	08007239 	.word	0x08007239
 80071fc:	080072df 	.word	0x080072df
 8007200:	080072df 	.word	0x080072df
 8007204:	080072df 	.word	0x080072df
 8007208:	08007291 	.word	0x08007291
 800720c:	080072b9 	.word	0x080072b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007216:	2b03      	cmp	r3, #3
 8007218:	d107      	bne.n	800722a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800721a:	f107 030e 	add.w	r3, r7, #14
 800721e:	2202      	movs	r2, #2
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 f8fd 	bl	8008422 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007228:	e060      	b.n	80072ec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 f88e 	bl	800834e <USBD_CtlError>
            ret = USBD_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	75fb      	strb	r3, [r7, #23]
          break;
 8007236:	e059      	b.n	80072ec <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	885b      	ldrh	r3, [r3, #2]
 800723c:	0a1b      	lsrs	r3, r3, #8
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b22      	cmp	r3, #34	; 0x22
 8007242:	d108      	bne.n	8007256 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	88db      	ldrh	r3, [r3, #6]
 8007248:	2b3f      	cmp	r3, #63	; 0x3f
 800724a:	bf28      	it	cs
 800724c:	233f      	movcs	r3, #63	; 0x3f
 800724e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007250:	4b2d      	ldr	r3, [pc, #180]	; (8007308 <USBD_HID_Setup+0x1f4>)
 8007252:	61bb      	str	r3, [r7, #24]
 8007254:	e015      	b.n	8007282 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	0a1b      	lsrs	r3, r3, #8
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b21      	cmp	r3, #33	; 0x21
 8007260:	d108      	bne.n	8007274 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007262:	4b2a      	ldr	r3, [pc, #168]	; (800730c <USBD_HID_Setup+0x1f8>)
 8007264:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	88db      	ldrh	r3, [r3, #6]
 800726a:	2b09      	cmp	r3, #9
 800726c:	bf28      	it	cs
 800726e:	2309      	movcs	r3, #9
 8007270:	83fb      	strh	r3, [r7, #30]
 8007272:	e006      	b.n	8007282 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 f869 	bl	800834e <USBD_CtlError>
            ret = USBD_FAIL;
 800727c:	2302      	movs	r3, #2
 800727e:	75fb      	strb	r3, [r7, #23]
            break;
 8007280:	e034      	b.n	80072ec <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007282:	8bfb      	ldrh	r3, [r7, #30]
 8007284:	461a      	mov	r2, r3
 8007286:	69b9      	ldr	r1, [r7, #24]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 f8ca 	bl	8008422 <USBD_CtlSendData>
          break;
 800728e:	e02d      	b.n	80072ec <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007296:	2b03      	cmp	r3, #3
 8007298:	d107      	bne.n	80072aa <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	3308      	adds	r3, #8
 800729e:	2201      	movs	r2, #1
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 f8bd 	bl	8008422 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072a8:	e020      	b.n	80072ec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f001 f84e 	bl	800834e <USBD_CtlError>
            ret = USBD_FAIL;
 80072b2:	2302      	movs	r3, #2
 80072b4:	75fb      	strb	r3, [r7, #23]
          break;
 80072b6:	e019      	b.n	80072ec <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d106      	bne.n	80072d0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	885b      	ldrh	r3, [r3, #2]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072ce:	e00d      	b.n	80072ec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 f83b 	bl	800834e <USBD_CtlError>
            ret = USBD_FAIL;
 80072d8:	2302      	movs	r3, #2
 80072da:	75fb      	strb	r3, [r7, #23]
          break;
 80072dc:	e006      	b.n	80072ec <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 f834 	bl	800834e <USBD_CtlError>
          ret = USBD_FAIL;
 80072e6:	2302      	movs	r3, #2
 80072e8:	75fb      	strb	r3, [r7, #23]
          break;
 80072ea:	bf00      	nop
      }
      break;
 80072ec:	e006      	b.n	80072fc <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 f82c 	bl	800834e <USBD_CtlError>
      ret = USBD_FAIL;
 80072f6:	2302      	movs	r3, #2
 80072f8:	75fb      	strb	r3, [r7, #23]
      break;
 80072fa:	bf00      	nop
  }

  return ret;
 80072fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	200005c8 	.word	0x200005c8
 800730c:	200005b0 	.word	0x200005b0

08007310 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007324:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732c:	2b03      	cmp	r3, #3
 800732e:	d10c      	bne.n	800734a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	7b1b      	ldrb	r3, [r3, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d108      	bne.n	800734a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	2201      	movs	r2, #1
 800733c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	2181      	movs	r1, #129	; 0x81
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f001 fbfa 	bl	8008b3e <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2222      	movs	r2, #34	; 0x22
 8007360:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007362:	4b03      	ldr	r3, [pc, #12]	; (8007370 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	bc80      	pop	{r7}
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	20000544 	.word	0x20000544

08007374 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2222      	movs	r2, #34	; 0x22
 8007380:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007382:	4b03      	ldr	r3, [pc, #12]	; (8007390 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	bc80      	pop	{r7}
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20000568 	.word	0x20000568

08007394 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2222      	movs	r2, #34	; 0x22
 80073a0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80073a2:	4b03      	ldr	r3, [pc, #12]	; (80073b0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bc80      	pop	{r7}
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	2000058c 	.word	0x2000058c

080073b4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c6:	2200      	movs	r2, #0
 80073c8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr
	...

080073d8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	220a      	movs	r2, #10
 80073e4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80073e6:	4b03      	ldr	r3, [pc, #12]	; (80073f4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bc80      	pop	{r7}
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	200005bc 	.word	0x200005bc

080073f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800740c:	2302      	movs	r3, #2
 800740e:	e01a      	b.n	8007446 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	79fa      	ldrb	r2, [r7, #7]
 800743c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f001 fa4c 	bl	80088dc <USBD_LL_Init>

  return USBD_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800744e:	b480      	push	{r7}
 8007450:	b085      	sub	sp, #20
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d006      	beq.n	8007470 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
 800746e:	e001      	b.n	8007474 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007470:	2302      	movs	r3, #2
 8007472:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr

08007480 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 fa6f 	bl	800896c <USBD_LL_Start>

  return USBD_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bc80      	pop	{r7}
 80074aa:	4770      	bx	lr

080074ac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80074b8:	2302      	movs	r3, #2
 80074ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00c      	beq.n	80074e0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	4611      	mov	r1, r2
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	4798      	blx	r3
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b082      	sub	sp, #8
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	460b      	mov	r3, r1
 80074f4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	4611      	mov	r1, r2
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	4798      	blx	r3

  return USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	4618      	mov	r0, r3
 8007524:	f000 fed7 	bl	80082d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007536:	461a      	mov	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007544:	f003 031f 	and.w	r3, r3, #31
 8007548:	2b02      	cmp	r3, #2
 800754a:	d016      	beq.n	800757a <USBD_LL_SetupStage+0x6a>
 800754c:	2b02      	cmp	r3, #2
 800754e:	d81c      	bhi.n	800758a <USBD_LL_SetupStage+0x7a>
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <USBD_LL_SetupStage+0x4a>
 8007554:	2b01      	cmp	r3, #1
 8007556:	d008      	beq.n	800756a <USBD_LL_SetupStage+0x5a>
 8007558:	e017      	b.n	800758a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f9ca 	bl	80078fc <USBD_StdDevReq>
      break;
 8007568:	e01a      	b.n	80075a0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa2c 	bl	80079d0 <USBD_StdItfReq>
      break;
 8007578:	e012      	b.n	80075a0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fa6c 	bl	8007a60 <USBD_StdEPReq>
      break;
 8007588:	e00a      	b.n	80075a0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007590:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007594:	b2db      	uxtb	r3, r3
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f001 fa47 	bl	8008a2c <USBD_LL_StallEP>
      break;
 800759e:	bf00      	nop
  }

  return USBD_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b086      	sub	sp, #24
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	460b      	mov	r3, r1
 80075b4:	607a      	str	r2, [r7, #4]
 80075b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075b8:	7afb      	ldrb	r3, [r7, #11]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d14b      	bne.n	8007656 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80075c4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d134      	bne.n	800763a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d919      	bls.n	8007610 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	68da      	ldr	r2, [r3, #12]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	1ad2      	subs	r2, r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d203      	bcs.n	80075fe <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	e002      	b.n	8007604 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007602:	b29b      	uxth	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 ff38 	bl	800847e <USBD_CtlContinueRx>
 800760e:	e038      	b.n	8007682 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007622:	2b03      	cmp	r3, #3
 8007624:	d105      	bne.n	8007632 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 ff35 	bl	80084a2 <USBD_CtlSendStatus>
 8007638:	e023      	b.n	8007682 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007640:	2b05      	cmp	r3, #5
 8007642:	d11e      	bne.n	8007682 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800764c:	2100      	movs	r1, #0
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f001 f9ec 	bl	8008a2c <USBD_LL_StallEP>
 8007654:	e015      	b.n	8007682 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00d      	beq.n	800767e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007668:	2b03      	cmp	r3, #3
 800766a:	d108      	bne.n	800767e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	7afa      	ldrb	r2, [r7, #11]
 8007676:	4611      	mov	r1, r2
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	4798      	blx	r3
 800767c:	e001      	b.n	8007682 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800767e:	2302      	movs	r3, #2
 8007680:	e000      	b.n	8007684 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	460b      	mov	r3, r1
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d17f      	bne.n	80077a0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3314      	adds	r3, #20
 80076a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d15c      	bne.n	800776a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d915      	bls.n	80076e8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	1ad2      	subs	r2, r2, r3
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	6879      	ldr	r1, [r7, #4]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 fec0 	bl	800845a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076da:	2300      	movs	r3, #0
 80076dc:	2200      	movs	r2, #0
 80076de:	2100      	movs	r1, #0
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f001 fa4f 	bl	8008b84 <USBD_LL_PrepareReceive>
 80076e6:	e04e      	b.n	8007786 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	6912      	ldr	r2, [r2, #16]
 80076f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80076f4:	fb01 f202 	mul.w	r2, r1, r2
 80076f8:	1a9b      	subs	r3, r3, r2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d11c      	bne.n	8007738 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007706:	429a      	cmp	r2, r3
 8007708:	d316      	bcc.n	8007738 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007714:	429a      	cmp	r2, r3
 8007716:	d20f      	bcs.n	8007738 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007718:	2200      	movs	r2, #0
 800771a:	2100      	movs	r1, #0
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 fe9c 	bl	800845a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800772a:	2300      	movs	r3, #0
 800772c:	2200      	movs	r2, #0
 800772e:	2100      	movs	r1, #0
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f001 fa27 	bl	8008b84 <USBD_LL_PrepareReceive>
 8007736:	e026      	b.n	8007786 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00a      	beq.n	800775a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800774a:	2b03      	cmp	r3, #3
 800774c:	d105      	bne.n	800775a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800775a:	2180      	movs	r1, #128	; 0x80
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f001 f965 	bl	8008a2c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 feb0 	bl	80084c8 <USBD_CtlReceiveStatus>
 8007768:	e00d      	b.n	8007786 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007770:	2b04      	cmp	r3, #4
 8007772:	d004      	beq.n	800777e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800777a:	2b00      	cmp	r3, #0
 800777c:	d103      	bne.n	8007786 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800777e:	2180      	movs	r1, #128	; 0x80
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f001 f953 	bl	8008a2c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800778c:	2b01      	cmp	r3, #1
 800778e:	d11d      	bne.n	80077cc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f7ff fe81 	bl	8007498 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800779e:	e015      	b.n	80077cc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00d      	beq.n	80077c8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d108      	bne.n	80077c8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	7afa      	ldrb	r2, [r7, #11]
 80077c0:	4611      	mov	r1, r2
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	4798      	blx	r3
 80077c6:	e001      	b.n	80077cc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077c8:	2302      	movs	r3, #2
 80077ca:	e000      	b.n	80077ce <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077de:	2340      	movs	r3, #64	; 0x40
 80077e0:	2200      	movs	r2, #0
 80077e2:	2100      	movs	r1, #0
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f8dc 	bl	80089a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2240      	movs	r2, #64	; 0x40
 80077f6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077fa:	2340      	movs	r3, #64	; 0x40
 80077fc:	2200      	movs	r2, #0
 80077fe:	2180      	movs	r1, #128	; 0x80
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 f8ce 	bl	80089a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2240      	movs	r2, #64	; 0x40
 8007810:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007836:	2b00      	cmp	r3, #0
 8007838:	d009      	beq.n	800784e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6852      	ldr	r2, [r2, #4]
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	4611      	mov	r1, r2
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	4798      	blx	r3
  }

  return USBD_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	78fa      	ldrb	r2, [r7, #3]
 8007868:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr

08007876 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2204      	movs	r2, #4
 800788e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	bc80      	pop	{r7}
 800789c:	4770      	bx	lr

0800789e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d105      	bne.n	80078bc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr

080078c8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d10b      	bne.n	80078f2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d005      	beq.n	80078f2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d005      	beq.n	8007922 <USBD_StdDevReq+0x26>
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	d84f      	bhi.n	80079ba <USBD_StdDevReq+0xbe>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <USBD_StdDevReq+0x36>
 800791e:	2b20      	cmp	r3, #32
 8007920:	d14b      	bne.n	80079ba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	4798      	blx	r3
      break;
 8007930:	e048      	b.n	80079c4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b09      	cmp	r3, #9
 8007938:	d839      	bhi.n	80079ae <USBD_StdDevReq+0xb2>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <USBD_StdDevReq+0x44>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007991 	.word	0x08007991
 8007944:	080079a5 	.word	0x080079a5
 8007948:	080079af 	.word	0x080079af
 800794c:	0800799b 	.word	0x0800799b
 8007950:	080079af 	.word	0x080079af
 8007954:	08007973 	.word	0x08007973
 8007958:	08007969 	.word	0x08007969
 800795c:	080079af 	.word	0x080079af
 8007960:	08007987 	.word	0x08007987
 8007964:	0800797d 	.word	0x0800797d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f9dc 	bl	8007d28 <USBD_GetDescriptor>
          break;
 8007970:	e022      	b.n	80079b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fb3f 	bl	8007ff8 <USBD_SetAddress>
          break;
 800797a:	e01d      	b.n	80079b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fb7e 	bl	8008080 <USBD_SetConfig>
          break;
 8007984:	e018      	b.n	80079b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fc07 	bl	800819c <USBD_GetConfig>
          break;
 800798e:	e013      	b.n	80079b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fc37 	bl	8008206 <USBD_GetStatus>
          break;
 8007998:	e00e      	b.n	80079b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fc65 	bl	800826c <USBD_SetFeature>
          break;
 80079a2:	e009      	b.n	80079b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fc74 	bl	8008294 <USBD_ClrFeature>
          break;
 80079ac:	e004      	b.n	80079b8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fccc 	bl	800834e <USBD_CtlError>
          break;
 80079b6:	bf00      	nop
      }
      break;
 80079b8:	e004      	b.n	80079c4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fcc6 	bl	800834e <USBD_CtlError>
      break;
 80079c2:	bf00      	nop
  }

  return ret;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop

080079d0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079e6:	2b40      	cmp	r3, #64	; 0x40
 80079e8:	d005      	beq.n	80079f6 <USBD_StdItfReq+0x26>
 80079ea:	2b40      	cmp	r3, #64	; 0x40
 80079ec:	d82e      	bhi.n	8007a4c <USBD_StdItfReq+0x7c>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <USBD_StdItfReq+0x26>
 80079f2:	2b20      	cmp	r3, #32
 80079f4:	d12a      	bne.n	8007a4c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079fc:	3b01      	subs	r3, #1
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d81d      	bhi.n	8007a3e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	889b      	ldrh	r3, [r3, #4]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d813      	bhi.n	8007a34 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	88db      	ldrh	r3, [r3, #6]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d110      	bne.n	8007a48 <USBD_StdItfReq+0x78>
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10d      	bne.n	8007a48 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fd38 	bl	80084a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a32:	e009      	b.n	8007a48 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fc89 	bl	800834e <USBD_CtlError>
          break;
 8007a3c:	e004      	b.n	8007a48 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fc84 	bl	800834e <USBD_CtlError>
          break;
 8007a46:	e000      	b.n	8007a4a <USBD_StdItfReq+0x7a>
          break;
 8007a48:	bf00      	nop
      }
      break;
 8007a4a:	e004      	b.n	8007a56 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fc7d 	bl	800834e <USBD_CtlError>
      break;
 8007a54:	bf00      	nop
  }

  return USBD_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	889b      	ldrh	r3, [r3, #4]
 8007a72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a7c:	2b40      	cmp	r3, #64	; 0x40
 8007a7e:	d007      	beq.n	8007a90 <USBD_StdEPReq+0x30>
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	f200 8146 	bhi.w	8007d12 <USBD_StdEPReq+0x2b2>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <USBD_StdEPReq+0x40>
 8007a8a:	2b20      	cmp	r3, #32
 8007a8c:	f040 8141 	bne.w	8007d12 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4798      	blx	r3
      break;
 8007a9e:	e13d      	b.n	8007d1c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	d10a      	bne.n	8007ac2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
 8007aba:	4603      	mov	r3, r0
 8007abc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	e12d      	b.n	8007d1e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d007      	beq.n	8007ada <USBD_StdEPReq+0x7a>
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	f300 811b 	bgt.w	8007d06 <USBD_StdEPReq+0x2a6>
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d072      	beq.n	8007bba <USBD_StdEPReq+0x15a>
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d03a      	beq.n	8007b4e <USBD_StdEPReq+0xee>
 8007ad8:	e115      	b.n	8007d06 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d002      	beq.n	8007aea <USBD_StdEPReq+0x8a>
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d015      	beq.n	8007b14 <USBD_StdEPReq+0xb4>
 8007ae8:	e02b      	b.n	8007b42 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00c      	beq.n	8007b0a <USBD_StdEPReq+0xaa>
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	2b80      	cmp	r3, #128	; 0x80
 8007af4:	d009      	beq.n	8007b0a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 ff96 	bl	8008a2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b00:	2180      	movs	r1, #128	; 0x80
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 ff92 	bl	8008a2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b08:	e020      	b.n	8007b4c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fc1e 	bl	800834e <USBD_CtlError>
              break;
 8007b12:	e01b      	b.n	8007b4c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	885b      	ldrh	r3, [r3, #2]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10e      	bne.n	8007b3a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00b      	beq.n	8007b3a <USBD_StdEPReq+0xda>
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	2b80      	cmp	r3, #128	; 0x80
 8007b26:	d008      	beq.n	8007b3a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	88db      	ldrh	r3, [r3, #6]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 ff79 	bl	8008a2c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fcb1 	bl	80084a2 <USBD_CtlSendStatus>

              break;
 8007b40:	e004      	b.n	8007b4c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fc02 	bl	800834e <USBD_CtlError>
              break;
 8007b4a:	bf00      	nop
          }
          break;
 8007b4c:	e0e0      	b.n	8007d10 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d002      	beq.n	8007b5e <USBD_StdEPReq+0xfe>
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d015      	beq.n	8007b88 <USBD_StdEPReq+0x128>
 8007b5c:	e026      	b.n	8007bac <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00c      	beq.n	8007b7e <USBD_StdEPReq+0x11e>
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	2b80      	cmp	r3, #128	; 0x80
 8007b68:	d009      	beq.n	8007b7e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 ff5c 	bl	8008a2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b74:	2180      	movs	r1, #128	; 0x80
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 ff58 	bl	8008a2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b7c:	e01c      	b.n	8007bb8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fbe4 	bl	800834e <USBD_CtlError>
              break;
 8007b86:	e017      	b.n	8007bb8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	885b      	ldrh	r3, [r3, #2]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d112      	bne.n	8007bb6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d004      	beq.n	8007ba4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 ff63 	bl	8008a6a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fc7c 	bl	80084a2 <USBD_CtlSendStatus>
              }
              break;
 8007baa:	e004      	b.n	8007bb6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fbcd 	bl	800834e <USBD_CtlError>
              break;
 8007bb4:	e000      	b.n	8007bb8 <USBD_StdEPReq+0x158>
              break;
 8007bb6:	bf00      	nop
          }
          break;
 8007bb8:	e0aa      	b.n	8007d10 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d002      	beq.n	8007bca <USBD_StdEPReq+0x16a>
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d032      	beq.n	8007c2e <USBD_StdEPReq+0x1ce>
 8007bc8:	e097      	b.n	8007cfa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d007      	beq.n	8007be0 <USBD_StdEPReq+0x180>
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	2b80      	cmp	r3, #128	; 0x80
 8007bd4:	d004      	beq.n	8007be0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fbb8 	bl	800834e <USBD_CtlError>
                break;
 8007bde:	e091      	b.n	8007d04 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	da0b      	bge.n	8007c00 <USBD_StdEPReq+0x1a0>
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	3310      	adds	r3, #16
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	e00b      	b.n	8007c18 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	4413      	add	r3, r2
 8007c16:	3304      	adds	r3, #4
 8007c18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2202      	movs	r2, #2
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fbfb 	bl	8008422 <USBD_CtlSendData>
              break;
 8007c2c:	e06a      	b.n	8007d04 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	da11      	bge.n	8007c5a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	f003 020f 	and.w	r2, r3, #15
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	440b      	add	r3, r1
 8007c48:	3318      	adds	r3, #24
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d117      	bne.n	8007c80 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fb7b 	bl	800834e <USBD_CtlError>
                  break;
 8007c58:	e054      	b.n	8007d04 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
 8007c5c:	f003 020f 	and.w	r2, r3, #15
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d104      	bne.n	8007c80 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fb68 	bl	800834e <USBD_CtlError>
                  break;
 8007c7e:	e041      	b.n	8007d04 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	da0b      	bge.n	8007ca0 <USBD_StdEPReq+0x240>
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
 8007c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	3310      	adds	r3, #16
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	e00b      	b.n	8007cb8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <USBD_StdEPReq+0x266>
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2b80      	cmp	r3, #128	; 0x80
 8007cc4:	d103      	bne.n	8007cce <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	e00e      	b.n	8007cec <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fee8 	bl	8008aa8 <USBD_LL_IsStallEP>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	e002      	b.n	8007cec <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fb95 	bl	8008422 <USBD_CtlSendData>
              break;
 8007cf8:	e004      	b.n	8007d04 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fb26 	bl	800834e <USBD_CtlError>
              break;
 8007d02:	bf00      	nop
          }
          break;
 8007d04:	e004      	b.n	8007d10 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fb20 	bl	800834e <USBD_CtlError>
          break;
 8007d0e:	bf00      	nop
      }
      break;
 8007d10:	e004      	b.n	8007d1c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fb1a 	bl	800834e <USBD_CtlError>
      break;
 8007d1a:	bf00      	nop
  }

  return ret;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	885b      	ldrh	r3, [r3, #2]
 8007d42:	0a1b      	lsrs	r3, r3, #8
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b01      	subs	r3, #1
 8007d48:	2b06      	cmp	r3, #6
 8007d4a:	f200 8128 	bhi.w	8007f9e <USBD_GetDescriptor+0x276>
 8007d4e:	a201      	add	r2, pc, #4	; (adr r2, 8007d54 <USBD_GetDescriptor+0x2c>)
 8007d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d54:	08007d71 	.word	0x08007d71
 8007d58:	08007d89 	.word	0x08007d89
 8007d5c:	08007dc9 	.word	0x08007dc9
 8007d60:	08007f9f 	.word	0x08007f9f
 8007d64:	08007f9f 	.word	0x08007f9f
 8007d68:	08007f3f 	.word	0x08007f3f
 8007d6c:	08007f6b 	.word	0x08007f6b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	7c12      	ldrb	r2, [r2, #16]
 8007d7c:	f107 0108 	add.w	r1, r7, #8
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
 8007d84:	60f8      	str	r0, [r7, #12]
      break;
 8007d86:	e112      	b.n	8007fae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	7c1b      	ldrb	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10d      	bne.n	8007dac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d98:	f107 0208 	add.w	r2, r7, #8
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
 8007da0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3301      	adds	r3, #1
 8007da6:	2202      	movs	r2, #2
 8007da8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007daa:	e100      	b.n	8007fae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	f107 0208 	add.w	r2, r7, #8
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	701a      	strb	r2, [r3, #0]
      break;
 8007dc6:	e0f2      	b.n	8007fae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	885b      	ldrh	r3, [r3, #2]
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	f200 80ac 	bhi.w	8007f2c <USBD_GetDescriptor+0x204>
 8007dd4:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <USBD_GetDescriptor+0xb4>)
 8007dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dda:	bf00      	nop
 8007ddc:	08007df5 	.word	0x08007df5
 8007de0:	08007e29 	.word	0x08007e29
 8007de4:	08007e5d 	.word	0x08007e5d
 8007de8:	08007e91 	.word	0x08007e91
 8007dec:	08007ec5 	.word	0x08007ec5
 8007df0:	08007ef9 	.word	0x08007ef9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00b      	beq.n	8007e18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	7c12      	ldrb	r2, [r2, #16]
 8007e0c:	f107 0108 	add.w	r1, r7, #8
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e16:	e091      	b.n	8007f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fa97 	bl	800834e <USBD_CtlError>
            err++;
 8007e20:	7afb      	ldrb	r3, [r7, #11]
 8007e22:	3301      	adds	r3, #1
 8007e24:	72fb      	strb	r3, [r7, #11]
          break;
 8007e26:	e089      	b.n	8007f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00b      	beq.n	8007e4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	7c12      	ldrb	r2, [r2, #16]
 8007e40:	f107 0108 	add.w	r1, r7, #8
 8007e44:	4610      	mov	r0, r2
 8007e46:	4798      	blx	r3
 8007e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e4a:	e077      	b.n	8007f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fa7d 	bl	800834e <USBD_CtlError>
            err++;
 8007e54:	7afb      	ldrb	r3, [r7, #11]
 8007e56:	3301      	adds	r3, #1
 8007e58:	72fb      	strb	r3, [r7, #11]
          break;
 8007e5a:	e06f      	b.n	8007f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	7c12      	ldrb	r2, [r2, #16]
 8007e74:	f107 0108 	add.w	r1, r7, #8
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4798      	blx	r3
 8007e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7e:	e05d      	b.n	8007f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa63 	bl	800834e <USBD_CtlError>
            err++;
 8007e88:	7afb      	ldrb	r3, [r7, #11]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8e:	e055      	b.n	8007f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00b      	beq.n	8007eb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	7c12      	ldrb	r2, [r2, #16]
 8007ea8:	f107 0108 	add.w	r1, r7, #8
 8007eac:	4610      	mov	r0, r2
 8007eae:	4798      	blx	r3
 8007eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eb2:	e043      	b.n	8007f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fa49 	bl	800834e <USBD_CtlError>
            err++;
 8007ebc:	7afb      	ldrb	r3, [r7, #11]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ec2:	e03b      	b.n	8007f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00b      	beq.n	8007ee8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	7c12      	ldrb	r2, [r2, #16]
 8007edc:	f107 0108 	add.w	r1, r7, #8
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4798      	blx	r3
 8007ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ee6:	e029      	b.n	8007f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa2f 	bl	800834e <USBD_CtlError>
            err++;
 8007ef0:	7afb      	ldrb	r3, [r7, #11]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ef6:	e021      	b.n	8007f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00b      	beq.n	8007f1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	7c12      	ldrb	r2, [r2, #16]
 8007f10:	f107 0108 	add.w	r1, r7, #8
 8007f14:	4610      	mov	r0, r2
 8007f16:	4798      	blx	r3
 8007f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f1a:	e00f      	b.n	8007f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa15 	bl	800834e <USBD_CtlError>
            err++;
 8007f24:	7afb      	ldrb	r3, [r7, #11]
 8007f26:	3301      	adds	r3, #1
 8007f28:	72fb      	strb	r3, [r7, #11]
          break;
 8007f2a:	e007      	b.n	8007f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fa0d 	bl	800834e <USBD_CtlError>
          err++;
 8007f34:	7afb      	ldrb	r3, [r7, #11]
 8007f36:	3301      	adds	r3, #1
 8007f38:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007f3a:	e038      	b.n	8007fae <USBD_GetDescriptor+0x286>
 8007f3c:	e037      	b.n	8007fae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7c1b      	ldrb	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d109      	bne.n	8007f5a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4e:	f107 0208 	add.w	r2, r7, #8
 8007f52:	4610      	mov	r0, r2
 8007f54:	4798      	blx	r3
 8007f56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f58:	e029      	b.n	8007fae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f9f6 	bl	800834e <USBD_CtlError>
        err++;
 8007f62:	7afb      	ldrb	r3, [r7, #11]
 8007f64:	3301      	adds	r3, #1
 8007f66:	72fb      	strb	r3, [r7, #11]
      break;
 8007f68:	e021      	b.n	8007fae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	7c1b      	ldrb	r3, [r3, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10d      	bne.n	8007f8e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7a:	f107 0208 	add.w	r2, r7, #8
 8007f7e:	4610      	mov	r0, r2
 8007f80:	4798      	blx	r3
 8007f82:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3301      	adds	r3, #1
 8007f88:	2207      	movs	r2, #7
 8007f8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f8c:	e00f      	b.n	8007fae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f9dc 	bl	800834e <USBD_CtlError>
        err++;
 8007f96:	7afb      	ldrb	r3, [r7, #11]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f9c:	e007      	b.n	8007fae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f9d4 	bl	800834e <USBD_CtlError>
      err++;
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	72fb      	strb	r3, [r7, #11]
      break;
 8007fac:	bf00      	nop
  }

  if (err != 0U)
 8007fae:	7afb      	ldrb	r3, [r7, #11]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d11c      	bne.n	8007fee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007fb4:	893b      	ldrh	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d011      	beq.n	8007fde <USBD_GetDescriptor+0x2b6>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	88db      	ldrh	r3, [r3, #6]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00d      	beq.n	8007fde <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	88da      	ldrh	r2, [r3, #6]
 8007fc6:	893b      	ldrh	r3, [r7, #8]
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	bf28      	it	cs
 8007fcc:	4613      	movcs	r3, r2
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fd2:	893b      	ldrh	r3, [r7, #8]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	68f9      	ldr	r1, [r7, #12]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fa22 	bl	8008422 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	88db      	ldrh	r3, [r3, #6]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d104      	bne.n	8007ff0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fa5b 	bl	80084a2 <USBD_CtlSendStatus>
 8007fec:	e000      	b.n	8007ff0 <USBD_GetDescriptor+0x2c8>
    return;
 8007fee:	bf00      	nop
    }
  }
}
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop

08007ff8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	889b      	ldrh	r3, [r3, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d130      	bne.n	800806c <USBD_SetAddress+0x74>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	88db      	ldrh	r3, [r3, #6]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d12c      	bne.n	800806c <USBD_SetAddress+0x74>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	885b      	ldrh	r3, [r3, #2]
 8008016:	2b7f      	cmp	r3, #127	; 0x7f
 8008018:	d828      	bhi.n	800806c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	885b      	ldrh	r3, [r3, #2]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008024:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800802c:	2b03      	cmp	r3, #3
 800802e:	d104      	bne.n	800803a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f98b 	bl	800834e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008038:	e01d      	b.n	8008076 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	7bfa      	ldrb	r2, [r7, #15]
 800803e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008042:	7bfb      	ldrb	r3, [r7, #15]
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fd5a 	bl	8008b00 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fa28 	bl	80084a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008060:	e009      	b.n	8008076 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806a:	e004      	b.n	8008076 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f96d 	bl	800834e <USBD_CtlError>
  }
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	885b      	ldrh	r3, [r3, #2]
 800808e:	b2da      	uxtb	r2, r3
 8008090:	4b41      	ldr	r3, [pc, #260]	; (8008198 <USBD_SetConfig+0x118>)
 8008092:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008094:	4b40      	ldr	r3, [pc, #256]	; (8008198 <USBD_SetConfig+0x118>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d904      	bls.n	80080a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f955 	bl	800834e <USBD_CtlError>
 80080a4:	e075      	b.n	8008192 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d002      	beq.n	80080b6 <USBD_SetConfig+0x36>
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	d023      	beq.n	80080fc <USBD_SetConfig+0x7c>
 80080b4:	e062      	b.n	800817c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80080b6:	4b38      	ldr	r3, [pc, #224]	; (8008198 <USBD_SetConfig+0x118>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d01a      	beq.n	80080f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80080be:	4b36      	ldr	r3, [pc, #216]	; (8008198 <USBD_SetConfig+0x118>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2203      	movs	r2, #3
 80080cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080d0:	4b31      	ldr	r3, [pc, #196]	; (8008198 <USBD_SetConfig+0x118>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff f9e8 	bl	80074ac <USBD_SetClassConfig>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d104      	bne.n	80080ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f932 	bl	800834e <USBD_CtlError>
            return;
 80080ea:	e052      	b.n	8008192 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f9d8 	bl	80084a2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080f2:	e04e      	b.n	8008192 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f9d4 	bl	80084a2 <USBD_CtlSendStatus>
        break;
 80080fa:	e04a      	b.n	8008192 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80080fc:	4b26      	ldr	r3, [pc, #152]	; (8008198 <USBD_SetConfig+0x118>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d112      	bne.n	800812a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2202      	movs	r2, #2
 8008108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800810c:	4b22      	ldr	r3, [pc, #136]	; (8008198 <USBD_SetConfig+0x118>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008116:	4b20      	ldr	r3, [pc, #128]	; (8008198 <USBD_SetConfig+0x118>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff f9e4 	bl	80074ea <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f9bd 	bl	80084a2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008128:	e033      	b.n	8008192 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800812a:	4b1b      	ldr	r3, [pc, #108]	; (8008198 <USBD_SetConfig+0x118>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	429a      	cmp	r2, r3
 8008136:	d01d      	beq.n	8008174 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff f9d2 	bl	80074ea <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <USBD_SetConfig+0x118>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008150:	4b11      	ldr	r3, [pc, #68]	; (8008198 <USBD_SetConfig+0x118>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff f9a8 	bl	80074ac <USBD_SetClassConfig>
 800815c:	4603      	mov	r3, r0
 800815e:	2b02      	cmp	r3, #2
 8008160:	d104      	bne.n	800816c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f8f2 	bl	800834e <USBD_CtlError>
            return;
 800816a:	e012      	b.n	8008192 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f998 	bl	80084a2 <USBD_CtlSendStatus>
        break;
 8008172:	e00e      	b.n	8008192 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f994 	bl	80084a2 <USBD_CtlSendStatus>
        break;
 800817a:	e00a      	b.n	8008192 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f8e5 	bl	800834e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008184:	4b04      	ldr	r3, [pc, #16]	; (8008198 <USBD_SetConfig+0x118>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff f9ad 	bl	80074ea <USBD_ClrClassConfig>
        break;
 8008190:	bf00      	nop
    }
  }
}
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	200006d4 	.word	0x200006d4

0800819c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	88db      	ldrh	r3, [r3, #6]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d004      	beq.n	80081b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f8cc 	bl	800834e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081b6:	e022      	b.n	80081fe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081be:	2b02      	cmp	r3, #2
 80081c0:	dc02      	bgt.n	80081c8 <USBD_GetConfig+0x2c>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	dc03      	bgt.n	80081ce <USBD_GetConfig+0x32>
 80081c6:	e015      	b.n	80081f4 <USBD_GetConfig+0x58>
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d00b      	beq.n	80081e4 <USBD_GetConfig+0x48>
 80081cc:	e012      	b.n	80081f4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	3308      	adds	r3, #8
 80081d8:	2201      	movs	r2, #1
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f920 	bl	8008422 <USBD_CtlSendData>
        break;
 80081e2:	e00c      	b.n	80081fe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3304      	adds	r3, #4
 80081e8:	2201      	movs	r2, #1
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f918 	bl	8008422 <USBD_CtlSendData>
        break;
 80081f2:	e004      	b.n	80081fe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f8a9 	bl	800834e <USBD_CtlError>
        break;
 80081fc:	bf00      	nop
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008216:	3b01      	subs	r3, #1
 8008218:	2b02      	cmp	r3, #2
 800821a:	d81e      	bhi.n	800825a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	88db      	ldrh	r3, [r3, #6]
 8008220:	2b02      	cmp	r3, #2
 8008222:	d004      	beq.n	800822e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f891 	bl	800834e <USBD_CtlError>
        break;
 800822c:	e01a      	b.n	8008264 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f043 0202 	orr.w	r2, r3, #2
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	330c      	adds	r3, #12
 800824e:	2202      	movs	r2, #2
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f8e5 	bl	8008422 <USBD_CtlSendData>
      break;
 8008258:	e004      	b.n	8008264 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f876 	bl	800834e <USBD_CtlError>
      break;
 8008262:	bf00      	nop
  }
}
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	885b      	ldrh	r3, [r3, #2]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d106      	bne.n	800828c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f90b 	bl	80084a2 <USBD_CtlSendStatus>
  }
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a4:	3b01      	subs	r3, #1
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d80b      	bhi.n	80082c2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	885b      	ldrh	r3, [r3, #2]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d10c      	bne.n	80082cc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f8f1 	bl	80084a2 <USBD_CtlSendStatus>
      }
      break;
 80082c0:	e004      	b.n	80082cc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f842 	bl	800834e <USBD_CtlError>
      break;
 80082ca:	e000      	b.n	80082ce <USBD_ClrFeature+0x3a>
      break;
 80082cc:	bf00      	nop
  }
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	785a      	ldrb	r2, [r3, #1]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	3302      	adds	r3, #2
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	3303      	adds	r3, #3
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	b29b      	uxth	r3, r3
 8008304:	4413      	add	r3, r2
 8008306:	b29a      	uxth	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	3304      	adds	r3, #4
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	b29a      	uxth	r2, r3
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	3305      	adds	r3, #5
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	b29b      	uxth	r3, r3
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	b29b      	uxth	r3, r3
 8008320:	4413      	add	r3, r2
 8008322:	b29a      	uxth	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	3306      	adds	r3, #6
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	b29a      	uxth	r2, r3
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	3307      	adds	r3, #7
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	b29b      	uxth	r3, r3
 800833c:	4413      	add	r3, r2
 800833e:	b29a      	uxth	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	80da      	strh	r2, [r3, #6]

}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	bc80      	pop	{r7}
 800834c:	4770      	bx	lr

0800834e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008358:	2180      	movs	r1, #128	; 0x80
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fb66 	bl	8008a2c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008360:	2100      	movs	r1, #0
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fb62 	bl	8008a2c <USBD_LL_StallEP>
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d032      	beq.n	80083ec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 f834 	bl	80083f4 <USBD_GetLen>
 800838c:	4603      	mov	r3, r0
 800838e:	3301      	adds	r3, #1
 8008390:	b29b      	uxth	r3, r3
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	75fa      	strb	r2, [r7, #23]
 80083a0:	461a      	mov	r2, r3
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	4413      	add	r3, r2
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	7812      	ldrb	r2, [r2, #0]
 80083aa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	75fa      	strb	r2, [r7, #23]
 80083b2:	461a      	mov	r2, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4413      	add	r3, r2
 80083b8:	2203      	movs	r2, #3
 80083ba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80083bc:	e012      	b.n	80083e4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	60fa      	str	r2, [r7, #12]
 80083c4:	7dfa      	ldrb	r2, [r7, #23]
 80083c6:	1c51      	adds	r1, r2, #1
 80083c8:	75f9      	strb	r1, [r7, #23]
 80083ca:	4611      	mov	r1, r2
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	440a      	add	r2, r1
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	75fa      	strb	r2, [r7, #23]
 80083da:	461a      	mov	r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4413      	add	r3, r2
 80083e0:	2200      	movs	r2, #0
 80083e2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e8      	bne.n	80083be <USBD_GetString+0x4e>
    }
  }
}
 80083ec:	bf00      	nop
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008400:	e005      	b.n	800840e <USBD_GetLen+0x1a>
  {
    len++;
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	3301      	adds	r3, #1
 8008406:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3301      	adds	r3, #1
 800840c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1f5      	bne.n	8008402 <USBD_GetLen+0xe>
  }

  return len;
 8008416:	7bfb      	ldrb	r3, [r7, #15]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr

08008422 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	4613      	mov	r3, r2
 800842e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2202      	movs	r2, #2
 8008434:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008438:	88fa      	ldrh	r2, [r7, #6]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800843e:	88fa      	ldrh	r2, [r7, #6]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	2100      	movs	r1, #0
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 fb77 	bl	8008b3e <USBD_LL_Transmit>

  return USBD_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	4613      	mov	r3, r2
 8008466:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008468:	88fb      	ldrh	r3, [r7, #6]
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	2100      	movs	r1, #0
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 fb65 	bl	8008b3e <USBD_LL_Transmit>

  return USBD_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b084      	sub	sp, #16
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	4613      	mov	r3, r2
 800848a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800848c:	88fb      	ldrh	r3, [r7, #6]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	2100      	movs	r1, #0
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fb76 	bl	8008b84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b082      	sub	sp, #8
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2204      	movs	r2, #4
 80084ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084b2:	2300      	movs	r3, #0
 80084b4:	2200      	movs	r2, #0
 80084b6:	2100      	movs	r1, #0
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fb40 	bl	8008b3e <USBD_LL_Transmit>

  return USBD_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2205      	movs	r2, #5
 80084d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084d8:	2300      	movs	r3, #0
 80084da:	2200      	movs	r2, #0
 80084dc:	2100      	movs	r1, #0
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fb50 	bl	8008b84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084f4:	2200      	movs	r2, #0
 80084f6:	490e      	ldr	r1, [pc, #56]	; (8008530 <MX_USB_DEVICE_Init+0x40>)
 80084f8:	480e      	ldr	r0, [pc, #56]	; (8008534 <MX_USB_DEVICE_Init+0x44>)
 80084fa:	f7fe ff7d 	bl	80073f8 <USBD_Init>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008504:	f7f8 fb2a 	bl	8000b5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008508:	490b      	ldr	r1, [pc, #44]	; (8008538 <MX_USB_DEVICE_Init+0x48>)
 800850a:	480a      	ldr	r0, [pc, #40]	; (8008534 <MX_USB_DEVICE_Init+0x44>)
 800850c:	f7fe ff9f 	bl	800744e <USBD_RegisterClass>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008516:	f7f8 fb21 	bl	8000b5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800851a:	4806      	ldr	r0, [pc, #24]	; (8008534 <MX_USB_DEVICE_Init+0x44>)
 800851c:	f7fe ffb0 	bl	8007480 <USBD_Start>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008526:	f7f8 fb19 	bl	8000b5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800852a:	bf00      	nop
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000608 	.word	0x20000608
 8008534:	200006d8 	.word	0x200006d8
 8008538:	2000050c 	.word	0x2000050c

0800853c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	6039      	str	r1, [r7, #0]
 8008546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	2212      	movs	r2, #18
 800854c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800854e:	4b03      	ldr	r3, [pc, #12]	; (800855c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008550:	4618      	mov	r0, r3
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	bc80      	pop	{r7}
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20000624 	.word	0x20000624

08008560 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	4603      	mov	r3, r0
 8008568:	6039      	str	r1, [r7, #0]
 800856a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2204      	movs	r2, #4
 8008570:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008572:	4b03      	ldr	r3, [pc, #12]	; (8008580 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008574:	4618      	mov	r0, r3
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	bc80      	pop	{r7}
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20000638 	.word	0x20000638

08008584 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	6039      	str	r1, [r7, #0]
 800858e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008590:	79fb      	ldrb	r3, [r7, #7]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d105      	bne.n	80085a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	4907      	ldr	r1, [pc, #28]	; (80085b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800859a:	4808      	ldr	r0, [pc, #32]	; (80085bc <USBD_FS_ProductStrDescriptor+0x38>)
 800859c:	f7ff fee8 	bl	8008370 <USBD_GetString>
 80085a0:	e004      	b.n	80085ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	4904      	ldr	r1, [pc, #16]	; (80085b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80085a6:	4805      	ldr	r0, [pc, #20]	; (80085bc <USBD_FS_ProductStrDescriptor+0x38>)
 80085a8:	f7ff fee2 	bl	8008370 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085ac:	4b02      	ldr	r3, [pc, #8]	; (80085b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	2000099c 	.word	0x2000099c
 80085bc:	08008e58 	.word	0x08008e58

080085c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	6039      	str	r1, [r7, #0]
 80085ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	4904      	ldr	r1, [pc, #16]	; (80085e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085d0:	4804      	ldr	r0, [pc, #16]	; (80085e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085d2:	f7ff fecd 	bl	8008370 <USBD_GetString>
  return USBD_StrDesc;
 80085d6:	4b02      	ldr	r3, [pc, #8]	; (80085e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	2000099c 	.word	0x2000099c
 80085e4:	08008e68 	.word	0x08008e68

080085e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	6039      	str	r1, [r7, #0]
 80085f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	221a      	movs	r2, #26
 80085f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085fa:	f000 f843 	bl	8008684 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085fe:	4b02      	ldr	r3, [pc, #8]	; (8008608 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	2000063c 	.word	0x2000063c

0800860c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	6039      	str	r1, [r7, #0]
 8008616:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d105      	bne.n	800862a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	4907      	ldr	r1, [pc, #28]	; (8008640 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008622:	4808      	ldr	r0, [pc, #32]	; (8008644 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008624:	f7ff fea4 	bl	8008370 <USBD_GetString>
 8008628:	e004      	b.n	8008634 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	4904      	ldr	r1, [pc, #16]	; (8008640 <USBD_FS_ConfigStrDescriptor+0x34>)
 800862e:	4805      	ldr	r0, [pc, #20]	; (8008644 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008630:	f7ff fe9e 	bl	8008370 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008634:	4b02      	ldr	r3, [pc, #8]	; (8008640 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	2000099c 	.word	0x2000099c
 8008644:	08008e7c 	.word	0x08008e7c

08008648 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	4603      	mov	r3, r0
 8008650:	6039      	str	r1, [r7, #0]
 8008652:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d105      	bne.n	8008666 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	4907      	ldr	r1, [pc, #28]	; (800867c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800865e:	4808      	ldr	r0, [pc, #32]	; (8008680 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008660:	f7ff fe86 	bl	8008370 <USBD_GetString>
 8008664:	e004      	b.n	8008670 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	4904      	ldr	r1, [pc, #16]	; (800867c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800866a:	4805      	ldr	r0, [pc, #20]	; (8008680 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800866c:	f7ff fe80 	bl	8008370 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008670:	4b02      	ldr	r3, [pc, #8]	; (800867c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	2000099c 	.word	0x2000099c
 8008680:	08008e88 	.word	0x08008e88

08008684 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800868a:	4b0f      	ldr	r3, [pc, #60]	; (80086c8 <Get_SerialNum+0x44>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008690:	4b0e      	ldr	r3, [pc, #56]	; (80086cc <Get_SerialNum+0x48>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008696:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <Get_SerialNum+0x4c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4413      	add	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086aa:	2208      	movs	r2, #8
 80086ac:	4909      	ldr	r1, [pc, #36]	; (80086d4 <Get_SerialNum+0x50>)
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 f814 	bl	80086dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086b4:	2204      	movs	r2, #4
 80086b6:	4908      	ldr	r1, [pc, #32]	; (80086d8 <Get_SerialNum+0x54>)
 80086b8:	68b8      	ldr	r0, [r7, #8]
 80086ba:	f000 f80f 	bl	80086dc <IntToUnicode>
  }
}
 80086be:	bf00      	nop
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	1ffff7e8 	.word	0x1ffff7e8
 80086cc:	1ffff7ec 	.word	0x1ffff7ec
 80086d0:	1ffff7f0 	.word	0x1ffff7f0
 80086d4:	2000063e 	.word	0x2000063e
 80086d8:	2000064e 	.word	0x2000064e

080086dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	4613      	mov	r3, r2
 80086e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]
 80086f2:	e027      	b.n	8008744 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	0f1b      	lsrs	r3, r3, #28
 80086f8:	2b09      	cmp	r3, #9
 80086fa:	d80b      	bhi.n	8008714 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	0f1b      	lsrs	r3, r3, #28
 8008700:	b2da      	uxtb	r2, r3
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	4619      	mov	r1, r3
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	440b      	add	r3, r1
 800870c:	3230      	adds	r2, #48	; 0x30
 800870e:	b2d2      	uxtb	r2, r2
 8008710:	701a      	strb	r2, [r3, #0]
 8008712:	e00a      	b.n	800872a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	0f1b      	lsrs	r3, r3, #28
 8008718:	b2da      	uxtb	r2, r3
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	4619      	mov	r1, r3
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	440b      	add	r3, r1
 8008724:	3237      	adds	r2, #55	; 0x37
 8008726:	b2d2      	uxtb	r2, r2
 8008728:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008730:	7dfb      	ldrb	r3, [r7, #23]
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	3301      	adds	r3, #1
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	4413      	add	r3, r2
 800873a:	2200      	movs	r2, #0
 800873c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	3301      	adds	r3, #1
 8008742:	75fb      	strb	r3, [r7, #23]
 8008744:	7dfa      	ldrb	r2, [r7, #23]
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	429a      	cmp	r2, r3
 800874a:	d3d3      	bcc.n	80086f4 <IntToUnicode+0x18>
  }
}
 800874c:	bf00      	nop
 800874e:	bf00      	nop
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	bc80      	pop	{r7}
 8008756:	4770      	bx	lr

08008758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a0d      	ldr	r2, [pc, #52]	; (800879c <HAL_PCD_MspInit+0x44>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d113      	bne.n	8008792 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800876a:	4b0d      	ldr	r3, [pc, #52]	; (80087a0 <HAL_PCD_MspInit+0x48>)
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	4a0c      	ldr	r2, [pc, #48]	; (80087a0 <HAL_PCD_MspInit+0x48>)
 8008770:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008774:	61d3      	str	r3, [r2, #28]
 8008776:	4b0a      	ldr	r3, [pc, #40]	; (80087a0 <HAL_PCD_MspInit+0x48>)
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008782:	2200      	movs	r2, #0
 8008784:	2100      	movs	r1, #0
 8008786:	2014      	movs	r0, #20
 8008788:	f7f9 fd2f 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800878c:	2014      	movs	r0, #20
 800878e:	f7f9 fd48 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008792:	bf00      	nop
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	40005c00 	.word	0x40005c00
 80087a0:	40021000 	.word	0x40021000

080087a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80087b8:	4619      	mov	r1, r3
 80087ba:	4610      	mov	r0, r2
 80087bc:	f7fe fea8 	bl	8007510 <USBD_LL_SetupStage>
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80087da:	78fa      	ldrb	r2, [r7, #3]
 80087dc:	6879      	ldr	r1, [r7, #4]
 80087de:	4613      	mov	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	440b      	add	r3, r1
 80087e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	4619      	mov	r1, r3
 80087f2:	f7fe feda 	bl	80075aa <USBD_LL_DataOutStage>
}
 80087f6:	bf00      	nop
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	460b      	mov	r3, r1
 8008808:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008810:	78fa      	ldrb	r2, [r7, #3]
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	440b      	add	r3, r1
 800881e:	333c      	adds	r3, #60	; 0x3c
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	4619      	mov	r1, r3
 8008826:	f7fe ff31 	bl	800768c <USBD_LL_DataInStage>
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff f841 	bl	80078c8 <USBD_LL_SOF>
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008856:	2301      	movs	r3, #1
 8008858:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d001      	beq.n	8008866 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008862:	f7f8 f97b 	bl	8000b5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800886c:	7bfa      	ldrb	r2, [r7, #15]
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f7fe fff1 	bl	8007858 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800887c:	4618      	mov	r0, r3
 800887e:	f7fe ffaa 	bl	80077d6 <USBD_LL_Reset>
}
 8008882:	bf00      	nop
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe ffeb 	bl	8007876 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088a8:	4b04      	ldr	r3, [pc, #16]	; (80088bc <HAL_PCD_SuspendCallback+0x30>)
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	4a03      	ldr	r2, [pc, #12]	; (80088bc <HAL_PCD_SuspendCallback+0x30>)
 80088ae:	f043 0306 	orr.w	r3, r3, #6
 80088b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088b4:	bf00      	nop
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	e000ed00 	.word	0xe000ed00

080088c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe ffe5 	bl	800789e <USBD_LL_Resume>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80088e4:	4a1f      	ldr	r2, [pc, #124]	; (8008964 <USBD_LL_Init+0x88>)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a1d      	ldr	r2, [pc, #116]	; (8008964 <USBD_LL_Init+0x88>)
 80088f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80088f4:	4b1b      	ldr	r3, [pc, #108]	; (8008964 <USBD_LL_Init+0x88>)
 80088f6:	4a1c      	ldr	r2, [pc, #112]	; (8008968 <USBD_LL_Init+0x8c>)
 80088f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80088fa:	4b1a      	ldr	r3, [pc, #104]	; (8008964 <USBD_LL_Init+0x88>)
 80088fc:	2208      	movs	r2, #8
 80088fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008900:	4b18      	ldr	r3, [pc, #96]	; (8008964 <USBD_LL_Init+0x88>)
 8008902:	2202      	movs	r2, #2
 8008904:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008906:	4b17      	ldr	r3, [pc, #92]	; (8008964 <USBD_LL_Init+0x88>)
 8008908:	2200      	movs	r2, #0
 800890a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800890c:	4b15      	ldr	r3, [pc, #84]	; (8008964 <USBD_LL_Init+0x88>)
 800890e:	2200      	movs	r2, #0
 8008910:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008912:	4b14      	ldr	r3, [pc, #80]	; (8008964 <USBD_LL_Init+0x88>)
 8008914:	2200      	movs	r2, #0
 8008916:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008918:	4812      	ldr	r0, [pc, #72]	; (8008964 <USBD_LL_Init+0x88>)
 800891a:	f7f9 fc9c 	bl	8002256 <HAL_PCD_Init>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008924:	f7f8 f91a 	bl	8000b5c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800892e:	2318      	movs	r3, #24
 8008930:	2200      	movs	r2, #0
 8008932:	2100      	movs	r1, #0
 8008934:	f7fb f8f9 	bl	8003b2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800893e:	2358      	movs	r3, #88	; 0x58
 8008940:	2200      	movs	r2, #0
 8008942:	2180      	movs	r1, #128	; 0x80
 8008944:	f7fb f8f1 	bl	8003b2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800894e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008952:	2200      	movs	r2, #0
 8008954:	2181      	movs	r1, #129	; 0x81
 8008956:	f7fb f8e8 	bl	8003b2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20000b9c 	.word	0x20000b9c
 8008968:	40005c00 	.word	0x40005c00

0800896c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008982:	4618      	mov	r0, r3
 8008984:	f7f9 fd72 	bl	800246c <HAL_PCD_Start>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f93c 	bl	8008c0c <USBD_Get_USB_Status>
 8008994:	4603      	mov	r3, r0
 8008996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008998:	7bbb      	ldrb	r3, [r7, #14]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	4608      	mov	r0, r1
 80089ac:	4611      	mov	r1, r2
 80089ae:	461a      	mov	r2, r3
 80089b0:	4603      	mov	r3, r0
 80089b2:	70fb      	strb	r3, [r7, #3]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70bb      	strb	r3, [r7, #2]
 80089b8:	4613      	mov	r3, r2
 80089ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089ca:	78bb      	ldrb	r3, [r7, #2]
 80089cc:	883a      	ldrh	r2, [r7, #0]
 80089ce:	78f9      	ldrb	r1, [r7, #3]
 80089d0:	f7f9 feea 	bl	80027a8 <HAL_PCD_EP_Open>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f916 	bl	8008c0c <USBD_Get_USB_Status>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a08:	78fa      	ldrb	r2, [r7, #3]
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7f9 ff31 	bl	8002874 <HAL_PCD_EP_Close>
 8008a12:	4603      	mov	r3, r0
 8008a14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 f8f7 	bl	8008c0c <USBD_Get_USB_Status>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a46:	78fa      	ldrb	r2, [r7, #3]
 8008a48:	4611      	mov	r1, r2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7f9 ffda 	bl	8002a04 <HAL_PCD_EP_SetStall>
 8008a50:	4603      	mov	r3, r0
 8008a52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 f8d8 	bl	8008c0c <USBD_Get_USB_Status>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	460b      	mov	r3, r1
 8008a74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a84:	78fa      	ldrb	r2, [r7, #3]
 8008a86:	4611      	mov	r1, r2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fa f81b 	bl	8002ac4 <HAL_PCD_EP_ClrStall>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 f8b9 	bl	8008c0c <USBD_Get_USB_Status>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	da0c      	bge.n	8008ade <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aca:	68f9      	ldr	r1, [r7, #12]
 8008acc:	1c5a      	adds	r2, r3, #1
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	00db      	lsls	r3, r3, #3
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3302      	adds	r3, #2
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	e00b      	b.n	8008af6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ae4:	68f9      	ldr	r1, [r7, #12]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	440b      	add	r3, r1
 8008af0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008af4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr

08008b00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b1a:	78fa      	ldrb	r2, [r7, #3]
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7f9 fe1d 	bl	800275e <HAL_PCD_SetAddress>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f86e 	bl	8008c0c <USBD_Get_USB_Status>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b086      	sub	sp, #24
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	607a      	str	r2, [r7, #4]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	72fb      	strb	r3, [r7, #11]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b60:	893b      	ldrh	r3, [r7, #8]
 8008b62:	7af9      	ldrb	r1, [r7, #11]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	f7f9 ff0a 	bl	800297e <HAL_PCD_EP_Transmit>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 f84b 	bl	8008c0c <USBD_Get_USB_Status>
 8008b76:	4603      	mov	r3, r0
 8008b78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	607a      	str	r2, [r7, #4]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	460b      	mov	r3, r1
 8008b92:	72fb      	strb	r3, [r7, #11]
 8008b94:	4613      	mov	r3, r2
 8008b96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ba6:	893b      	ldrh	r3, [r7, #8]
 8008ba8:	7af9      	ldrb	r1, [r7, #11]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	f7f9 feaa 	bl	8002904 <HAL_PCD_EP_Receive>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb4:	7dfb      	ldrb	r3, [r7, #23]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 f828 	bl	8008c0c <USBD_Get_USB_Status>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bd4:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <USBD_static_malloc+0x14>)
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bc80      	pop	{r7}
 8008bde:	4770      	bx	lr
 8008be0:	20000e88 	.word	0x20000e88

08008be4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]

}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bc80      	pop	{r7}
 8008bf4:	4770      	bx	lr

08008bf6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b083      	sub	sp, #12
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c02:	bf00      	nop
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bc80      	pop	{r7}
 8008c0a:	4770      	bx	lr

08008c0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c1a:	79fb      	ldrb	r3, [r7, #7]
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d817      	bhi.n	8008c50 <USBD_Get_USB_Status+0x44>
 8008c20:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <USBD_Get_USB_Status+0x1c>)
 8008c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c26:	bf00      	nop
 8008c28:	08008c39 	.word	0x08008c39
 8008c2c:	08008c3f 	.word	0x08008c3f
 8008c30:	08008c45 	.word	0x08008c45
 8008c34:	08008c4b 	.word	0x08008c4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3c:	e00b      	b.n	8008c56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c3e:	2302      	movs	r3, #2
 8008c40:	73fb      	strb	r3, [r7, #15]
    break;
 8008c42:	e008      	b.n	8008c56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c44:	2301      	movs	r3, #1
 8008c46:	73fb      	strb	r3, [r7, #15]
    break;
 8008c48:	e005      	b.n	8008c56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c4e:	e002      	b.n	8008c56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c50:	2302      	movs	r3, #2
 8008c52:	73fb      	strb	r3, [r7, #15]
    break;
 8008c54:	bf00      	nop
  }
  return usb_status;
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bc80      	pop	{r7}
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop

08008c64 <__libc_init_array>:
 8008c64:	b570      	push	{r4, r5, r6, lr}
 8008c66:	2600      	movs	r6, #0
 8008c68:	4d0c      	ldr	r5, [pc, #48]	; (8008c9c <__libc_init_array+0x38>)
 8008c6a:	4c0d      	ldr	r4, [pc, #52]	; (8008ca0 <__libc_init_array+0x3c>)
 8008c6c:	1b64      	subs	r4, r4, r5
 8008c6e:	10a4      	asrs	r4, r4, #2
 8008c70:	42a6      	cmp	r6, r4
 8008c72:	d109      	bne.n	8008c88 <__libc_init_array+0x24>
 8008c74:	f000 f830 	bl	8008cd8 <_init>
 8008c78:	2600      	movs	r6, #0
 8008c7a:	4d0a      	ldr	r5, [pc, #40]	; (8008ca4 <__libc_init_array+0x40>)
 8008c7c:	4c0a      	ldr	r4, [pc, #40]	; (8008ca8 <__libc_init_array+0x44>)
 8008c7e:	1b64      	subs	r4, r4, r5
 8008c80:	10a4      	asrs	r4, r4, #2
 8008c82:	42a6      	cmp	r6, r4
 8008c84:	d105      	bne.n	8008c92 <__libc_init_array+0x2e>
 8008c86:	bd70      	pop	{r4, r5, r6, pc}
 8008c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c8c:	4798      	blx	r3
 8008c8e:	3601      	adds	r6, #1
 8008c90:	e7ee      	b.n	8008c70 <__libc_init_array+0xc>
 8008c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c96:	4798      	blx	r3
 8008c98:	3601      	adds	r6, #1
 8008c9a:	e7f2      	b.n	8008c82 <__libc_init_array+0x1e>
 8008c9c:	08008fd8 	.word	0x08008fd8
 8008ca0:	08008fd8 	.word	0x08008fd8
 8008ca4:	08008fd8 	.word	0x08008fd8
 8008ca8:	08008fdc 	.word	0x08008fdc

08008cac <memcpy>:
 8008cac:	440a      	add	r2, r1
 8008cae:	4291      	cmp	r1, r2
 8008cb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb4:	d100      	bne.n	8008cb8 <memcpy+0xc>
 8008cb6:	4770      	bx	lr
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cbe:	4291      	cmp	r1, r2
 8008cc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cc4:	d1f9      	bne.n	8008cba <memcpy+0xe>
 8008cc6:	bd10      	pop	{r4, pc}

08008cc8 <memset>:
 8008cc8:	4603      	mov	r3, r0
 8008cca:	4402      	add	r2, r0
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d100      	bne.n	8008cd2 <memset+0xa>
 8008cd0:	4770      	bx	lr
 8008cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8008cd6:	e7f9      	b.n	8008ccc <memset+0x4>

08008cd8 <_init>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	bf00      	nop
 8008cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cde:	bc08      	pop	{r3}
 8008ce0:	469e      	mov	lr, r3
 8008ce2:	4770      	bx	lr

08008ce4 <_fini>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr
